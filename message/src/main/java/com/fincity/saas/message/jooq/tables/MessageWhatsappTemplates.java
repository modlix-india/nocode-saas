/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.message.jooq.tables;


import com.fincity.saas.commons.jooq.convertor.jooq.converters.JSONtoClassConverter;
import com.fincity.saas.message.enums.message.provider.whatsapp.business.Category;
import com.fincity.saas.message.enums.message.provider.whatsapp.business.ParameterFormat;
import com.fincity.saas.message.enums.message.provider.whatsapp.business.SubCategory;
import com.fincity.saas.message.enums.message.provider.whatsapp.business.TemplateRejectedReason;
import com.fincity.saas.message.enums.message.provider.whatsapp.business.TemplateStatus;
import com.fincity.saas.message.jooq.Keys;
import com.fincity.saas.message.jooq.Message;
import com.fincity.saas.message.jooq.tables.MessageMessages.MessageMessagesPath;
import com.fincity.saas.message.jooq.tables.records.MessageWhatsappTemplatesRecord;
import com.fincity.saas.message.model.message.whatsapp.templates.ComponentList;
import com.fincity.saas.message.oserver.files.model.FileDetail;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.EnumConverter;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * WhatsApp message templates
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class MessageWhatsappTemplates extends TableImpl<MessageWhatsappTemplatesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>message.message_whatsapp_templates</code>
     */
    public static final MessageWhatsappTemplates MESSAGE_WHATSAPP_TEMPLATES = new MessageWhatsappTemplates();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessageWhatsappTemplatesRecord> getRecordType() {
        return MessageWhatsappTemplatesRecord.class;
    }

    /**
     * The column <code>message.message_whatsapp_templates.ID</code>. Primary
     * key.
     */
    public final TableField<MessageWhatsappTemplatesRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key.");

    /**
     * The column <code>message.message_whatsapp_templates.APP_CODE</code>. App
     * Code related to this WhatsApp template.
     */
    public final TableField<MessageWhatsappTemplatesRecord, String> APP_CODE = createField(DSL.name("APP_CODE"), SQLDataType.CHAR(64).nullable(false), this, "App Code related to this WhatsApp template.");

    /**
     * The column <code>message.message_whatsapp_templates.CLIENT_CODE</code>.
     * Client Code related to this WhatsApp template.
     */
    public final TableField<MessageWhatsappTemplatesRecord, String> CLIENT_CODE = createField(DSL.name("CLIENT_CODE"), SQLDataType.CHAR(8).nullable(false), this, "Client Code related to this WhatsApp template.");

    /**
     * The column <code>message.message_whatsapp_templates.USER_ID</code>. ID of
     * the user associated with this WhatsApp template.
     */
    public final TableField<MessageWhatsappTemplatesRecord, ULong> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user associated with this WhatsApp template.");

    /**
     * The column <code>message.message_whatsapp_templates.CODE</code>. Unique
     * Code to identify this row.
     */
    public final TableField<MessageWhatsappTemplatesRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.CHAR(22).nullable(false), this, "Unique Code to identify this row.");

    /**
     * The column
     * <code>message.message_whatsapp_templates.WHATSAPP_BUSINESS_ACCOUNT_ID</code>.
     * WhatsApp Business Account ID.
     */
    public final TableField<MessageWhatsappTemplatesRecord, String> WHATSAPP_BUSINESS_ACCOUNT_ID = createField(DSL.name("WHATSAPP_BUSINESS_ACCOUNT_ID"), SQLDataType.VARCHAR(255).nullable(false), this, "WhatsApp Business Account ID.");

    /**
     * The column <code>message.message_whatsapp_templates.TEMPLATE_ID</code>.
     * WhatsApp template ID from Meta.
     */
    public final TableField<MessageWhatsappTemplatesRecord, String> TEMPLATE_ID = createField(DSL.name("TEMPLATE_ID"), SQLDataType.CHAR(255), this, "WhatsApp template ID from Meta.");

    /**
     * The column <code>message.message_whatsapp_templates.TEMPLATE_NAME</code>.
     * Name of the WhatsApp template.
     */
    public final TableField<MessageWhatsappTemplatesRecord, String> TEMPLATE_NAME = createField(DSL.name("TEMPLATE_NAME"), SQLDataType.VARCHAR(512).nullable(false), this, "Name of the WhatsApp template.");

    /**
     * The column
     * <code>message.message_whatsapp_templates.ALLOW_CATEGORY_CHANGE</code>.
     * Indicates whether category change is allowed for this template.
     */
    public final TableField<MessageWhatsappTemplatesRecord, Byte> ALLOW_CATEGORY_CHANGE = createField(DSL.name("ALLOW_CATEGORY_CHANGE"), SQLDataType.TINYINT, this, "Indicates whether category change is allowed for this template.");

    /**
     * The column <code>message.message_whatsapp_templates.CATEGORY</code>.
     * Category of the template (MARKETING, UTILITY, AUTHENTICATION).
     */
    public final TableField<MessageWhatsappTemplatesRecord, Category> CATEGORY = createField(DSL.name("CATEGORY"), SQLDataType.VARCHAR(14).nullable(false), this, "Category of the template (MARKETING, UTILITY, AUTHENTICATION).", new EnumConverter<String, Category>(String.class, Category.class));

    /**
     * The column <code>message.message_whatsapp_templates.SUB_CATEGORY</code>.
     * Sub-category of the template.
     */
    public final TableField<MessageWhatsappTemplatesRecord, SubCategory> SUB_CATEGORY = createField(DSL.name("SUB_CATEGORY"), SQLDataType.VARCHAR(13), this, "Sub-category of the template.", new EnumConverter<String, SubCategory>(String.class, SubCategory.class));

    /**
     * The column
     * <code>message.message_whatsapp_templates.MESSAGE_SEND_TTL_SECONDS</code>.
     * Time-to-live for message sending in seconds.
     */
    public final TableField<MessageWhatsappTemplatesRecord, ULong> MESSAGE_SEND_TTL_SECONDS = createField(DSL.name("MESSAGE_SEND_TTL_SECONDS"), SQLDataType.BIGINTUNSIGNED, this, "Time-to-live for message sending in seconds.");

    /**
     * The column
     * <code>message.message_whatsapp_templates.PARAMETER_FORMAT</code>. Format
     * for template parameters.
     */
    public final TableField<MessageWhatsappTemplatesRecord, ParameterFormat> PARAMETER_FORMAT = createField(DSL.name("PARAMETER_FORMAT"), SQLDataType.VARCHAR(10).nullable(false).defaultValue(DSL.inline("POSITIONAL", SQLDataType.VARCHAR)), this, "Format for template parameters.", new EnumConverter<String, ParameterFormat>(String.class, ParameterFormat.class));

    /**
     * The column <code>message.message_whatsapp_templates.LANGUAGE</code>.
     * Language code of the template.
     */
    public final TableField<MessageWhatsappTemplatesRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.CHAR(10).nullable(false), this, "Language code of the template.");

    /**
     * The column <code>message.message_whatsapp_templates.STATUS</code>. Status
     * of the template.
     */
    public final TableField<MessageWhatsappTemplatesRecord, TemplateStatus> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(16), this, "Status of the template.", new EnumConverter<String, TemplateStatus>(String.class, TemplateStatus.class));

    /**
     * The column
     * <code>message.message_whatsapp_templates.REJECTED_REASON</code>. Reason
     * for template rejection.
     */
    public final TableField<MessageWhatsappTemplatesRecord, TemplateRejectedReason> REJECTED_REASON = createField(DSL.name("REJECTED_REASON"), SQLDataType.VARCHAR(20), this, "Reason for template rejection.", new EnumConverter<String, TemplateRejectedReason>(String.class, TemplateRejectedReason.class));

    /**
     * The column
     * <code>message.message_whatsapp_templates.PREVIOUS_CATEGORY</code>.
     * Previous category of the template.
     */
    public final TableField<MessageWhatsappTemplatesRecord, Category> PREVIOUS_CATEGORY = createField(DSL.name("PREVIOUS_CATEGORY"), SQLDataType.VARCHAR(14), this, "Previous category of the template.", new EnumConverter<String, Category>(String.class, Category.class));

    /**
     * The column
     * <code>message.message_whatsapp_templates.MONTHLY_EDIT_COUNT</code>. Count
     * of edit done in this month.
     */
    public final TableField<MessageWhatsappTemplatesRecord, Integer> MONTHLY_EDIT_COUNT = createField(DSL.name("MONTHLY_EDIT_COUNT"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "Count of edit done in this month.");

    /**
     * The column
     * <code>message.message_whatsapp_templates.HEADER_FILE_DETAIL</code>. File
     * Details if header component has a media file
     */
    public final TableField<MessageWhatsappTemplatesRecord, FileDetail> HEADER_FILE_DETAIL = createField(DSL.name("HEADER_FILE_DETAIL"), SQLDataType.JSON, this, "File Details if header component has a media file", new JSONtoClassConverter<JSON, FileDetail>(JSON.class, FileDetail.class));

    /**
     * The column <code>message.message_whatsapp_templates.COMPONENTS</code>.
     * Template components in JSON format.
     */
    public final TableField<MessageWhatsappTemplatesRecord, ComponentList> COMPONENTS = createField(DSL.name("COMPONENTS"), SQLDataType.JSON, this, "Template components in JSON format.", new JSONtoClassConverter<JSON, ComponentList>(JSON.class, ComponentList.class));

    /**
     * The column <code>message.message_whatsapp_templates.CREATED_BY</code>. ID
     * of the user who created this row.
     */
    public final TableField<MessageWhatsappTemplatesRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row.");

    /**
     * The column <code>message.message_whatsapp_templates.CREATED_AT</code>.
     * Time when this row is created.
     */
    public final TableField<MessageWhatsappTemplatesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created.");

    /**
     * The column <code>message.message_whatsapp_templates.UPDATED_BY</code>. ID
     * of the user who updated this row.
     */
    public final TableField<MessageWhatsappTemplatesRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row.");

    /**
     * The column <code>message.message_whatsapp_templates.UPDATED_AT</code>.
     * Time when this row is updated.
     */
    public final TableField<MessageWhatsappTemplatesRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated.");

    /**
     * The column <code>message.message_whatsapp_templates.IS_ACTIVE</code>.
     * Indicates whether this row is active.
     */
    public final TableField<MessageWhatsappTemplatesRecord, Byte> IS_ACTIVE = createField(DSL.name("IS_ACTIVE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "Indicates whether this row is active.");

    private MessageWhatsappTemplates(Name alias, Table<MessageWhatsappTemplatesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private MessageWhatsappTemplates(Name alias, Table<MessageWhatsappTemplatesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("WhatsApp message templates"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>message.message_whatsapp_templates</code> table
     * reference
     */
    public MessageWhatsappTemplates(String alias) {
        this(DSL.name(alias), MESSAGE_WHATSAPP_TEMPLATES);
    }

    /**
     * Create an aliased <code>message.message_whatsapp_templates</code> table
     * reference
     */
    public MessageWhatsappTemplates(Name alias) {
        this(alias, MESSAGE_WHATSAPP_TEMPLATES);
    }

    /**
     * Create a <code>message.message_whatsapp_templates</code> table reference
     */
    public MessageWhatsappTemplates() {
        this(DSL.name("message_whatsapp_templates"), null);
    }

    public <O extends Record> MessageWhatsappTemplates(Table<O> path, ForeignKey<O, MessageWhatsappTemplatesRecord> childPath, InverseForeignKey<O, MessageWhatsappTemplatesRecord> parentPath) {
        super(path, childPath, parentPath, MESSAGE_WHATSAPP_TEMPLATES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class MessageWhatsappTemplatesPath extends MessageWhatsappTemplates implements Path<MessageWhatsappTemplatesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> MessageWhatsappTemplatesPath(Table<O> path, ForeignKey<O, MessageWhatsappTemplatesRecord> childPath, InverseForeignKey<O, MessageWhatsappTemplatesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private MessageWhatsappTemplatesPath(Name alias, Table<MessageWhatsappTemplatesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public MessageWhatsappTemplatesPath as(String alias) {
            return new MessageWhatsappTemplatesPath(DSL.name(alias), this);
        }

        @Override
        public MessageWhatsappTemplatesPath as(Name alias) {
            return new MessageWhatsappTemplatesPath(alias, this);
        }

        @Override
        public MessageWhatsappTemplatesPath as(Table<?> alias) {
            return new MessageWhatsappTemplatesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Message.MESSAGE;
    }

    @Override
    public Identity<MessageWhatsappTemplatesRecord, ULong> getIdentity() {
        return (Identity<MessageWhatsappTemplatesRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<MessageWhatsappTemplatesRecord> getPrimaryKey() {
        return Keys.KEY_MESSAGE_WHATSAPP_TEMPLATES_PRIMARY;
    }

    @Override
    public List<UniqueKey<MessageWhatsappTemplatesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_MESSAGE_WHATSAPP_TEMPLATES_UK1_MESSAGE_WHATSAPP_TEMPLATES_CODE, Keys.KEY_MESSAGE_WHATSAPP_TEMPLATES_UK2_MESSAGE_WHATSAPP_TEMPLATES_ACCOUNT_ID_NAME, Keys.KEY_MESSAGE_WHATSAPP_TEMPLATES_UK2_MESSAGE_WHATSAPP_TEMPLATES_TEMPLATE_ID);
    }

    private transient MessageMessagesPath _messageMessages;

    /**
     * Get the implicit to-many join path to the
     * <code>message.message_messages</code> table
     */
    public MessageMessagesPath messageMessages() {
        if (_messageMessages == null)
            _messageMessages = new MessageMessagesPath(this, null, Keys.FK2_MESSAGES_WHATSAPP_TEMPLATES_ID.getInverseKey());

        return _messageMessages;
    }

    @Override
    public MessageWhatsappTemplates as(String alias) {
        return new MessageWhatsappTemplates(DSL.name(alias), this);
    }

    @Override
    public MessageWhatsappTemplates as(Name alias) {
        return new MessageWhatsappTemplates(alias, this);
    }

    @Override
    public MessageWhatsappTemplates as(Table<?> alias) {
        return new MessageWhatsappTemplates(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageWhatsappTemplates rename(String name) {
        return new MessageWhatsappTemplates(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageWhatsappTemplates rename(Name name) {
        return new MessageWhatsappTemplates(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageWhatsappTemplates rename(Table<?> name) {
        return new MessageWhatsappTemplates(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageWhatsappTemplates where(Condition condition) {
        return new MessageWhatsappTemplates(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageWhatsappTemplates where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageWhatsappTemplates where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageWhatsappTemplates where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MessageWhatsappTemplates where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MessageWhatsappTemplates where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MessageWhatsappTemplates where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MessageWhatsappTemplates where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageWhatsappTemplates whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageWhatsappTemplates whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
