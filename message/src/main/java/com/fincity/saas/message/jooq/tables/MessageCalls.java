/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.message.jooq.tables;


import com.fincity.saas.message.jooq.Keys;
import com.fincity.saas.message.jooq.Message;
import com.fincity.saas.message.jooq.tables.MessageExotelCalls.MessageExotelCallsPath;
import com.fincity.saas.message.jooq.tables.records.MessageCallsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class MessageCalls extends TableImpl<MessageCallsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>message.message_calls</code>
     */
    public static final MessageCalls MESSAGE_CALLS = new MessageCalls();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessageCallsRecord> getRecordType() {
        return MessageCallsRecord.class;
    }

    /**
     * The column <code>message.message_calls.ID</code>. Primary key.
     */
    public final TableField<MessageCallsRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key.");

    /**
     * The column <code>message.message_calls.APP_CODE</code>. App Code related
     * to this Call.
     */
    public final TableField<MessageCallsRecord, String> APP_CODE = createField(DSL.name("APP_CODE"), SQLDataType.CHAR(64).nullable(false), this, "App Code related to this Call.");

    /**
     * The column <code>message.message_calls.CLIENT_CODE</code>. Client Code
     * related to this Call.
     */
    public final TableField<MessageCallsRecord, String> CLIENT_CODE = createField(DSL.name("CLIENT_CODE"), SQLDataType.CHAR(8).nullable(false), this, "Client Code related to this Call.");

    /**
     * The column <code>message.message_calls.USER_ID</code>. ID of the user
     * associated with this Call.
     */
    public final TableField<MessageCallsRecord, ULong> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user associated with this Call.");

    /**
     * The column <code>message.message_calls.CODE</code>. Unique Code to
     * identify this row.
     */
    public final TableField<MessageCallsRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.CHAR(22).nullable(false), this, "Unique Code to identify this row.");

    /**
     * The column <code>message.message_calls.CONNECTION_NAME</code>. Name of
     * the connection used for the call.
     */
    public final TableField<MessageCallsRecord, String> CONNECTION_NAME = createField(DSL.name("CONNECTION_NAME"), SQLDataType.VARCHAR(255), this, "Name of the connection used for the call.");

    /**
     * The column <code>message.message_calls.CALL_PROVIDER</code>. Name of the
     * call provider (e.g., Exotel or similar).
     */
    public final TableField<MessageCallsRecord, String> CALL_PROVIDER = createField(DSL.name("CALL_PROVIDER"), SQLDataType.VARCHAR(255), this, "Name of the call provider (e.g., Exotel or similar).");

    /**
     * The column <code>message.message_calls.IS_OUTBOUND</code>. Indicates
     * whether the call is outbound.
     */
    public final TableField<MessageCallsRecord, Byte> IS_OUTBOUND = createField(DSL.name("IS_OUTBOUND"), SQLDataType.TINYINT.nullable(false), this, "Indicates whether the call is outbound.");

    /**
     * The column <code>message.message_calls.EXOTEL_CALL_ID</code>. ID of the
     * associated Exotel call.
     */
    public final TableField<MessageCallsRecord, ULong> EXOTEL_CALL_ID = createField(DSL.name("EXOTEL_CALL_ID"), SQLDataType.BIGINTUNSIGNED, this, "ID of the associated Exotel call.");

    /**
     * The column <code>message.message_calls.IS_ACTIVE</code>. Flag to check if
     * this Call is active or not.
     */
    public final TableField<MessageCallsRecord, Boolean> IS_ACTIVE = createField(DSL.name("IS_ACTIVE"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("1", SQLDataType.BOOLEAN)), this, "Flag to check if this Call is active or not.");

    /**
     * The column <code>message.message_calls.CREATED_BY</code>. ID of the user
     * who created this row.
     */
    public final TableField<MessageCallsRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row.");

    /**
     * The column <code>message.message_calls.CREATED_AT</code>. Time when this
     * record was created.
     */
    public final TableField<MessageCallsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this record was created.");

    /**
     * The column <code>message.message_calls.UPDATED_BY</code>. ID of the user
     * who updated this row.
     */
    public final TableField<MessageCallsRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row.");

    /**
     * The column <code>message.message_calls.UPDATED_AT</code>. Time when this
     * record was last updated.
     */
    public final TableField<MessageCallsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this record was last updated.");

    private MessageCalls(Name alias, Table<MessageCallsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private MessageCalls(Name alias, Table<MessageCallsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>message.message_calls</code> table reference
     */
    public MessageCalls(String alias) {
        this(DSL.name(alias), MESSAGE_CALLS);
    }

    /**
     * Create an aliased <code>message.message_calls</code> table reference
     */
    public MessageCalls(Name alias) {
        this(alias, MESSAGE_CALLS);
    }

    /**
     * Create a <code>message.message_calls</code> table reference
     */
    public MessageCalls() {
        this(DSL.name("message_calls"), null);
    }

    public <O extends Record> MessageCalls(Table<O> path, ForeignKey<O, MessageCallsRecord> childPath, InverseForeignKey<O, MessageCallsRecord> parentPath) {
        super(path, childPath, parentPath, MESSAGE_CALLS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class MessageCallsPath extends MessageCalls implements Path<MessageCallsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> MessageCallsPath(Table<O> path, ForeignKey<O, MessageCallsRecord> childPath, InverseForeignKey<O, MessageCallsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private MessageCallsPath(Name alias, Table<MessageCallsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public MessageCallsPath as(String alias) {
            return new MessageCallsPath(DSL.name(alias), this);
        }

        @Override
        public MessageCallsPath as(Name alias) {
            return new MessageCallsPath(alias, this);
        }

        @Override
        public MessageCallsPath as(Table<?> alias) {
            return new MessageCallsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Message.MESSAGE;
    }

    @Override
    public Identity<MessageCallsRecord, ULong> getIdentity() {
        return (Identity<MessageCallsRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<MessageCallsRecord> getPrimaryKey() {
        return Keys.KEY_MESSAGE_CALLS_PRIMARY;
    }

    @Override
    public List<UniqueKey<MessageCallsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_MESSAGE_CALLS_UK1_CALLS_CODE);
    }

    @Override
    public List<ForeignKey<MessageCallsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_CALLS_EXOTEL_CALLS_ID);
    }

    private transient MessageExotelCallsPath _messageExotelCalls;

    /**
     * Get the implicit join path to the
     * <code>message.message_exotel_calls</code> table.
     */
    public MessageExotelCallsPath messageExotelCalls() {
        if (_messageExotelCalls == null)
            _messageExotelCalls = new MessageExotelCallsPath(this, Keys.FK1_CALLS_EXOTEL_CALLS_ID, null);

        return _messageExotelCalls;
    }

    @Override
    public MessageCalls as(String alias) {
        return new MessageCalls(DSL.name(alias), this);
    }

    @Override
    public MessageCalls as(Name alias) {
        return new MessageCalls(alias, this);
    }

    @Override
    public MessageCalls as(Table<?> alias) {
        return new MessageCalls(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageCalls rename(String name) {
        return new MessageCalls(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageCalls rename(Name name) {
        return new MessageCalls(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageCalls rename(Table<?> name) {
        return new MessageCalls(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageCalls where(Condition condition) {
        return new MessageCalls(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageCalls where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageCalls where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageCalls where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MessageCalls where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MessageCalls where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MessageCalls where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MessageCalls where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageCalls whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageCalls whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
