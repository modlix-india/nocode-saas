/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.message.jooq.tables;


import com.fincity.saas.commons.jooq.convertor.jooq.converters.JSONtoClassConverter;
import com.fincity.saas.message.jooq.Keys;
import com.fincity.saas.message.jooq.Message;
import com.fincity.saas.message.jooq.tables.records.MessageWhatsappBusinessAccountRecord;
import com.fincity.saas.message.model.message.whatsapp.business.SubscribedApp;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class MessageWhatsappBusinessAccount extends TableImpl<MessageWhatsappBusinessAccountRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>message.message_whatsapp_business_account</code>
     */
    public static final MessageWhatsappBusinessAccount MESSAGE_WHATSAPP_BUSINESS_ACCOUNT = new MessageWhatsappBusinessAccount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessageWhatsappBusinessAccountRecord> getRecordType() {
        return MessageWhatsappBusinessAccountRecord.class;
    }

    /**
     * The column <code>message.message_whatsapp_business_account.ID</code>.
     * Primary key.
     */
    public final TableField<MessageWhatsappBusinessAccountRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key.");

    /**
     * The column
     * <code>message.message_whatsapp_business_account.APP_CODE</code>. App Code
     * related to this message.
     */
    public final TableField<MessageWhatsappBusinessAccountRecord, String> APP_CODE = createField(DSL.name("APP_CODE"), SQLDataType.CHAR(64).nullable(false), this, "App Code related to this message.");

    /**
     * The column
     * <code>message.message_whatsapp_business_account.CLIENT_CODE</code>.
     * Client Code related to this message.
     */
    public final TableField<MessageWhatsappBusinessAccountRecord, String> CLIENT_CODE = createField(DSL.name("CLIENT_CODE"), SQLDataType.CHAR(8).nullable(false), this, "Client Code related to this message.");

    /**
     * The column
     * <code>message.message_whatsapp_business_account.USER_ID</code>. ID of the
     * user associated with this message.
     */
    public final TableField<MessageWhatsappBusinessAccountRecord, ULong> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user associated with this message.");

    /**
     * The column <code>message.message_whatsapp_business_account.CODE</code>.
     * Unique Code to identify this row.
     */
    public final TableField<MessageWhatsappBusinessAccountRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.CHAR(22).nullable(false), this, "Unique Code to identify this row.");

    /**
     * The column
     * <code>message.message_whatsapp_business_account.WHATSAPP_BUSINESS_ACCOUNT_ID</code>.
     * WhatsApp Business Account ID.
     */
    public final TableField<MessageWhatsappBusinessAccountRecord, String> WHATSAPP_BUSINESS_ACCOUNT_ID = createField(DSL.name("WHATSAPP_BUSINESS_ACCOUNT_ID"), SQLDataType.VARCHAR(255).nullable(false), this, "WhatsApp Business Account ID.");

    /**
     * The column <code>message.message_whatsapp_business_account.NAME</code>.
     * WhatsApp Business Account Name
     */
    public final TableField<MessageWhatsappBusinessAccountRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "WhatsApp Business Account Name");

    /**
     * The column
     * <code>message.message_whatsapp_business_account.CURRENCY</code>. WhatsApp
     * Business Account Currency
     */
    public final TableField<MessageWhatsappBusinessAccountRecord, String> CURRENCY = createField(DSL.name("CURRENCY"), SQLDataType.VARCHAR(255), this, "WhatsApp Business Account Currency");

    /**
     * The column
     * <code>message.message_whatsapp_business_account.TIMEZONE_ID</code>.
     * WhatsApp Business Account Timezone ID
     */
    public final TableField<MessageWhatsappBusinessAccountRecord, String> TIMEZONE_ID = createField(DSL.name("TIMEZONE_ID"), SQLDataType.VARCHAR(255), this, "WhatsApp Business Account Timezone ID");

    /**
     * The column
     * <code>message.message_whatsapp_business_account.MESSAGE_TEMPLATE_NAMESPACE</code>.
     * WhatsApp Business Account Message Template Namespace
     */
    public final TableField<MessageWhatsappBusinessAccountRecord, String> MESSAGE_TEMPLATE_NAMESPACE = createField(DSL.name("MESSAGE_TEMPLATE_NAMESPACE"), SQLDataType.VARCHAR(255).nullable(false), this, "WhatsApp Business Account Message Template Namespace");

    /**
     * The column
     * <code>message.message_whatsapp_business_account.SUBSCRIBED_APP</code>.
     * WhatsApp Business Account Subscribed App
     */
    public final TableField<MessageWhatsappBusinessAccountRecord, SubscribedApp> SUBSCRIBED_APP = createField(DSL.name("SUBSCRIBED_APP"), SQLDataType.JSON, this, "WhatsApp Business Account Subscribed App", new JSONtoClassConverter<JSON, SubscribedApp>(JSON.class, SubscribedApp.class));

    /**
     * The column
     * <code>message.message_whatsapp_business_account.IS_ACTIVE</code>. Flag to
     * check if this message is active or not.
     */
    public final TableField<MessageWhatsappBusinessAccountRecord, Boolean> IS_ACTIVE = createField(DSL.name("IS_ACTIVE"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("1", SQLDataType.BOOLEAN)), this, "Flag to check if this message is active or not.");

    /**
     * The column
     * <code>message.message_whatsapp_business_account.CREATED_BY</code>. ID of
     * the user who created this row.
     */
    public final TableField<MessageWhatsappBusinessAccountRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row.");

    /**
     * The column
     * <code>message.message_whatsapp_business_account.CREATED_AT</code>. Time
     * when this record was created.
     */
    public final TableField<MessageWhatsappBusinessAccountRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this record was created.");

    /**
     * The column
     * <code>message.message_whatsapp_business_account.UPDATED_BY</code>. ID of
     * the user who updated this row.
     */
    public final TableField<MessageWhatsappBusinessAccountRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row.");

    /**
     * The column
     * <code>message.message_whatsapp_business_account.UPDATED_AT</code>. Time
     * when this record was last updated.
     */
    public final TableField<MessageWhatsappBusinessAccountRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this record was last updated.");

    private MessageWhatsappBusinessAccount(Name alias, Table<MessageWhatsappBusinessAccountRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private MessageWhatsappBusinessAccount(Name alias, Table<MessageWhatsappBusinessAccountRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>message.message_whatsapp_business_account</code>
     * table reference
     */
    public MessageWhatsappBusinessAccount(String alias) {
        this(DSL.name(alias), MESSAGE_WHATSAPP_BUSINESS_ACCOUNT);
    }

    /**
     * Create an aliased <code>message.message_whatsapp_business_account</code>
     * table reference
     */
    public MessageWhatsappBusinessAccount(Name alias) {
        this(alias, MESSAGE_WHATSAPP_BUSINESS_ACCOUNT);
    }

    /**
     * Create a <code>message.message_whatsapp_business_account</code> table
     * reference
     */
    public MessageWhatsappBusinessAccount() {
        this(DSL.name("message_whatsapp_business_account"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Message.MESSAGE;
    }

    @Override
    public Identity<MessageWhatsappBusinessAccountRecord, ULong> getIdentity() {
        return (Identity<MessageWhatsappBusinessAccountRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<MessageWhatsappBusinessAccountRecord> getPrimaryKey() {
        return Keys.KEY_MESSAGE_WHATSAPP_BUSINESS_ACCOUNT_PRIMARY;
    }

    @Override
    public List<UniqueKey<MessageWhatsappBusinessAccountRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_MESSAGE_WHATSAPP_BUSINESS_ACCOUNT_UK1_MESSAGES_CODE, Keys.KEY_MESSAGE_WHATSAPP_BUSINESS_ACCOUNT_UK2_WHATSAPP_BUSINESS_ACCOUNT_AC_CC_BAID);
    }

    @Override
    public MessageWhatsappBusinessAccount as(String alias) {
        return new MessageWhatsappBusinessAccount(DSL.name(alias), this);
    }

    @Override
    public MessageWhatsappBusinessAccount as(Name alias) {
        return new MessageWhatsappBusinessAccount(alias, this);
    }

    @Override
    public MessageWhatsappBusinessAccount as(Table<?> alias) {
        return new MessageWhatsappBusinessAccount(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageWhatsappBusinessAccount rename(String name) {
        return new MessageWhatsappBusinessAccount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageWhatsappBusinessAccount rename(Name name) {
        return new MessageWhatsappBusinessAccount(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageWhatsappBusinessAccount rename(Table<?> name) {
        return new MessageWhatsappBusinessAccount(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageWhatsappBusinessAccount where(Condition condition) {
        return new MessageWhatsappBusinessAccount(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageWhatsappBusinessAccount where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageWhatsappBusinessAccount where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageWhatsappBusinessAccount where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MessageWhatsappBusinessAccount where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MessageWhatsappBusinessAccount where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MessageWhatsappBusinessAccount where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MessageWhatsappBusinessAccount where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageWhatsappBusinessAccount whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageWhatsappBusinessAccount whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
