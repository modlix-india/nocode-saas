/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.message.jooq.tables;


import com.fincity.saas.commons.jooq.convertor.jooq.converters.JSONtoClassConverter;
import com.fincity.saas.message.jooq.Indexes;
import com.fincity.saas.message.jooq.Keys;
import com.fincity.saas.message.jooq.Message;
import com.fincity.saas.message.jooq.tables.records.MessageMessageWebhooksRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.Map;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class MessageMessageWebhooks extends TableImpl<MessageMessageWebhooksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>message.message_message_webhooks</code>
     */
    public static final MessageMessageWebhooks MESSAGE_MESSAGE_WEBHOOKS = new MessageMessageWebhooks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessageMessageWebhooksRecord> getRecordType() {
        return MessageMessageWebhooksRecord.class;
    }

    /**
     * The column <code>message.message_message_webhooks.ID</code>. Primary key.
     */
    public final TableField<MessageMessageWebhooksRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key.");

    /**
     * The column <code>message.message_message_webhooks.APP_CODE</code>. App
     * Code related to this message.
     */
    public final TableField<MessageMessageWebhooksRecord, String> APP_CODE = createField(DSL.name("APP_CODE"), SQLDataType.CHAR(64).nullable(false), this, "App Code related to this message.");

    /**
     * The column <code>message.message_message_webhooks.CLIENT_CODE</code>.
     * Client Code related to this message.
     */
    public final TableField<MessageMessageWebhooksRecord, String> CLIENT_CODE = createField(DSL.name("CLIENT_CODE"), SQLDataType.CHAR(8).nullable(false), this, "Client Code related to this message.");

    /**
     * The column <code>message.message_message_webhooks.USER_ID</code>. ID of
     * the user associated with this message.
     */
    public final TableField<MessageMessageWebhooksRecord, ULong> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user associated with this message.");

    /**
     * The column <code>message.message_message_webhooks.CODE</code>. Unique
     * Code to identify this row.
     */
    public final TableField<MessageMessageWebhooksRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.CHAR(22).nullable(false), this, "Unique Code to identify this row.");

    /**
     * The column <code>message.message_message_webhooks.PROVIDER</code>.
     * Provider of the message.
     */
    public final TableField<MessageMessageWebhooksRecord, String> PROVIDER = createField(DSL.name("PROVIDER"), SQLDataType.CHAR(22).nullable(false).defaultValue(DSL.inline("NONE", SQLDataType.CHAR)), this, "Provider of the message.");

    /**
     * The column <code>message.message_message_webhooks.IS_PROCESSED</code>.
     * Flag to check if this message has been processed or not.
     */
    public final TableField<MessageMessageWebhooksRecord, Byte> IS_PROCESSED = createField(DSL.name("IS_PROCESSED"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Flag to check if this message has been processed or not.");

    /**
     * The column <code>message.message_message_webhooks.EVENT</code>. Message
     * Content
     */
    public final TableField<MessageMessageWebhooksRecord, Map> EVENT = createField(DSL.name("EVENT"), SQLDataType.JSON, this, "Message Content", new JSONtoClassConverter<JSON, Map>(JSON.class, Map.class));

    /**
     * The column <code>message.message_message_webhooks.IS_ACTIVE</code>. Flag
     * to check if this message is active or not.
     */
    public final TableField<MessageMessageWebhooksRecord, Byte> IS_ACTIVE = createField(DSL.name("IS_ACTIVE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "Flag to check if this message is active or not.");

    /**
     * The column <code>message.message_message_webhooks.CREATED_BY</code>. ID
     * of the user who created this row.
     */
    public final TableField<MessageMessageWebhooksRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row.");

    /**
     * The column <code>message.message_message_webhooks.CREATED_AT</code>. Time
     * when this record was created.
     */
    public final TableField<MessageMessageWebhooksRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this record was created.");

    /**
     * The column <code>message.message_message_webhooks.UPDATED_BY</code>. ID
     * of the user who updated this row.
     */
    public final TableField<MessageMessageWebhooksRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row.");

    /**
     * The column <code>message.message_message_webhooks.UPDATED_AT</code>. Time
     * when this record was last updated.
     */
    public final TableField<MessageMessageWebhooksRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this record was last updated.");

    private MessageMessageWebhooks(Name alias, Table<MessageMessageWebhooksRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private MessageMessageWebhooks(Name alias, Table<MessageMessageWebhooksRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>message.message_message_webhooks</code> table
     * reference
     */
    public MessageMessageWebhooks(String alias) {
        this(DSL.name(alias), MESSAGE_MESSAGE_WEBHOOKS);
    }

    /**
     * Create an aliased <code>message.message_message_webhooks</code> table
     * reference
     */
    public MessageMessageWebhooks(Name alias) {
        this(alias, MESSAGE_MESSAGE_WEBHOOKS);
    }

    /**
     * Create a <code>message.message_message_webhooks</code> table reference
     */
    public MessageMessageWebhooks() {
        this(DSL.name("message_message_webhooks"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Message.MESSAGE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.MESSAGE_MESSAGE_WEBHOOKS_IDX1_MESSAGE_WEBHOOKS_PROVIDER);
    }

    @Override
    public Identity<MessageMessageWebhooksRecord, ULong> getIdentity() {
        return (Identity<MessageMessageWebhooksRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<MessageMessageWebhooksRecord> getPrimaryKey() {
        return Keys.KEY_MESSAGE_MESSAGE_WEBHOOKS_PRIMARY;
    }

    @Override
    public List<UniqueKey<MessageMessageWebhooksRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_MESSAGE_MESSAGE_WEBHOOKS_UK1_MESSAGES_CODE);
    }

    @Override
    public MessageMessageWebhooks as(String alias) {
        return new MessageMessageWebhooks(DSL.name(alias), this);
    }

    @Override
    public MessageMessageWebhooks as(Name alias) {
        return new MessageMessageWebhooks(alias, this);
    }

    @Override
    public MessageMessageWebhooks as(Table<?> alias) {
        return new MessageMessageWebhooks(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageMessageWebhooks rename(String name) {
        return new MessageMessageWebhooks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageMessageWebhooks rename(Name name) {
        return new MessageMessageWebhooks(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageMessageWebhooks rename(Table<?> name) {
        return new MessageMessageWebhooks(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageMessageWebhooks where(Condition condition) {
        return new MessageMessageWebhooks(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageMessageWebhooks where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageMessageWebhooks where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageMessageWebhooks where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MessageMessageWebhooks where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MessageMessageWebhooks where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MessageMessageWebhooks where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MessageMessageWebhooks where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageMessageWebhooks whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageMessageWebhooks whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
