/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.message.jooq.tables;


import com.fincity.saas.message.jooq.Keys;
import com.fincity.saas.message.jooq.Message;
import com.fincity.saas.message.jooq.tables.records.MessageProviderIdentifiersRecord;
import com.fincity.saas.message.oserver.core.enums.ConnectionSubType;
import com.fincity.saas.message.oserver.core.enums.ConnectionType;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.EnumConverter;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class MessageProviderIdentifiers extends TableImpl<MessageProviderIdentifiersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>message.message_provider_identifiers</code>
     */
    public static final MessageProviderIdentifiers MESSAGE_PROVIDER_IDENTIFIERS = new MessageProviderIdentifiers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessageProviderIdentifiersRecord> getRecordType() {
        return MessageProviderIdentifiersRecord.class;
    }

    /**
     * The column <code>message.message_provider_identifiers.ID</code>. Primary
     * key.
     */
    public final TableField<MessageProviderIdentifiersRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key.");

    /**
     * The column <code>message.message_provider_identifiers.APP_CODE</code>.
     * App Code related to this message.
     */
    public final TableField<MessageProviderIdentifiersRecord, String> APP_CODE = createField(DSL.name("APP_CODE"), SQLDataType.CHAR(64).nullable(false), this, "App Code related to this message.");

    /**
     * The column <code>message.message_provider_identifiers.CLIENT_CODE</code>.
     * Client Code related to this message.
     */
    public final TableField<MessageProviderIdentifiersRecord, String> CLIENT_CODE = createField(DSL.name("CLIENT_CODE"), SQLDataType.CHAR(8).nullable(false), this, "Client Code related to this message.");

    /**
     * The column <code>message.message_provider_identifiers.CODE</code>. Unique
     * Code to identify this row.
     */
    public final TableField<MessageProviderIdentifiersRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.CHAR(22).nullable(false), this, "Unique Code to identify this row.");

    /**
     * The column
     * <code>message.message_provider_identifiers.CONNECTION_TYPE</code>.
     * Connection type for this Identifier
     */
    public final TableField<MessageProviderIdentifiersRecord, ConnectionType> CONNECTION_TYPE = createField(DSL.name("CONNECTION_TYPE"), SQLDataType.VARCHAR(12).nullable(false), this, "Connection type for this Identifier", new EnumConverter<String, ConnectionType>(String.class, ConnectionType.class));

    /**
     * The column
     * <code>message.message_provider_identifiers.CONNECTION_SUB_TYPE</code>.
     * Connection Sub type for this Identifier
     */
    public final TableField<MessageProviderIdentifiersRecord, ConnectionSubType> CONNECTION_SUB_TYPE = createField(DSL.name("CONNECTION_SUB_TYPE"), SQLDataType.VARCHAR(15).nullable(false), this, "Connection Sub type for this Identifier", new EnumConverter<String, ConnectionSubType>(String.class, ConnectionSubType.class));

    /**
     * The column <code>message.message_provider_identifiers.IDENTIFIER</code>.
     * Identifier for this connection and connection sub type for the client.
     */
    public final TableField<MessageProviderIdentifiersRecord, String> IDENTIFIER = createField(DSL.name("IDENTIFIER"), SQLDataType.CHAR(128).nullable(false), this, "Identifier for this connection and connection sub type for the client.");

    /**
     * The column <code>message.message_provider_identifiers.IS_DEFAULT</code>.
     * Flag to check if this message is active or not.
     */
    public final TableField<MessageProviderIdentifiersRecord, Byte> IS_DEFAULT = createField(DSL.name("IS_DEFAULT"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "Flag to check if this message is active or not.");

    /**
     * The column <code>message.message_provider_identifiers.IS_ACTIVE</code>.
     * Flag to check if this message is active or not.
     */
    public final TableField<MessageProviderIdentifiersRecord, Byte> IS_ACTIVE = createField(DSL.name("IS_ACTIVE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "Flag to check if this message is active or not.");

    /**
     * The column <code>message.message_provider_identifiers.CREATED_BY</code>.
     * ID of the user who created this row.
     */
    public final TableField<MessageProviderIdentifiersRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row.");

    /**
     * The column <code>message.message_provider_identifiers.CREATED_AT</code>.
     * Time when this record was created.
     */
    public final TableField<MessageProviderIdentifiersRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this record was created.");

    /**
     * The column <code>message.message_provider_identifiers.UPDATED_BY</code>.
     * ID of the user who updated this row.
     */
    public final TableField<MessageProviderIdentifiersRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row.");

    /**
     * The column <code>message.message_provider_identifiers.UPDATED_AT</code>.
     * Time when this record was last updated.
     */
    public final TableField<MessageProviderIdentifiersRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this record was last updated.");

    private MessageProviderIdentifiers(Name alias, Table<MessageProviderIdentifiersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private MessageProviderIdentifiers(Name alias, Table<MessageProviderIdentifiersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>message.message_provider_identifiers</code> table
     * reference
     */
    public MessageProviderIdentifiers(String alias) {
        this(DSL.name(alias), MESSAGE_PROVIDER_IDENTIFIERS);
    }

    /**
     * Create an aliased <code>message.message_provider_identifiers</code> table
     * reference
     */
    public MessageProviderIdentifiers(Name alias) {
        this(alias, MESSAGE_PROVIDER_IDENTIFIERS);
    }

    /**
     * Create a <code>message.message_provider_identifiers</code> table
     * reference
     */
    public MessageProviderIdentifiers() {
        this(DSL.name("message_provider_identifiers"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Message.MESSAGE;
    }

    @Override
    public Identity<MessageProviderIdentifiersRecord, ULong> getIdentity() {
        return (Identity<MessageProviderIdentifiersRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<MessageProviderIdentifiersRecord> getPrimaryKey() {
        return Keys.KEY_MESSAGE_PROVIDER_IDENTIFIERS_PRIMARY;
    }

    @Override
    public List<UniqueKey<MessageProviderIdentifiersRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_MESSAGE_PROVIDER_IDENTIFIERS_UK1_PROVIDER_IDENTIFIER_CODE, Keys.KEY_MESSAGE_PROVIDER_IDENTIFIERS_UK2_PROVIDER_IDENTIFIER_APP_CODE_CLIENT_CODE_IDENTIFIER);
    }

    @Override
    public MessageProviderIdentifiers as(String alias) {
        return new MessageProviderIdentifiers(DSL.name(alias), this);
    }

    @Override
    public MessageProviderIdentifiers as(Name alias) {
        return new MessageProviderIdentifiers(alias, this);
    }

    @Override
    public MessageProviderIdentifiers as(Table<?> alias) {
        return new MessageProviderIdentifiers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageProviderIdentifiers rename(String name) {
        return new MessageProviderIdentifiers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageProviderIdentifiers rename(Name name) {
        return new MessageProviderIdentifiers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageProviderIdentifiers rename(Table<?> name) {
        return new MessageProviderIdentifiers(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageProviderIdentifiers where(Condition condition) {
        return new MessageProviderIdentifiers(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageProviderIdentifiers where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageProviderIdentifiers where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageProviderIdentifiers where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MessageProviderIdentifiers where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MessageProviderIdentifiers where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MessageProviderIdentifiers where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MessageProviderIdentifiers where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageProviderIdentifiers whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageProviderIdentifiers whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
