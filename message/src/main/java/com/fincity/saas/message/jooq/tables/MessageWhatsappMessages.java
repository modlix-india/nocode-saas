/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.message.jooq.tables;


import com.fincity.saas.commons.jooq.convertor.jooq.converters.JSONtoClassConverter;
import com.fincity.saas.message.enums.message.provider.whatsapp.cloud.MessageStatus;
import com.fincity.saas.message.enums.message.provider.whatsapp.cloud.MessageType;
import com.fincity.saas.message.jooq.Indexes;
import com.fincity.saas.message.jooq.Keys;
import com.fincity.saas.message.jooq.Message;
import com.fincity.saas.message.jooq.tables.MessageMessages.MessageMessagesPath;
import com.fincity.saas.message.jooq.tables.records.MessageWhatsappMessagesRecord;
import com.fincity.saas.message.model.message.whatsapp.messages.response.MessageResponse;
import com.fincity.saas.message.model.message.whatsapp.webhook.IMessage;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.EnumConverter;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class MessageWhatsappMessages extends TableImpl<MessageWhatsappMessagesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>message.message_whatsapp_messages</code>
     */
    public static final MessageWhatsappMessages MESSAGE_WHATSAPP_MESSAGES = new MessageWhatsappMessages();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessageWhatsappMessagesRecord> getRecordType() {
        return MessageWhatsappMessagesRecord.class;
    }

    /**
     * The column <code>message.message_whatsapp_messages.ID</code>. Primary
     * key.
     */
    public final TableField<MessageWhatsappMessagesRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key.");

    /**
     * The column <code>message.message_whatsapp_messages.APP_CODE</code>. App
     * Code related to this WhatsApp message.
     */
    public final TableField<MessageWhatsappMessagesRecord, String> APP_CODE = createField(DSL.name("APP_CODE"), SQLDataType.CHAR(64).nullable(false), this, "App Code related to this WhatsApp message.");

    /**
     * The column <code>message.message_whatsapp_messages.CLIENT_CODE</code>.
     * Client Code related to this WhatsApp message.
     */
    public final TableField<MessageWhatsappMessagesRecord, String> CLIENT_CODE = createField(DSL.name("CLIENT_CODE"), SQLDataType.CHAR(8).nullable(false), this, "Client Code related to this WhatsApp message.");

    /**
     * The column <code>message.message_whatsapp_messages.USER_ID</code>. ID of
     * the user associated with this WhatsApp message.
     */
    public final TableField<MessageWhatsappMessagesRecord, ULong> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user associated with this WhatsApp message.");

    /**
     * The column <code>message.message_whatsapp_messages.CODE</code>. Unique
     * Code to identify this row.
     */
    public final TableField<MessageWhatsappMessagesRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.CHAR(22).nullable(false), this, "Unique Code to identify this row.");

    /**
     * The column <code>message.message_whatsapp_messages.MESSAGE_ID</code>.
     * WhatsApp message ID.
     */
    public final TableField<MessageWhatsappMessagesRecord, String> MESSAGE_ID = createField(DSL.name("MESSAGE_ID"), SQLDataType.VARCHAR(255), this, "WhatsApp message ID.");

    /**
     * The column
     * <code>message.message_whatsapp_messages.WHATSAPP_PHONE_NUMBER_ID</code>.
     * ID of the associated Business phone number.
     */
    public final TableField<MessageWhatsappMessagesRecord, ULong> WHATSAPP_PHONE_NUMBER_ID = createField(DSL.name("WHATSAPP_PHONE_NUMBER_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "ID of the associated Business phone number.");

    /**
     * The column <code>message.message_whatsapp_messages.FROM_DIAL_CODE</code>.
     * Dial code of the sender's phone number.
     */
    public final TableField<MessageWhatsappMessagesRecord, Short> FROM_DIAL_CODE = createField(DSL.name("FROM_DIAL_CODE"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.inline("91", SQLDataType.SMALLINT)), this, "Dial code of the sender's phone number.");

    /**
     * The column <code>message.message_whatsapp_messages.FROM</code>. Phone
     * number of the sender.
     */
    public final TableField<MessageWhatsappMessagesRecord, String> FROM = createField(DSL.name("FROM"), SQLDataType.CHAR(15), this, "Phone number of the sender.");

    /**
     * The column <code>message.message_whatsapp_messages.TO_DIAL_CODE</code>.
     * Dial code of the recipient's phone number.
     */
    public final TableField<MessageWhatsappMessagesRecord, Short> TO_DIAL_CODE = createField(DSL.name("TO_DIAL_CODE"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.inline("91", SQLDataType.SMALLINT)), this, "Dial code of the recipient's phone number.");

    /**
     * The column <code>message.message_whatsapp_messages.TO</code>. Phone
     * number of the recipient.
     */
    public final TableField<MessageWhatsappMessagesRecord, String> TO = createField(DSL.name("TO"), SQLDataType.CHAR(15), this, "Phone number of the recipient.");

    /**
     * The column <code>message.message_whatsapp_messages.MESSAGE_TYPE</code>.
     * Type of the message (TEXT, IMAGE, VIDEO, etc.).
     */
    public final TableField<MessageWhatsappMessagesRecord, MessageType> MESSAGE_TYPE = createField(DSL.name("MESSAGE_TYPE"), SQLDataType.VARCHAR(11).nullable(false).defaultValue(DSL.inline("TEXT", SQLDataType.VARCHAR)), this, "Type of the message (TEXT, IMAGE, VIDEO, etc.).", new EnumConverter<String, MessageType>(String.class, MessageType.class));

    /**
     * The column <code>message.message_whatsapp_messages.MESSAGE_STATUS</code>.
     * Status of the message.
     */
    public final TableField<MessageWhatsappMessagesRecord, MessageStatus> MESSAGE_STATUS = createField(DSL.name("MESSAGE_STATUS"), SQLDataType.VARCHAR(9).nullable(false).defaultValue(DSL.inline("SENT", SQLDataType.VARCHAR)), this, "Status of the message.", new EnumConverter<String, MessageStatus>(String.class, MessageStatus.class));

    /**
     * The column <code>message.message_whatsapp_messages.SENT_TIME</code>.
     * Timestamp when the message was sent.
     */
    public final TableField<MessageWhatsappMessagesRecord, LocalDateTime> SENT_TIME = createField(DSL.name("SENT_TIME"), SQLDataType.LOCALDATETIME(0), this, "Timestamp when the message was sent.");

    /**
     * The column <code>message.message_whatsapp_messages.DELIVERED_TIME</code>.
     * Timestamp when the message was delivered.
     */
    public final TableField<MessageWhatsappMessagesRecord, LocalDateTime> DELIVERED_TIME = createField(DSL.name("DELIVERED_TIME"), SQLDataType.LOCALDATETIME(0), this, "Timestamp when the message was delivered.");

    /**
     * The column <code>message.message_whatsapp_messages.READ_TIME</code>.
     * Timestamp when the message was read.
     */
    public final TableField<MessageWhatsappMessagesRecord, LocalDateTime> READ_TIME = createField(DSL.name("READ_TIME"), SQLDataType.LOCALDATETIME(0), this, "Timestamp when the message was read.");

    /**
     * The column <code>message.message_whatsapp_messages.FAILED_TIME</code>.
     * Timestamp when the message failed.
     */
    public final TableField<MessageWhatsappMessagesRecord, LocalDateTime> FAILED_TIME = createField(DSL.name("FAILED_TIME"), SQLDataType.LOCALDATETIME(0), this, "Timestamp when the message failed.");

    /**
     * The column <code>message.message_whatsapp_messages.FAILURE_REASON</code>.
     * Reason for message failure.
     */
    public final TableField<MessageWhatsappMessagesRecord, String> FAILURE_REASON = createField(DSL.name("FAILURE_REASON"), SQLDataType.CLOB, this, "Reason for message failure.");

    /**
     * The column <code>message.message_whatsapp_messages.IS_OUTBOUND</code>.
     * Indicates whether the message is outbound.
     */
    public final TableField<MessageWhatsappMessagesRecord, Byte> IS_OUTBOUND = createField(DSL.name("IS_OUTBOUND"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "Indicates whether the message is outbound.");

    /**
     * The column <code>message.message_whatsapp_messages.MESSAGE</code>. Entire
     * Message object send by WhatsApp.
     */
    public final TableField<MessageWhatsappMessagesRecord, com.fincity.saas.message.model.message.whatsapp.messages.Message> MESSAGE = createField(DSL.name("MESSAGE"), SQLDataType.JSON, this, "Entire Message object send by WhatsApp.", new JSONtoClassConverter<JSON, com.fincity.saas.message.model.message.whatsapp.messages.Message>(JSON.class, com.fincity.saas.message.model.message.whatsapp.messages.Message.class));

    /**
     * The column <code>message.message_whatsapp_messages.IN_MESSAGE</code>.
     * Inbound message object
     */
    public final TableField<MessageWhatsappMessagesRecord, IMessage> IN_MESSAGE = createField(DSL.name("IN_MESSAGE"), SQLDataType.JSON, this, "Inbound message object", new JSONtoClassConverter<JSON, IMessage>(JSON.class, IMessage.class));

    /**
     * The column
     * <code>message.message_whatsapp_messages.MESSAGE_RESPONSE</code>. Entire
     * Message Response object send by WhatsApp.
     */
    public final TableField<MessageWhatsappMessagesRecord, MessageResponse> MESSAGE_RESPONSE = createField(DSL.name("MESSAGE_RESPONSE"), SQLDataType.JSON, this, "Entire Message Response object send by WhatsApp.", new JSONtoClassConverter<JSON, MessageResponse>(JSON.class, MessageResponse.class));

    /**
     * The column <code>message.message_whatsapp_messages.IS_ACTIVE</code>. Flag
     * to check if this message is active or not.
     */
    public final TableField<MessageWhatsappMessagesRecord, Byte> IS_ACTIVE = createField(DSL.name("IS_ACTIVE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "Flag to check if this message is active or not.");

    /**
     * The column <code>message.message_whatsapp_messages.CREATED_BY</code>. ID
     * of the user who created this row.
     */
    public final TableField<MessageWhatsappMessagesRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row.");

    /**
     * The column <code>message.message_whatsapp_messages.CREATED_AT</code>.
     * Time when this record was created.
     */
    public final TableField<MessageWhatsappMessagesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this record was created.");

    /**
     * The column <code>message.message_whatsapp_messages.UPDATED_BY</code>. ID
     * of the user who updated this row.
     */
    public final TableField<MessageWhatsappMessagesRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row.");

    /**
     * The column <code>message.message_whatsapp_messages.UPDATED_AT</code>.
     * Time when this record was last updated.
     */
    public final TableField<MessageWhatsappMessagesRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this record was last updated.");

    private MessageWhatsappMessages(Name alias, Table<MessageWhatsappMessagesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private MessageWhatsappMessages(Name alias, Table<MessageWhatsappMessagesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>message.message_whatsapp_messages</code> table
     * reference
     */
    public MessageWhatsappMessages(String alias) {
        this(DSL.name(alias), MESSAGE_WHATSAPP_MESSAGES);
    }

    /**
     * Create an aliased <code>message.message_whatsapp_messages</code> table
     * reference
     */
    public MessageWhatsappMessages(Name alias) {
        this(alias, MESSAGE_WHATSAPP_MESSAGES);
    }

    /**
     * Create a <code>message.message_whatsapp_messages</code> table reference
     */
    public MessageWhatsappMessages() {
        this(DSL.name("message_whatsapp_messages"), null);
    }

    public <O extends Record> MessageWhatsappMessages(Table<O> path, ForeignKey<O, MessageWhatsappMessagesRecord> childPath, InverseForeignKey<O, MessageWhatsappMessagesRecord> parentPath) {
        super(path, childPath, parentPath, MESSAGE_WHATSAPP_MESSAGES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class MessageWhatsappMessagesPath extends MessageWhatsappMessages implements Path<MessageWhatsappMessagesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> MessageWhatsappMessagesPath(Table<O> path, ForeignKey<O, MessageWhatsappMessagesRecord> childPath, InverseForeignKey<O, MessageWhatsappMessagesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private MessageWhatsappMessagesPath(Name alias, Table<MessageWhatsappMessagesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public MessageWhatsappMessagesPath as(String alias) {
            return new MessageWhatsappMessagesPath(DSL.name(alias), this);
        }

        @Override
        public MessageWhatsappMessagesPath as(Name alias) {
            return new MessageWhatsappMessagesPath(alias, this);
        }

        @Override
        public MessageWhatsappMessagesPath as(Table<?> alias) {
            return new MessageWhatsappMessagesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Message.MESSAGE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.MESSAGE_WHATSAPP_MESSAGES_IDX1_WHATSAPP_MESSAGES_MESSAGE_ID, Indexes.MESSAGE_WHATSAPP_MESSAGES_IDX2_WHATSAPP_MESSAGES_FROM, Indexes.MESSAGE_WHATSAPP_MESSAGES_IDX3_WHATSAPP_MESSAGES_TO, Indexes.MESSAGE_WHATSAPP_MESSAGES_IDX4_WHATSAPP_MESSAGES_MESSAGE_STATUS);
    }

    @Override
    public Identity<MessageWhatsappMessagesRecord, ULong> getIdentity() {
        return (Identity<MessageWhatsappMessagesRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<MessageWhatsappMessagesRecord> getPrimaryKey() {
        return Keys.KEY_MESSAGE_WHATSAPP_MESSAGES_PRIMARY;
    }

    @Override
    public List<UniqueKey<MessageWhatsappMessagesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_MESSAGE_WHATSAPP_MESSAGES_UK1_WHATSAPP_MESSAGES_CODE);
    }

    private transient MessageMessagesPath _messageMessages;

    /**
     * Get the implicit to-many join path to the
     * <code>message.message_messages</code> table
     */
    public MessageMessagesPath messageMessages() {
        if (_messageMessages == null)
            _messageMessages = new MessageMessagesPath(this, null, Keys.FK1_MESSAGES_WHATSAPP_MESSAGES_ID.getInverseKey());

        return _messageMessages;
    }

    @Override
    public MessageWhatsappMessages as(String alias) {
        return new MessageWhatsappMessages(DSL.name(alias), this);
    }

    @Override
    public MessageWhatsappMessages as(Name alias) {
        return new MessageWhatsappMessages(alias, this);
    }

    @Override
    public MessageWhatsappMessages as(Table<?> alias) {
        return new MessageWhatsappMessages(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageWhatsappMessages rename(String name) {
        return new MessageWhatsappMessages(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageWhatsappMessages rename(Name name) {
        return new MessageWhatsappMessages(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageWhatsappMessages rename(Table<?> name) {
        return new MessageWhatsappMessages(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageWhatsappMessages where(Condition condition) {
        return new MessageWhatsappMessages(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageWhatsappMessages where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageWhatsappMessages where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageWhatsappMessages where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MessageWhatsappMessages where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MessageWhatsappMessages where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MessageWhatsappMessages where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MessageWhatsappMessages where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageWhatsappMessages whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageWhatsappMessages whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
