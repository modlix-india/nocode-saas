/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.message.jooq.tables;


import com.fincity.saas.commons.jooq.convertor.jooq.converters.JSONtoClassConverter;
import com.fincity.saas.message.enums.message.MessageStatus;
import com.fincity.saas.message.jooq.Indexes;
import com.fincity.saas.message.jooq.Keys;
import com.fincity.saas.message.jooq.Message;
import com.fincity.saas.message.jooq.tables.MessageWhatsappMessages.MessageWhatsappMessagesPath;
import com.fincity.saas.message.jooq.tables.records.MessageMessagesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.Map;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.EnumConverter;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class MessageMessages extends TableImpl<MessageMessagesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>message.message_messages</code>
     */
    public static final MessageMessages MESSAGE_MESSAGES = new MessageMessages();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessageMessagesRecord> getRecordType() {
        return MessageMessagesRecord.class;
    }

    /**
     * The column <code>message.message_messages.ID</code>. Primary key.
     */
    public final TableField<MessageMessagesRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key.");

    /**
     * The column <code>message.message_messages.APP_CODE</code>. App Code
     * related to this message.
     */
    public final TableField<MessageMessagesRecord, String> APP_CODE = createField(DSL.name("APP_CODE"), SQLDataType.CHAR(64).nullable(false), this, "App Code related to this message.");

    /**
     * The column <code>message.message_messages.CLIENT_CODE</code>. Client Code
     * related to this message.
     */
    public final TableField<MessageMessagesRecord, String> CLIENT_CODE = createField(DSL.name("CLIENT_CODE"), SQLDataType.CHAR(8).nullable(false), this, "Client Code related to this message.");

    /**
     * The column <code>message.message_messages.USER_ID</code>. ID of the user
     * associated with this message.
     */
    public final TableField<MessageMessagesRecord, ULong> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user associated with this message.");

    /**
     * The column <code>message.message_messages.CODE</code>. Unique Code to
     * identify this row.
     */
    public final TableField<MessageMessagesRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.CHAR(22).nullable(false), this, "Unique Code to identify this row.");

    /**
     * The column <code>message.message_messages.FROM_DIAL_CODE</code>. Dial
     * code of the sender's phone number.
     */
    public final TableField<MessageMessagesRecord, Short> FROM_DIAL_CODE = createField(DSL.name("FROM_DIAL_CODE"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.inline("91", SQLDataType.SMALLINT)), this, "Dial code of the sender's phone number.");

    /**
     * The column <code>message.message_messages.FROM_PHONE</code>. Phone number
     * of the sender.
     */
    public final TableField<MessageMessagesRecord, String> FROM_PHONE = createField(DSL.name("FROM_PHONE"), SQLDataType.CHAR(15), this, "Phone number of the sender.");

    /**
     * The column <code>message.message_messages.TO_DIAL_CODE</code>. Dial code
     * of the recipient's phone number.
     */
    public final TableField<MessageMessagesRecord, Short> TO_DIAL_CODE = createField(DSL.name("TO_DIAL_CODE"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.inline("91", SQLDataType.SMALLINT)), this, "Dial code of the recipient's phone number.");

    /**
     * The column <code>message.message_messages.TO_PHONE</code>. Phone number
     * of the recipient.
     */
    public final TableField<MessageMessagesRecord, String> TO_PHONE = createField(DSL.name("TO_PHONE"), SQLDataType.CHAR(15), this, "Phone number of the recipient.");

    /**
     * The column <code>message.message_messages.CONNECTION_NAME</code>. Name of
     * the connection used for the message.
     */
    public final TableField<MessageMessagesRecord, String> CONNECTION_NAME = createField(DSL.name("CONNECTION_NAME"), SQLDataType.VARCHAR(255), this, "Name of the connection used for the message.");

    /**
     * The column <code>message.message_messages.MESSAGE_PROVIDER</code>. Name
     * of the message provider (e.g., WhatsApp or similar).
     */
    public final TableField<MessageMessagesRecord, String> MESSAGE_PROVIDER = createField(DSL.name("MESSAGE_PROVIDER"), SQLDataType.CHAR(50), this, "Name of the message provider (e.g., WhatsApp or similar).");

    /**
     * The column <code>message.message_messages.IS_OUTBOUND</code>. Indicates
     * whether the message is outbound.
     */
    public final TableField<MessageMessagesRecord, Byte> IS_OUTBOUND = createField(DSL.name("IS_OUTBOUND"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "Indicates whether the message is outbound.");

    /**
     * The column <code>message.message_messages.MESSAGE_STATUS</code>. Status
     * of the message.
     */
    public final TableField<MessageMessagesRecord, MessageStatus> MESSAGE_STATUS = createField(DSL.name("MESSAGE_STATUS"), SQLDataType.VARCHAR(9).nullable(false).defaultValue(DSL.inline("SENT", SQLDataType.VARCHAR)), this, "Status of the message.", new EnumConverter<String, MessageStatus>(String.class, MessageStatus.class));

    /**
     * The column <code>message.message_messages.SENT_TIME</code>. Timestamp
     * when the message was sent.
     */
    public final TableField<MessageMessagesRecord, LocalDateTime> SENT_TIME = createField(DSL.name("SENT_TIME"), SQLDataType.LOCALDATETIME(0), this, "Timestamp when the message was sent.");

    /**
     * The column <code>message.message_messages.DELIVERED_TIME</code>.
     * Timestamp when the message was delivered.
     */
    public final TableField<MessageMessagesRecord, LocalDateTime> DELIVERED_TIME = createField(DSL.name("DELIVERED_TIME"), SQLDataType.LOCALDATETIME(0), this, "Timestamp when the message was delivered.");

    /**
     * The column <code>message.message_messages.READ_TIME</code>. Timestamp
     * when the message was read.
     */
    public final TableField<MessageMessagesRecord, LocalDateTime> READ_TIME = createField(DSL.name("READ_TIME"), SQLDataType.LOCALDATETIME(0), this, "Timestamp when the message was read.");

    /**
     * The column <code>message.message_messages.WHATSAPP_MESSAGE_ID</code>. ID
     * of the associated WhatsApp message.
     */
    public final TableField<MessageMessagesRecord, ULong> WHATSAPP_MESSAGE_ID = createField(DSL.name("WHATSAPP_MESSAGE_ID"), SQLDataType.BIGINTUNSIGNED, this, "ID of the associated WhatsApp message.");

    /**
     * The column <code>message.message_messages.METADATA</code>. Additional
     * metadata related to the message.
     */
    public final TableField<MessageMessagesRecord, Map> METADATA = createField(DSL.name("METADATA"), SQLDataType.JSON, this, "Additional metadata related to the message.", new JSONtoClassConverter<JSON, Map>(JSON.class, Map.class));

    /**
     * The column <code>message.message_messages.IS_ACTIVE</code>. Flag to check
     * if this message is active or not.
     */
    public final TableField<MessageMessagesRecord, Byte> IS_ACTIVE = createField(DSL.name("IS_ACTIVE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "Flag to check if this message is active or not.");

    /**
     * The column <code>message.message_messages.CREATED_BY</code>. ID of the
     * user who created this row.
     */
    public final TableField<MessageMessagesRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row.");

    /**
     * The column <code>message.message_messages.CREATED_AT</code>. Time when
     * this record was created.
     */
    public final TableField<MessageMessagesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this record was created.");

    /**
     * The column <code>message.message_messages.UPDATED_BY</code>. ID of the
     * user who updated this row.
     */
    public final TableField<MessageMessagesRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row.");

    /**
     * The column <code>message.message_messages.UPDATED_AT</code>. Time when
     * this record was last updated.
     */
    public final TableField<MessageMessagesRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this record was last updated.");

    private MessageMessages(Name alias, Table<MessageMessagesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private MessageMessages(Name alias, Table<MessageMessagesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>message.message_messages</code> table reference
     */
    public MessageMessages(String alias) {
        this(DSL.name(alias), MESSAGE_MESSAGES);
    }

    /**
     * Create an aliased <code>message.message_messages</code> table reference
     */
    public MessageMessages(Name alias) {
        this(alias, MESSAGE_MESSAGES);
    }

    /**
     * Create a <code>message.message_messages</code> table reference
     */
    public MessageMessages() {
        this(DSL.name("message_messages"), null);
    }

    public <O extends Record> MessageMessages(Table<O> path, ForeignKey<O, MessageMessagesRecord> childPath, InverseForeignKey<O, MessageMessagesRecord> parentPath) {
        super(path, childPath, parentPath, MESSAGE_MESSAGES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class MessageMessagesPath extends MessageMessages implements Path<MessageMessagesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> MessageMessagesPath(Table<O> path, ForeignKey<O, MessageMessagesRecord> childPath, InverseForeignKey<O, MessageMessagesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private MessageMessagesPath(Name alias, Table<MessageMessagesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public MessageMessagesPath as(String alias) {
            return new MessageMessagesPath(DSL.name(alias), this);
        }

        @Override
        public MessageMessagesPath as(Name alias) {
            return new MessageMessagesPath(alias, this);
        }

        @Override
        public MessageMessagesPath as(Table<?> alias) {
            return new MessageMessagesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Message.MESSAGE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.MESSAGE_MESSAGES_IDX_MESSAGES_FROM_PHONE, Indexes.MESSAGE_MESSAGES_IDX_MESSAGES_TO_PHONE, Indexes.MESSAGE_MESSAGES_IDX_WHATSAPP_MESSAGES_MESSAGE_STATUS);
    }

    @Override
    public Identity<MessageMessagesRecord, ULong> getIdentity() {
        return (Identity<MessageMessagesRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<MessageMessagesRecord> getPrimaryKey() {
        return Keys.KEY_MESSAGE_MESSAGES_PRIMARY;
    }

    @Override
    public List<UniqueKey<MessageMessagesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_MESSAGE_MESSAGES_UK1_MESSAGES_CODE);
    }

    @Override
    public List<ForeignKey<MessageMessagesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_MESSAGES_WHATSAPP_MESSAGES_ID);
    }

    private transient MessageWhatsappMessagesPath _messageWhatsappMessages;

    /**
     * Get the implicit join path to the
     * <code>message.message_whatsapp_messages</code> table.
     */
    public MessageWhatsappMessagesPath messageWhatsappMessages() {
        if (_messageWhatsappMessages == null)
            _messageWhatsappMessages = new MessageWhatsappMessagesPath(this, Keys.FK1_MESSAGES_WHATSAPP_MESSAGES_ID, null);

        return _messageWhatsappMessages;
    }

    @Override
    public MessageMessages as(String alias) {
        return new MessageMessages(DSL.name(alias), this);
    }

    @Override
    public MessageMessages as(Name alias) {
        return new MessageMessages(alias, this);
    }

    @Override
    public MessageMessages as(Table<?> alias) {
        return new MessageMessages(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageMessages rename(String name) {
        return new MessageMessages(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageMessages rename(Name name) {
        return new MessageMessages(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageMessages rename(Table<?> name) {
        return new MessageMessages(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageMessages where(Condition condition) {
        return new MessageMessages(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageMessages where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageMessages where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageMessages where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MessageMessages where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MessageMessages where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MessageMessages where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MessageMessages where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageMessages whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageMessages whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
