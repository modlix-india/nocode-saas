/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.message.jooq.tables;


import com.fincity.saas.commons.jooq.convertor.jooq.converters.JSONtoClassConverter;
import com.fincity.saas.message.enums.message.provider.whatsapp.business.phone.type.CodeVerificationStatus;
import com.fincity.saas.message.enums.message.provider.whatsapp.business.phone.type.MessagingLimitTier;
import com.fincity.saas.message.enums.message.provider.whatsapp.business.phone.type.NameStatusType;
import com.fincity.saas.message.enums.message.provider.whatsapp.business.phone.type.PlatformType;
import com.fincity.saas.message.enums.message.provider.whatsapp.business.phone.type.QualityRatingType;
import com.fincity.saas.message.enums.message.provider.whatsapp.business.phone.type.Status;
import com.fincity.saas.message.jooq.Indexes;
import com.fincity.saas.message.jooq.Keys;
import com.fincity.saas.message.jooq.Message;
import com.fincity.saas.message.jooq.tables.MessageWhatsappBusinessAccounts.MessageWhatsappBusinessAccountsPath;
import com.fincity.saas.message.jooq.tables.records.MessageWhatsappPhoneNumbersRecord;
import com.fincity.saas.message.model.message.whatsapp.business.WebhookConfig;
import com.fincity.saas.message.model.message.whatsapp.phone.QualityScore;
import com.fincity.saas.message.model.message.whatsapp.phone.Throughput;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.EnumConverter;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * WhatsApp Business phone numbers
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class MessageWhatsappPhoneNumbers extends TableImpl<MessageWhatsappPhoneNumbersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>message.message_whatsapp_phone_numbers</code>
     */
    public static final MessageWhatsappPhoneNumbers MESSAGE_WHATSAPP_PHONE_NUMBERS = new MessageWhatsappPhoneNumbers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessageWhatsappPhoneNumbersRecord> getRecordType() {
        return MessageWhatsappPhoneNumbersRecord.class;
    }

    /**
     * The column <code>message.message_whatsapp_phone_numbers.ID</code>.
     * Primary key.
     */
    public final TableField<MessageWhatsappPhoneNumbersRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key.");

    /**
     * The column <code>message.message_whatsapp_phone_numbers.APP_CODE</code>.
     * App Code related to this WhatsApp phone number.
     */
    public final TableField<MessageWhatsappPhoneNumbersRecord, String> APP_CODE = createField(DSL.name("APP_CODE"), SQLDataType.CHAR(64).nullable(false), this, "App Code related to this WhatsApp phone number.");

    /**
     * The column
     * <code>message.message_whatsapp_phone_numbers.CLIENT_CODE</code>. Client
     * Code related to this WhatsApp phone number.
     */
    public final TableField<MessageWhatsappPhoneNumbersRecord, String> CLIENT_CODE = createField(DSL.name("CLIENT_CODE"), SQLDataType.CHAR(8).nullable(false), this, "Client Code related to this WhatsApp phone number.");

    /**
     * The column <code>message.message_whatsapp_phone_numbers.USER_ID</code>.
     * ID of the user associated with this WhatsApp phone number.
     */
    public final TableField<MessageWhatsappPhoneNumbersRecord, ULong> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user associated with this WhatsApp phone number.");

    /**
     * The column
     * <code>message.message_whatsapp_phone_numbers.PRODUCT_ID</code>. Entity
     * Processor Product Id
     */
    public final TableField<MessageWhatsappPhoneNumbersRecord, ULong> PRODUCT_ID = createField(DSL.name("PRODUCT_ID"), SQLDataType.BIGINTUNSIGNED, this, "Entity Processor Product Id");

    /**
     * The column <code>message.message_whatsapp_phone_numbers.CODE</code>.
     * Unique Code to identify this row.
     */
    public final TableField<MessageWhatsappPhoneNumbersRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.CHAR(22).nullable(false), this, "Unique Code to identify this row.");

    /**
     * The column
     * <code>message.message_whatsapp_phone_numbers.WHATSAPP_BUSINESS_ACCOUNT_ID</code>.
     * WhatsApp Business Account ID.
     */
    public final TableField<MessageWhatsappPhoneNumbersRecord, ULong> WHATSAPP_BUSINESS_ACCOUNT_ID = createField(DSL.name("WHATSAPP_BUSINESS_ACCOUNT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "WhatsApp Business Account ID.");

    /**
     * The column
     * <code>message.message_whatsapp_phone_numbers.DISPLAY_PHONE_NUMBER</code>.
     * Display phone number for WhatsApp Business.
     */
    public final TableField<MessageWhatsappPhoneNumbersRecord, String> DISPLAY_PHONE_NUMBER = createField(DSL.name("DISPLAY_PHONE_NUMBER"), SQLDataType.CHAR(20), this, "Display phone number for WhatsApp Business.");

    /**
     * The column
     * <code>message.message_whatsapp_phone_numbers.QUALITY_RATING</code>.
     * Quality rating of the phone number.
     */
    public final TableField<MessageWhatsappPhoneNumbersRecord, QualityRatingType> QUALITY_RATING = createField(DSL.name("QUALITY_RATING"), SQLDataType.VARCHAR(7), this, "Quality rating of the phone number.", new EnumConverter<String, QualityRatingType>(String.class, QualityRatingType.class));

    /**
     * The column
     * <code>message.message_whatsapp_phone_numbers.QUALITY_SCORE</code>.
     * Quality Score of Whatsapp Phone Number
     */
    public final TableField<MessageWhatsappPhoneNumbersRecord, QualityScore> QUALITY_SCORE = createField(DSL.name("QUALITY_SCORE"), SQLDataType.JSON, this, "Quality Score of Whatsapp Phone Number", new JSONtoClassConverter<JSON, QualityScore>(JSON.class, QualityScore.class));

    /**
     * The column
     * <code>message.message_whatsapp_phone_numbers.VERIFIED_NAME</code>.
     * Verified name associated with the phone number.
     */
    public final TableField<MessageWhatsappPhoneNumbersRecord, String> VERIFIED_NAME = createField(DSL.name("VERIFIED_NAME"), SQLDataType.VARCHAR(255), this, "Verified name associated with the phone number.");

    /**
     * The column
     * <code>message.message_whatsapp_phone_numbers.PHONE_NUMBER_ID</code>.
     * WhatsApp phone number ID from Meta.
     */
    public final TableField<MessageWhatsappPhoneNumbersRecord, String> PHONE_NUMBER_ID = createField(DSL.name("PHONE_NUMBER_ID"), SQLDataType.VARCHAR(255), this, "WhatsApp phone number ID from Meta.");

    /**
     * The column
     * <code>message.message_whatsapp_phone_numbers.CODE_VERIFICATION_STATUS</code>.
     * Status of code verification.
     */
    public final TableField<MessageWhatsappPhoneNumbersRecord, CodeVerificationStatus> CODE_VERIFICATION_STATUS = createField(DSL.name("CODE_VERIFICATION_STATUS"), SQLDataType.VARCHAR(12), this, "Status of code verification.", new EnumConverter<String, CodeVerificationStatus>(String.class, CodeVerificationStatus.class));

    /**
     * The column
     * <code>message.message_whatsapp_phone_numbers.NAME_STATUS</code>. Status
     * of the verified name.
     */
    public final TableField<MessageWhatsappPhoneNumbersRecord, NameStatusType> NAME_STATUS = createField(DSL.name("NAME_STATUS"), SQLDataType.VARCHAR(24).nullable(false).defaultValue(DSL.inline("NONE", SQLDataType.VARCHAR)), this, "Status of the verified name.", new EnumConverter<String, NameStatusType>(String.class, NameStatusType.class));

    /**
     * The column
     * <code>message.message_whatsapp_phone_numbers.PLATFORM_TYPE</code>.
     * Platform type for WhatsApp Business.
     */
    public final TableField<MessageWhatsappPhoneNumbersRecord, PlatformType> PLATFORM_TYPE = createField(DSL.name("PLATFORM_TYPE"), SQLDataType.VARCHAR(14), this, "Platform type for WhatsApp Business.", new EnumConverter<String, PlatformType>(String.class, PlatformType.class));

    /**
     * The column
     * <code>message.message_whatsapp_phone_numbers.THROUGHPUT</code>.
     * Throughput of Whatsapp Phone Number
     */
    public final TableField<MessageWhatsappPhoneNumbersRecord, Throughput> THROUGHPUT = createField(DSL.name("THROUGHPUT"), SQLDataType.JSON, this, "Throughput of Whatsapp Phone Number", new JSONtoClassConverter<JSON, Throughput>(JSON.class, Throughput.class));

    /**
     * The column <code>message.message_whatsapp_phone_numbers.STATUS</code>.
     * Status of the Whatsapp Phone Number
     */
    public final TableField<MessageWhatsappPhoneNumbersRecord, Status> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(12).nullable(false).defaultValue(DSL.inline("UNKNOWN", SQLDataType.VARCHAR)), this, "Status of the Whatsapp Phone Number", new EnumConverter<String, Status>(String.class, Status.class));

    /**
     * The column
     * <code>message.message_whatsapp_phone_numbers.MESSAGING_LIMIT_TIER</code>.
     * Messaging Limit Tier
     */
    public final TableField<MessageWhatsappPhoneNumbersRecord, MessagingLimitTier> MESSAGING_LIMIT_TIER = createField(DSL.name("MESSAGING_LIMIT_TIER"), SQLDataType.VARCHAR(14), this, "Messaging Limit Tier", new EnumConverter<String, MessagingLimitTier>(String.class, MessagingLimitTier.class));

    /**
     * The column
     * <code>message.message_whatsapp_phone_numbers.WEBHOOK_CONFIG</code>. Phone
     * Number webhook config
     */
    public final TableField<MessageWhatsappPhoneNumbersRecord, WebhookConfig> WEBHOOK_CONFIG = createField(DSL.name("WEBHOOK_CONFIG"), SQLDataType.JSON, this, "Phone Number webhook config", new JSONtoClassConverter<JSON, WebhookConfig>(JSON.class, WebhookConfig.class));

    /**
     * The column
     * <code>message.message_whatsapp_phone_numbers.IS_DEFAULT</code>. Flag to
     * indicate if this is the default phone number.
     */
    public final TableField<MessageWhatsappPhoneNumbersRecord, Boolean> IS_DEFAULT = createField(DSL.name("IS_DEFAULT"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "Flag to indicate if this is the default phone number.");

    /**
     * The column <code>message.message_whatsapp_phone_numbers.IS_ACTIVE</code>.
     * Flag to check if this phone number is active or not.
     */
    public final TableField<MessageWhatsappPhoneNumbersRecord, Boolean> IS_ACTIVE = createField(DSL.name("IS_ACTIVE"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("1", SQLDataType.BOOLEAN)), this, "Flag to check if this phone number is active or not.");

    /**
     * The column
     * <code>message.message_whatsapp_phone_numbers.CREATED_BY</code>. ID of the
     * user who created this row.
     */
    public final TableField<MessageWhatsappPhoneNumbersRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row.");

    /**
     * The column
     * <code>message.message_whatsapp_phone_numbers.CREATED_AT</code>. Time when
     * this record was created.
     */
    public final TableField<MessageWhatsappPhoneNumbersRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this record was created.");

    /**
     * The column
     * <code>message.message_whatsapp_phone_numbers.UPDATED_BY</code>. ID of the
     * user who updated this row.
     */
    public final TableField<MessageWhatsappPhoneNumbersRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row.");

    /**
     * The column
     * <code>message.message_whatsapp_phone_numbers.UPDATED_AT</code>. Time when
     * this record was last updated.
     */
    public final TableField<MessageWhatsappPhoneNumbersRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this record was last updated.");

    private MessageWhatsappPhoneNumbers(Name alias, Table<MessageWhatsappPhoneNumbersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private MessageWhatsappPhoneNumbers(Name alias, Table<MessageWhatsappPhoneNumbersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("WhatsApp Business phone numbers"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>message.message_whatsapp_phone_numbers</code>
     * table reference
     */
    public MessageWhatsappPhoneNumbers(String alias) {
        this(DSL.name(alias), MESSAGE_WHATSAPP_PHONE_NUMBERS);
    }

    /**
     * Create an aliased <code>message.message_whatsapp_phone_numbers</code>
     * table reference
     */
    public MessageWhatsappPhoneNumbers(Name alias) {
        this(alias, MESSAGE_WHATSAPP_PHONE_NUMBERS);
    }

    /**
     * Create a <code>message.message_whatsapp_phone_numbers</code> table
     * reference
     */
    public MessageWhatsappPhoneNumbers() {
        this(DSL.name("message_whatsapp_phone_numbers"), null);
    }

    public <O extends Record> MessageWhatsappPhoneNumbers(Table<O> path, ForeignKey<O, MessageWhatsappPhoneNumbersRecord> childPath, InverseForeignKey<O, MessageWhatsappPhoneNumbersRecord> parentPath) {
        super(path, childPath, parentPath, MESSAGE_WHATSAPP_PHONE_NUMBERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class MessageWhatsappPhoneNumbersPath extends MessageWhatsappPhoneNumbers implements Path<MessageWhatsappPhoneNumbersRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> MessageWhatsappPhoneNumbersPath(Table<O> path, ForeignKey<O, MessageWhatsappPhoneNumbersRecord> childPath, InverseForeignKey<O, MessageWhatsappPhoneNumbersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private MessageWhatsappPhoneNumbersPath(Name alias, Table<MessageWhatsappPhoneNumbersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public MessageWhatsappPhoneNumbersPath as(String alias) {
            return new MessageWhatsappPhoneNumbersPath(DSL.name(alias), this);
        }

        @Override
        public MessageWhatsappPhoneNumbersPath as(Name alias) {
            return new MessageWhatsappPhoneNumbersPath(alias, this);
        }

        @Override
        public MessageWhatsappPhoneNumbersPath as(Table<?> alias) {
            return new MessageWhatsappPhoneNumbersPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Message.MESSAGE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.MESSAGE_WHATSAPP_PHONE_NUMBERS_IDX3_WHATSAPP_PHONE_NUMBER_IS_DEFAULT);
    }

    @Override
    public Identity<MessageWhatsappPhoneNumbersRecord, ULong> getIdentity() {
        return (Identity<MessageWhatsappPhoneNumbersRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<MessageWhatsappPhoneNumbersRecord> getPrimaryKey() {
        return Keys.KEY_MESSAGE_WHATSAPP_PHONE_NUMBERS_PRIMARY;
    }

    @Override
    public List<UniqueKey<MessageWhatsappPhoneNumbersRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_MESSAGE_WHATSAPP_PHONE_NUMBERS_UK1_WHATSAPP_PHONE_NUMBER_CODE, Keys.KEY_MESSAGE_WHATSAPP_PHONE_NUMBERS_UK2_WHATSAPP_PHONE_NUMBER_PHONE_NUMBER_ID);
    }

    @Override
    public List<ForeignKey<MessageWhatsappPhoneNumbersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_WHATSAPP_PHONE_NUMBERS_WHATSAPP_BUSINESS_ACCOUNT_ID);
    }

    private transient MessageWhatsappBusinessAccountsPath _messageWhatsappBusinessAccounts;

    /**
     * Get the implicit join path to the
     * <code>message.message_whatsapp_business_accounts</code> table.
     */
    public MessageWhatsappBusinessAccountsPath messageWhatsappBusinessAccounts() {
        if (_messageWhatsappBusinessAccounts == null)
            _messageWhatsappBusinessAccounts = new MessageWhatsappBusinessAccountsPath(this, Keys.FK1_WHATSAPP_PHONE_NUMBERS_WHATSAPP_BUSINESS_ACCOUNT_ID, null);

        return _messageWhatsappBusinessAccounts;
    }

    @Override
    public MessageWhatsappPhoneNumbers as(String alias) {
        return new MessageWhatsappPhoneNumbers(DSL.name(alias), this);
    }

    @Override
    public MessageWhatsappPhoneNumbers as(Name alias) {
        return new MessageWhatsappPhoneNumbers(alias, this);
    }

    @Override
    public MessageWhatsappPhoneNumbers as(Table<?> alias) {
        return new MessageWhatsappPhoneNumbers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageWhatsappPhoneNumbers rename(String name) {
        return new MessageWhatsappPhoneNumbers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageWhatsappPhoneNumbers rename(Name name) {
        return new MessageWhatsappPhoneNumbers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageWhatsappPhoneNumbers rename(Table<?> name) {
        return new MessageWhatsappPhoneNumbers(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageWhatsappPhoneNumbers where(Condition condition) {
        return new MessageWhatsappPhoneNumbers(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageWhatsappPhoneNumbers where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageWhatsappPhoneNumbers where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageWhatsappPhoneNumbers where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MessageWhatsappPhoneNumbers where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MessageWhatsappPhoneNumbers where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MessageWhatsappPhoneNumbers where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MessageWhatsappPhoneNumbers where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageWhatsappPhoneNumbers whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageWhatsappPhoneNumbers whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
