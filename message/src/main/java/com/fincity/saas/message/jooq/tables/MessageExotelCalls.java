/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.message.jooq.tables;


import com.fincity.saas.message.enums.call.provider.exotel.ExotelCallStatus;
import com.fincity.saas.message.jooq.Keys;
import com.fincity.saas.message.jooq.Message;
import com.fincity.saas.message.jooq.tables.MessageCalls.MessageCallsPath;
import com.fincity.saas.message.jooq.tables.records.MessageExotelCallsRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.EnumConverter;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class MessageExotelCalls extends TableImpl<MessageExotelCallsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>message.message_exotel_calls</code>
     */
    public static final MessageExotelCalls MESSAGE_EXOTEL_CALLS = new MessageExotelCalls();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessageExotelCallsRecord> getRecordType() {
        return MessageExotelCallsRecord.class;
    }

    /**
     * The column <code>message.message_exotel_calls.ID</code>. Primary key.
     */
    public final TableField<MessageExotelCallsRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key.");

    /**
     * The column <code>message.message_exotel_calls.APP_CODE</code>. App Code
     * related to this Exotel Call.
     */
    public final TableField<MessageExotelCallsRecord, String> APP_CODE = createField(DSL.name("APP_CODE"), SQLDataType.CHAR(64).nullable(false), this, "App Code related to this Exotel Call.");

    /**
     * The column <code>message.message_exotel_calls.CLIENT_CODE</code>. Client
     * Code related to this Exotel Call.
     */
    public final TableField<MessageExotelCallsRecord, String> CLIENT_CODE = createField(DSL.name("CLIENT_CODE"), SQLDataType.CHAR(8).nullable(false), this, "Client Code related to this Exotel Call.");

    /**
     * The column <code>message.message_exotel_calls.USER_ID</code>. ID of the
     * user associated with this Exotel Call.
     */
    public final TableField<MessageExotelCallsRecord, ULong> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user associated with this Exotel Call.");

    /**
     * The column <code>message.message_exotel_calls.CODE</code>. Unique Code to
     * identify this row.
     */
    public final TableField<MessageExotelCallsRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.CHAR(22).nullable(false), this, "Unique Code to identify this row.");

    /**
     * The column <code>message.message_exotel_calls.SID</code>. Unique
     * identifier for the call.
     */
    public final TableField<MessageExotelCallsRecord, String> SID = createField(DSL.name("SID"), SQLDataType.CHAR(32).nullable(false), this, "Unique identifier for the call.");

    /**
     * The column <code>message.message_exotel_calls.PARENT_CALL_SID</code>.
     * Identifier for the parent call, if it exists.
     */
    public final TableField<MessageExotelCallsRecord, String> PARENT_CALL_SID = createField(DSL.name("PARENT_CALL_SID"), SQLDataType.CHAR(32), this, "Identifier for the parent call, if it exists.");

    /**
     * The column <code>message.message_exotel_calls.ACCOUNT_SID</code>. Exotel
     * account SID for this call.
     */
    public final TableField<MessageExotelCallsRecord, String> ACCOUNT_SID = createField(DSL.name("ACCOUNT_SID"), SQLDataType.CHAR(50).nullable(false), this, "Exotel account SID for this call.");

    /**
     * The column <code>message.message_exotel_calls.FROM_DIAL_CODE</code>. Dial
     * code of the caller's phone number.
     */
    public final TableField<MessageExotelCallsRecord, Short> FROM_DIAL_CODE = createField(DSL.name("FROM_DIAL_CODE"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.inline("91", SQLDataType.SMALLINT)), this, "Dial code of the caller's phone number.");

    /**
     * The column <code>message.message_exotel_calls.FROM_PHONE</code>. Phone
     * number of the caller.
     */
    public final TableField<MessageExotelCallsRecord, String> FROM_PHONE = createField(DSL.name("FROM_PHONE"), SQLDataType.CHAR(15).nullable(false), this, "Phone number of the caller.");

    /**
     * The column <code>message.message_exotel_calls.TO_DIAL_CODE</code>. Dial
     * code of the receiver's phone number.
     */
    public final TableField<MessageExotelCallsRecord, Short> TO_DIAL_CODE = createField(DSL.name("TO_DIAL_CODE"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.inline("91", SQLDataType.SMALLINT)), this, "Dial code of the receiver's phone number.");

    /**
     * The column <code>message.message_exotel_calls.TO_PHONE</code>. Phone
     * number of the receiver.
     */
    public final TableField<MessageExotelCallsRecord, String> TO_PHONE = createField(DSL.name("TO_PHONE"), SQLDataType.CHAR(15).nullable(false), this, "Phone number of the receiver.");

    /**
     * The column <code>message.message_exotel_calls.CALLER_ID</code>. Caller ID
     * configured in Exotel.
     */
    public final TableField<MessageExotelCallsRecord, String> CALLER_ID = createField(DSL.name("CALLER_ID"), SQLDataType.CHAR(50), this, "Caller ID configured in Exotel.");

    /**
     * The column <code>message.message_exotel_calls.EXOTEL_CALL_STATUS</code>.
     * Status of the call.
     */
    public final TableField<MessageExotelCallsRecord, ExotelCallStatus> EXOTEL_CALL_STATUS = createField(DSL.name("EXOTEL_CALL_STATUS"), SQLDataType.VARCHAR(9).nullable(false).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "Status of the call.", new EnumConverter<String, ExotelCallStatus>(String.class, ExotelCallStatus.class));

    /**
     * The column <code>message.message_exotel_calls.START_TIME</code>.
     * Timestamp when the call was initiated.
     */
    public final TableField<MessageExotelCallsRecord, LocalDateTime> START_TIME = createField(DSL.name("START_TIME"), SQLDataType.LOCALDATETIME(0), this, "Timestamp when the call was initiated.");

    /**
     * The column <code>message.message_exotel_calls.END_TIME</code>. Timestamp
     * when the call ended.
     */
    public final TableField<MessageExotelCallsRecord, LocalDateTime> END_TIME = createField(DSL.name("END_TIME"), SQLDataType.LOCALDATETIME(0), this, "Timestamp when the call ended.");

    /**
     * The column <code>message.message_exotel_calls.DURATION</code>. Duration
     * of the call in seconds.
     */
    public final TableField<MessageExotelCallsRecord, Long> DURATION = createField(DSL.name("DURATION"), SQLDataType.BIGINT, this, "Duration of the call in seconds.");

    /**
     * The column <code>message.message_exotel_calls.PRICE</code>. Cost of the
     * call.
     */
    public final TableField<MessageExotelCallsRecord, BigDecimal> PRICE = createField(DSL.name("PRICE"), SQLDataType.DECIMAL(12, 2), this, "Cost of the call.");

    /**
     * The column <code>message.message_exotel_calls.DIRECTION</code>. Direction
     * of the call (e.g., inbound or outbound).
     */
    public final TableField<MessageExotelCallsRecord, String> DIRECTION = createField(DSL.name("DIRECTION"), SQLDataType.VARCHAR(50), this, "Direction of the call (e.g., inbound or outbound).");

    /**
     * The column <code>message.message_exotel_calls.ANSWERED_BY</code>. Person
     * or system that answered the call.
     */
    public final TableField<MessageExotelCallsRecord, String> ANSWERED_BY = createField(DSL.name("ANSWERED_BY"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("human", SQLDataType.VARCHAR)), this, "Person or system that answered the call.");

    /**
     * The column <code>message.message_exotel_calls.RECORDING_URL</code>. URL
     * of the call recording, if available.
     */
    public final TableField<MessageExotelCallsRecord, String> RECORDING_URL = createField(DSL.name("RECORDING_URL"), SQLDataType.VARCHAR(2083), this, "URL of the call recording, if available.");

    /**
     * The column
     * <code>message.message_exotel_calls.CONVERSATION_DURATION</code>.
     * Conversation duration of the call in seconds.
     */
    public final TableField<MessageExotelCallsRecord, Long> CONVERSATION_DURATION = createField(DSL.name("CONVERSATION_DURATION"), SQLDataType.BIGINT, this, "Conversation duration of the call in seconds.");

    /**
     * The column <code>message.message_exotel_calls.LEG1_STATUS</code>. Status
     * of the first leg of the call.
     */
    public final TableField<MessageExotelCallsRecord, ExotelCallStatus> LEG1_STATUS = createField(DSL.name("LEG1_STATUS"), SQLDataType.VARCHAR(9).nullable(false).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "Status of the first leg of the call.", new EnumConverter<String, ExotelCallStatus>(String.class, ExotelCallStatus.class));

    /**
     * The column <code>message.message_exotel_calls.LEG2_STATUS</code>. Status
     * of the second leg of the call.
     */
    public final TableField<MessageExotelCallsRecord, ExotelCallStatus> LEG2_STATUS = createField(DSL.name("LEG2_STATUS"), SQLDataType.VARCHAR(9).nullable(false).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "Status of the second leg of the call.", new EnumConverter<String, ExotelCallStatus>(String.class, ExotelCallStatus.class));

    /**
     * The column <code>message.message_exotel_calls.IS_ACTIVE</code>. Flag to
     * check if this call is active or not.
     */
    public final TableField<MessageExotelCallsRecord, Byte> IS_ACTIVE = createField(DSL.name("IS_ACTIVE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "Flag to check if this call is active or not.");

    /**
     * The column <code>message.message_exotel_calls.CREATED_BY</code>. ID of
     * the user who created this row.
     */
    public final TableField<MessageExotelCallsRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row.");

    /**
     * The column <code>message.message_exotel_calls.CREATED_AT</code>. Time
     * when this record was created.
     */
    public final TableField<MessageExotelCallsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this record was created.");

    /**
     * The column <code>message.message_exotel_calls.UPDATED_BY</code>. ID of
     * the user who updated this row.
     */
    public final TableField<MessageExotelCallsRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row.");

    /**
     * The column <code>message.message_exotel_calls.UPDATED_AT</code>. Time
     * when this record was last updated.
     */
    public final TableField<MessageExotelCallsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this record was last updated.");

    private MessageExotelCalls(Name alias, Table<MessageExotelCallsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private MessageExotelCalls(Name alias, Table<MessageExotelCallsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>message.message_exotel_calls</code> table
     * reference
     */
    public MessageExotelCalls(String alias) {
        this(DSL.name(alias), MESSAGE_EXOTEL_CALLS);
    }

    /**
     * Create an aliased <code>message.message_exotel_calls</code> table
     * reference
     */
    public MessageExotelCalls(Name alias) {
        this(alias, MESSAGE_EXOTEL_CALLS);
    }

    /**
     * Create a <code>message.message_exotel_calls</code> table reference
     */
    public MessageExotelCalls() {
        this(DSL.name("message_exotel_calls"), null);
    }

    public <O extends Record> MessageExotelCalls(Table<O> path, ForeignKey<O, MessageExotelCallsRecord> childPath, InverseForeignKey<O, MessageExotelCallsRecord> parentPath) {
        super(path, childPath, parentPath, MESSAGE_EXOTEL_CALLS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class MessageExotelCallsPath extends MessageExotelCalls implements Path<MessageExotelCallsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> MessageExotelCallsPath(Table<O> path, ForeignKey<O, MessageExotelCallsRecord> childPath, InverseForeignKey<O, MessageExotelCallsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private MessageExotelCallsPath(Name alias, Table<MessageExotelCallsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public MessageExotelCallsPath as(String alias) {
            return new MessageExotelCallsPath(DSL.name(alias), this);
        }

        @Override
        public MessageExotelCallsPath as(Name alias) {
            return new MessageExotelCallsPath(alias, this);
        }

        @Override
        public MessageExotelCallsPath as(Table<?> alias) {
            return new MessageExotelCallsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Message.MESSAGE;
    }

    @Override
    public Identity<MessageExotelCallsRecord, ULong> getIdentity() {
        return (Identity<MessageExotelCallsRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<MessageExotelCallsRecord> getPrimaryKey() {
        return Keys.KEY_MESSAGE_EXOTEL_CALLS_PRIMARY;
    }

    @Override
    public List<UniqueKey<MessageExotelCallsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_MESSAGE_EXOTEL_CALLS_UK1_EXOTEL_CALLS_CODE, Keys.KEY_MESSAGE_EXOTEL_CALLS_UK2_EXOTEL_CALLS_SID);
    }

    private transient MessageCallsPath _messageCalls;

    /**
     * Get the implicit to-many join path to the
     * <code>message.message_calls</code> table
     */
    public MessageCallsPath messageCalls() {
        if (_messageCalls == null)
            _messageCalls = new MessageCallsPath(this, null, Keys.FK1_CALLS_EXOTEL_CALLS_ID.getInverseKey());

        return _messageCalls;
    }

    @Override
    public MessageExotelCalls as(String alias) {
        return new MessageExotelCalls(DSL.name(alias), this);
    }

    @Override
    public MessageExotelCalls as(Name alias) {
        return new MessageExotelCalls(alias, this);
    }

    @Override
    public MessageExotelCalls as(Table<?> alias) {
        return new MessageExotelCalls(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageExotelCalls rename(String name) {
        return new MessageExotelCalls(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageExotelCalls rename(Name name) {
        return new MessageExotelCalls(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageExotelCalls rename(Table<?> name) {
        return new MessageExotelCalls(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageExotelCalls where(Condition condition) {
        return new MessageExotelCalls(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageExotelCalls where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageExotelCalls where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageExotelCalls where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MessageExotelCalls where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MessageExotelCalls where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MessageExotelCalls where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MessageExotelCalls where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageExotelCalls whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MessageExotelCalls whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
