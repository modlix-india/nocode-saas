/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables;


import com.fincity.security.jooq.Keys;
import com.fincity.security.jooq.Security;
import com.fincity.security.jooq.enums.SecurityAppRegDepartmentLevel;
import com.fincity.security.jooq.tables.SecurityAppRegDepartment.SecurityAppRegDepartmentPath;
import com.fincity.security.jooq.tables.SecurityAppRegDesignation.SecurityAppRegDesignationPath;
import com.fincity.security.jooq.tables.SecurityClient.SecurityClientPath;
import com.fincity.security.jooq.tables.records.SecurityAppRegDepartmentRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SecurityAppRegDepartment extends TableImpl<SecurityAppRegDepartmentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>security.security_app_reg_department</code>
     */
    public static final SecurityAppRegDepartment SECURITY_APP_REG_DEPARTMENT = new SecurityAppRegDepartment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityAppRegDepartmentRecord> getRecordType() {
        return SecurityAppRegDepartmentRecord.class;
    }

    /**
     * The column <code>security.security_app_reg_department.ID</code>. Primary
     * key
     */
    public final TableField<SecurityAppRegDepartmentRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>security.security_app_reg_department.CLIENT_ID</code>.
     * Client ID
     */
    public final TableField<SecurityAppRegDepartmentRecord, ULong> CLIENT_ID = createField(DSL.name("CLIENT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Client ID");

    /**
     * The column <code>security.security_app_reg_department.CLIENT_TYPE</code>.
     * Client type
     */
    public final TableField<SecurityAppRegDepartmentRecord, String> CLIENT_TYPE = createField(DSL.name("CLIENT_TYPE"), SQLDataType.CHAR(4).nullable(false).defaultValue(DSL.inline("BUS", SQLDataType.CHAR)), this, "Client type");

    /**
     * The column <code>security.security_app_reg_department.APP_ID</code>. App
     * ID
     */
    public final TableField<SecurityAppRegDepartmentRecord, ULong> APP_ID = createField(DSL.name("APP_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "App ID");

    /**
     * The column <code>security.security_app_reg_department.LEVEL</code>.
     * Access level
     */
    public final TableField<SecurityAppRegDepartmentRecord, SecurityAppRegDepartmentLevel> LEVEL = createField(DSL.name("LEVEL"), SQLDataType.VARCHAR(8).nullable(false).defaultValue(DSL.inline("CLIENT", SQLDataType.VARCHAR)).asEnumDataType(SecurityAppRegDepartmentLevel.class), this, "Access level");

    /**
     * The column
     * <code>security.security_app_reg_department.BUSINESS_TYPE</code>. Business
     * type
     */
    public final TableField<SecurityAppRegDepartmentRecord, String> BUSINESS_TYPE = createField(DSL.name("BUSINESS_TYPE"), SQLDataType.CHAR(10).nullable(false).defaultValue(DSL.inline("COMMON", SQLDataType.CHAR)), this, "Business type");

    /**
     * The column <code>security.security_app_reg_department.NAME</code>. Name
     * of the department
     */
    public final TableField<SecurityAppRegDepartmentRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(256).nullable(false), this, "Name of the department");

    /**
     * The column <code>security.security_app_reg_department.DESCRIPTION</code>.
     * Description of the department
     */
    public final TableField<SecurityAppRegDepartmentRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "Description of the department");

    /**
     * The column
     * <code>security.security_app_reg_department.PARENT_DEPARTMENT_ID</code>.
     * Parent department for hierarchical structure in this registration details
     */
    public final TableField<SecurityAppRegDepartmentRecord, ULong> PARENT_DEPARTMENT_ID = createField(DSL.name("PARENT_DEPARTMENT_ID"), SQLDataType.BIGINTUNSIGNED, this, "Parent department for hierarchical structure in this registration details");

    /**
     * The column <code>security.security_app_reg_department.CREATED_BY</code>.
     * ID of the user who created this row
     */
    public final TableField<SecurityAppRegDepartmentRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row");

    /**
     * The column <code>security.security_app_reg_department.CREATED_AT</code>.
     * Time when this row is created
     */
    public final TableField<SecurityAppRegDepartmentRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created");

    /**
     * The column <code>security.security_app_reg_department.UPDATED_BY</code>.
     * ID of the user who updated this row
     */
    public final TableField<SecurityAppRegDepartmentRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row");

    /**
     * The column <code>security.security_app_reg_department.UPDATED_AT</code>.
     * Time when this row is updated
     */
    public final TableField<SecurityAppRegDepartmentRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated");

    private SecurityAppRegDepartment(Name alias, Table<SecurityAppRegDepartmentRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SecurityAppRegDepartment(Name alias, Table<SecurityAppRegDepartmentRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>security.security_app_reg_department</code> table
     * reference
     */
    public SecurityAppRegDepartment(String alias) {
        this(DSL.name(alias), SECURITY_APP_REG_DEPARTMENT);
    }

    /**
     * Create an aliased <code>security.security_app_reg_department</code> table
     * reference
     */
    public SecurityAppRegDepartment(Name alias) {
        this(alias, SECURITY_APP_REG_DEPARTMENT);
    }

    /**
     * Create a <code>security.security_app_reg_department</code> table
     * reference
     */
    public SecurityAppRegDepartment() {
        this(DSL.name("security_app_reg_department"), null);
    }

    public <O extends Record> SecurityAppRegDepartment(Table<O> path, ForeignKey<O, SecurityAppRegDepartmentRecord> childPath, InverseForeignKey<O, SecurityAppRegDepartmentRecord> parentPath) {
        super(path, childPath, parentPath, SECURITY_APP_REG_DEPARTMENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SecurityAppRegDepartmentPath extends SecurityAppRegDepartment implements Path<SecurityAppRegDepartmentRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SecurityAppRegDepartmentPath(Table<O> path, ForeignKey<O, SecurityAppRegDepartmentRecord> childPath, InverseForeignKey<O, SecurityAppRegDepartmentRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SecurityAppRegDepartmentPath(Name alias, Table<SecurityAppRegDepartmentRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SecurityAppRegDepartmentPath as(String alias) {
            return new SecurityAppRegDepartmentPath(DSL.name(alias), this);
        }

        @Override
        public SecurityAppRegDepartmentPath as(Name alias) {
            return new SecurityAppRegDepartmentPath(alias, this);
        }

        @Override
        public SecurityAppRegDepartmentPath as(Table<?> alias) {
            return new SecurityAppRegDepartmentPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public Identity<SecurityAppRegDepartmentRecord, ULong> getIdentity() {
        return (Identity<SecurityAppRegDepartmentRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecurityAppRegDepartmentRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_APP_REG_DEPARTMENT_PRIMARY;
    }

    @Override
    public List<ForeignKey<SecurityAppRegDepartmentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_APP_REG_DEPARTMENT_CLIENT_ID, Keys.FK2_APP_REG_DEPARTMENT_PARENT_ID);
    }

    private transient SecurityClientPath _securityClient;

    /**
     * Get the implicit join path to the <code>security.security_client</code>
     * table.
     */
    public SecurityClientPath securityClient() {
        if (_securityClient == null)
            _securityClient = new SecurityClientPath(this, Keys.FK1_APP_REG_DEPARTMENT_CLIENT_ID, null);

        return _securityClient;
    }

    private transient SecurityAppRegDepartmentPath _securityAppRegDepartment;

    /**
     * Get the implicit join path to the
     * <code>security.security_app_reg_department</code> table.
     */
    public SecurityAppRegDepartmentPath securityAppRegDepartment() {
        if (_securityAppRegDepartment == null)
            _securityAppRegDepartment = new SecurityAppRegDepartmentPath(this, Keys.FK2_APP_REG_DEPARTMENT_PARENT_ID, null);

        return _securityAppRegDepartment;
    }

    private transient SecurityAppRegDesignationPath _securityAppRegDesignation;

    /**
     * Get the implicit to-many join path to the
     * <code>security.security_app_reg_designation</code> table
     */
    public SecurityAppRegDesignationPath securityAppRegDesignation() {
        if (_securityAppRegDesignation == null)
            _securityAppRegDesignation = new SecurityAppRegDesignationPath(this, null, Keys.FK2_APP_REG_DESIGNATION_DEPARTMENT_ID.getInverseKey());

        return _securityAppRegDesignation;
    }

    @Override
    public SecurityAppRegDepartment as(String alias) {
        return new SecurityAppRegDepartment(DSL.name(alias), this);
    }

    @Override
    public SecurityAppRegDepartment as(Name alias) {
        return new SecurityAppRegDepartment(alias, this);
    }

    @Override
    public SecurityAppRegDepartment as(Table<?> alias) {
        return new SecurityAppRegDepartment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityAppRegDepartment rename(String name) {
        return new SecurityAppRegDepartment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityAppRegDepartment rename(Name name) {
        return new SecurityAppRegDepartment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityAppRegDepartment rename(Table<?> name) {
        return new SecurityAppRegDepartment(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityAppRegDepartment where(Condition condition) {
        return new SecurityAppRegDepartment(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityAppRegDepartment where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityAppRegDepartment where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityAppRegDepartment where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityAppRegDepartment where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityAppRegDepartment where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityAppRegDepartment where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityAppRegDepartment where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityAppRegDepartment whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityAppRegDepartment whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
