/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables.records;


import com.fincity.security.jooq.tables.SecuritySslChallenge;

import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SecuritySslChallengeRecord extends UpdatableRecordImpl<SecuritySslChallengeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>security.security_ssl_challenge.ID</code>. Primary key
     */
    public SecuritySslChallengeRecord setId(ULong value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_challenge.ID</code>. Primary key
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>security.security_ssl_challenge.REQUEST_ID</code>. SSL
     * request ID for which this challenge belongs to
     */
    public SecuritySslChallengeRecord setRequestId(ULong value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_challenge.REQUEST_ID</code>. SSL
     * request ID for which this challenge belongs to
     */
    public ULong getRequestId() {
        return (ULong) get(1);
    }

    /**
     * Setter for <code>security.security_ssl_challenge.CHALLENGE_TYPE</code>.
     * Challenge type
     */
    public SecuritySslChallengeRecord setChallengeType(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_challenge.CHALLENGE_TYPE</code>.
     * Challenge type
     */
    public String getChallengeType() {
        return (String) get(2);
    }

    /**
     * Setter for <code>security.security_ssl_challenge.DOMAIN</code>. Domain
     * for which this challenge is valid
     */
    public SecuritySslChallengeRecord setDomain(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_challenge.DOMAIN</code>. Domain
     * for which this challenge is valid
     */
    public String getDomain() {
        return (String) get(3);
    }

    /**
     * Setter for <code>security.security_ssl_challenge.TOKEN</code>. Challenge
     * token for HTTP-01 challenge/Challenge TXT record name for DNS-01
     * challenge
     */
    public SecuritySslChallengeRecord setToken(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_challenge.TOKEN</code>. Challenge
     * token for HTTP-01 challenge/Challenge TXT record name for DNS-01
     * challenge
     */
    public String getToken() {
        return (String) get(4);
    }

    /**
     * Setter for <code>security.security_ssl_challenge.AUTHORIZATION</code>.
     * Challenge key authorization for HTTP-01 challenge/Digest for DNS-01
     * challenge
     */
    public SecuritySslChallengeRecord setAuthorization(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_challenge.AUTHORIZATION</code>.
     * Challenge key authorization for HTTP-01 challenge/Digest for DNS-01
     * challenge
     */
    public String getAuthorization() {
        return (String) get(5);
    }

    /**
     * Setter for <code>security.security_ssl_challenge.STATUS</code>. Challenge
     * status
     */
    public SecuritySslChallengeRecord setStatus(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_challenge.STATUS</code>. Challenge
     * status
     */
    public String getStatus() {
        return (String) get(6);
    }

    /**
     * Setter for <code>security.security_ssl_challenge.FAILED_REASON</code>.
     * Reason for challenge failure
     */
    public SecuritySslChallengeRecord setFailedReason(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_challenge.FAILED_REASON</code>.
     * Reason for challenge failure
     */
    public String getFailedReason() {
        return (String) get(7);
    }

    /**
     * Setter for
     * <code>security.security_ssl_challenge.LAST_VALIDATED_AT</code>. Time when
     * this challenge is validated
     */
    public SecuritySslChallengeRecord setLastValidatedAt(LocalDateTime value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_ssl_challenge.LAST_VALIDATED_AT</code>. Time when
     * this challenge is validated
     */
    public LocalDateTime getLastValidatedAt() {
        return (LocalDateTime) get(8);
    }

    /**
     * Setter for <code>security.security_ssl_challenge.RETRY_COUNT</code>.
     * Number of times this challenge is retried
     */
    public SecuritySslChallengeRecord setRetryCount(UInteger value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_challenge.RETRY_COUNT</code>.
     * Number of times this challenge is retried
     */
    public UInteger getRetryCount() {
        return (UInteger) get(9);
    }

    /**
     * Setter for <code>security.security_ssl_challenge.CREATED_BY</code>. ID of
     * the user who created this row
     */
    public SecuritySslChallengeRecord setCreatedBy(ULong value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_challenge.CREATED_BY</code>. ID of
     * the user who created this row
     */
    public ULong getCreatedBy() {
        return (ULong) get(10);
    }

    /**
     * Setter for <code>security.security_ssl_challenge.CREATED_AT</code>. Time
     * when this row is created
     */
    public SecuritySslChallengeRecord setCreatedAt(LocalDateTime value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_challenge.CREATED_AT</code>. Time
     * when this row is created
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(11);
    }

    /**
     * Setter for <code>security.security_ssl_challenge.UPDATED_BY</code>. ID of
     * the user who updated this row
     */
    public SecuritySslChallengeRecord setUpdatedBy(ULong value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_challenge.UPDATED_BY</code>. ID of
     * the user who updated this row
     */
    public ULong getUpdatedBy() {
        return (ULong) get(12);
    }

    /**
     * Setter for <code>security.security_ssl_challenge.UPDATED_AT</code>. Time
     * when this row is updated
     */
    public SecuritySslChallengeRecord setUpdatedAt(LocalDateTime value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_challenge.UPDATED_AT</code>. Time
     * when this row is updated
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(13);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SecuritySslChallengeRecord
     */
    public SecuritySslChallengeRecord() {
        super(SecuritySslChallenge.SECURITY_SSL_CHALLENGE);
    }

    /**
     * Create a detached, initialised SecuritySslChallengeRecord
     */
    public SecuritySslChallengeRecord(ULong id, ULong requestId, String challengeType, String domain, String token, String authorization, String status, String failedReason, LocalDateTime lastValidatedAt, UInteger retryCount, ULong createdBy, LocalDateTime createdAt, ULong updatedBy, LocalDateTime updatedAt) {
        super(SecuritySslChallenge.SECURITY_SSL_CHALLENGE);

        setId(id);
        setRequestId(requestId);
        setChallengeType(challengeType);
        setDomain(domain);
        setToken(token);
        setAuthorization(authorization);
        setStatus(status);
        setFailedReason(failedReason);
        setLastValidatedAt(lastValidatedAt);
        setRetryCount(retryCount);
        setCreatedBy(createdBy);
        setCreatedAt(createdAt);
        setUpdatedBy(updatedBy);
        setUpdatedAt(updatedAt);
        resetTouchedOnNotNull();
    }
}
