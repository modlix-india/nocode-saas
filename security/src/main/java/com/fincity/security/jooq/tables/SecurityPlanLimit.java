/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables;


import com.fincity.security.jooq.Keys;
import com.fincity.security.jooq.Security;
import com.fincity.security.jooq.enums.SecurityPlanLimitName;
import com.fincity.security.jooq.enums.SecurityPlanLimitStatus;
import com.fincity.security.jooq.tables.SecurityPlan.SecurityPlanPath;
import com.fincity.security.jooq.tables.records.SecurityPlanLimitRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SecurityPlanLimit extends TableImpl<SecurityPlanLimitRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>security.security_plan_limit</code>
     */
    public static final SecurityPlanLimit SECURITY_PLAN_LIMIT = new SecurityPlanLimit();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityPlanLimitRecord> getRecordType() {
        return SecurityPlanLimitRecord.class;
    }

    /**
     * The column <code>security.security_plan_limit.ID</code>. Primary key
     */
    public final TableField<SecurityPlanLimitRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>security.security_plan_limit.PLAN_ID</code>. Plan ID
     */
    public final TableField<SecurityPlanLimitRecord, ULong> PLAN_ID = createField(DSL.name("PLAN_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Plan ID");

    /**
     * The column <code>security.security_plan_limit.NAME</code>. Name of the
     * limit
     */
    public final TableField<SecurityPlanLimitRecord, SecurityPlanLimitName> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(11).nullable(false).asEnumDataType(SecurityPlanLimitName.class), this, "Name of the limit");

    /**
     * The column <code>security.security_plan_limit.CUSTOM_NAME</code>. Custom
     * name of the limit
     */
    public final TableField<SecurityPlanLimitRecord, String> CUSTOM_NAME = createField(DSL.name("CUSTOM_NAME"), SQLDataType.VARCHAR(256), this, "Custom name of the limit");

    /**
     * The column <code>security.security_plan_limit.LIMIT</code>. Limit of the
     * plan
     */
    public final TableField<SecurityPlanLimitRecord, Integer> LIMIT = createField(DSL.name("LIMIT"), SQLDataType.INTEGER.nullable(false), this, "Limit of the plan");

    /**
     * The column <code>security.security_plan_limit.STATUS</code>. Status of
     * the limit in a plan
     */
    public final TableField<SecurityPlanLimitRecord, SecurityPlanLimitStatus> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(8).nullable(false).defaultValue(DSL.inline("ACTIVE", SQLDataType.VARCHAR)).asEnumDataType(SecurityPlanLimitStatus.class), this, "Status of the limit in a plan");

    private SecurityPlanLimit(Name alias, Table<SecurityPlanLimitRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SecurityPlanLimit(Name alias, Table<SecurityPlanLimitRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>security.security_plan_limit</code> table
     * reference
     */
    public SecurityPlanLimit(String alias) {
        this(DSL.name(alias), SECURITY_PLAN_LIMIT);
    }

    /**
     * Create an aliased <code>security.security_plan_limit</code> table
     * reference
     */
    public SecurityPlanLimit(Name alias) {
        this(alias, SECURITY_PLAN_LIMIT);
    }

    /**
     * Create a <code>security.security_plan_limit</code> table reference
     */
    public SecurityPlanLimit() {
        this(DSL.name("security_plan_limit"), null);
    }

    public <O extends Record> SecurityPlanLimit(Table<O> path, ForeignKey<O, SecurityPlanLimitRecord> childPath, InverseForeignKey<O, SecurityPlanLimitRecord> parentPath) {
        super(path, childPath, parentPath, SECURITY_PLAN_LIMIT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SecurityPlanLimitPath extends SecurityPlanLimit implements Path<SecurityPlanLimitRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SecurityPlanLimitPath(Table<O> path, ForeignKey<O, SecurityPlanLimitRecord> childPath, InverseForeignKey<O, SecurityPlanLimitRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SecurityPlanLimitPath(Name alias, Table<SecurityPlanLimitRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SecurityPlanLimitPath as(String alias) {
            return new SecurityPlanLimitPath(DSL.name(alias), this);
        }

        @Override
        public SecurityPlanLimitPath as(Name alias) {
            return new SecurityPlanLimitPath(alias, this);
        }

        @Override
        public SecurityPlanLimitPath as(Table<?> alias) {
            return new SecurityPlanLimitPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public Identity<SecurityPlanLimitRecord, ULong> getIdentity() {
        return (Identity<SecurityPlanLimitRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecurityPlanLimitRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_PLAN_LIMIT_PRIMARY;
    }

    @Override
    public List<UniqueKey<SecurityPlanLimitRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SECURITY_PLAN_LIMIT_UK1_PLAN_LIMIT_PLAN_ID_NAME);
    }

    @Override
    public List<ForeignKey<SecurityPlanLimitRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_PLAN_LIMIT_PLAN_ID);
    }

    private transient SecurityPlanPath _securityPlan;

    /**
     * Get the implicit join path to the <code>security.security_plan</code>
     * table.
     */
    public SecurityPlanPath securityPlan() {
        if (_securityPlan == null)
            _securityPlan = new SecurityPlanPath(this, Keys.FK1_PLAN_LIMIT_PLAN_ID, null);

        return _securityPlan;
    }

    @Override
    public SecurityPlanLimit as(String alias) {
        return new SecurityPlanLimit(DSL.name(alias), this);
    }

    @Override
    public SecurityPlanLimit as(Name alias) {
        return new SecurityPlanLimit(alias, this);
    }

    @Override
    public SecurityPlanLimit as(Table<?> alias) {
        return new SecurityPlanLimit(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityPlanLimit rename(String name) {
        return new SecurityPlanLimit(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityPlanLimit rename(Name name) {
        return new SecurityPlanLimit(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityPlanLimit rename(Table<?> name) {
        return new SecurityPlanLimit(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPlanLimit where(Condition condition) {
        return new SecurityPlanLimit(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPlanLimit where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPlanLimit where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPlanLimit where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityPlanLimit where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityPlanLimit where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityPlanLimit where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityPlanLimit where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPlanLimit whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPlanLimit whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
