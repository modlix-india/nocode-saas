/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables;


import com.fincity.security.jooq.Keys;
import com.fincity.security.jooq.Security;
import com.fincity.security.jooq.tables.SecurityClient.SecurityClientPath;
import com.fincity.security.jooq.tables.SecurityProfile.SecurityProfilePath;
import com.fincity.security.jooq.tables.records.SecurityProfileClientRestrictionRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SecurityProfileClientRestriction extends TableImpl<SecurityProfileClientRestrictionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>security.security_profile_client_restriction</code>
     */
    public static final SecurityProfileClientRestriction SECURITY_PROFILE_CLIENT_RESTRICTION = new SecurityProfileClientRestriction();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityProfileClientRestrictionRecord> getRecordType() {
        return SecurityProfileClientRestrictionRecord.class;
    }

    /**
     * The column <code>security.security_profile_client_restriction.ID</code>.
     * Primary key
     */
    public final TableField<SecurityProfileClientRestrictionRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column
     * <code>security.security_profile_client_restriction.PROFILE_ID</code>.
     * Profile ID for which this restriction belongs to
     */
    public final TableField<SecurityProfileClientRestrictionRecord, ULong> PROFILE_ID = createField(DSL.name("PROFILE_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Profile ID for which this restriction belongs to");

    /**
     * The column
     * <code>security.security_profile_client_restriction.CLIENT_ID</code>.
     * Client ID for which this restriction belongs to
     */
    public final TableField<SecurityProfileClientRestrictionRecord, ULong> CLIENT_ID = createField(DSL.name("CLIENT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Client ID for which this restriction belongs to");

    private SecurityProfileClientRestriction(Name alias, Table<SecurityProfileClientRestrictionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SecurityProfileClientRestriction(Name alias, Table<SecurityProfileClientRestrictionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased
     * <code>security.security_profile_client_restriction</code> table reference
     */
    public SecurityProfileClientRestriction(String alias) {
        this(DSL.name(alias), SECURITY_PROFILE_CLIENT_RESTRICTION);
    }

    /**
     * Create an aliased
     * <code>security.security_profile_client_restriction</code> table reference
     */
    public SecurityProfileClientRestriction(Name alias) {
        this(alias, SECURITY_PROFILE_CLIENT_RESTRICTION);
    }

    /**
     * Create a <code>security.security_profile_client_restriction</code> table
     * reference
     */
    public SecurityProfileClientRestriction() {
        this(DSL.name("security_profile_client_restriction"), null);
    }

    public <O extends Record> SecurityProfileClientRestriction(Table<O> path, ForeignKey<O, SecurityProfileClientRestrictionRecord> childPath, InverseForeignKey<O, SecurityProfileClientRestrictionRecord> parentPath) {
        super(path, childPath, parentPath, SECURITY_PROFILE_CLIENT_RESTRICTION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SecurityProfileClientRestrictionPath extends SecurityProfileClientRestriction implements Path<SecurityProfileClientRestrictionRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SecurityProfileClientRestrictionPath(Table<O> path, ForeignKey<O, SecurityProfileClientRestrictionRecord> childPath, InverseForeignKey<O, SecurityProfileClientRestrictionRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SecurityProfileClientRestrictionPath(Name alias, Table<SecurityProfileClientRestrictionRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SecurityProfileClientRestrictionPath as(String alias) {
            return new SecurityProfileClientRestrictionPath(DSL.name(alias), this);
        }

        @Override
        public SecurityProfileClientRestrictionPath as(Name alias) {
            return new SecurityProfileClientRestrictionPath(alias, this);
        }

        @Override
        public SecurityProfileClientRestrictionPath as(Table<?> alias) {
            return new SecurityProfileClientRestrictionPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public Identity<SecurityProfileClientRestrictionRecord, ULong> getIdentity() {
        return (Identity<SecurityProfileClientRestrictionRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecurityProfileClientRestrictionRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_PROFILE_CLIENT_RESTRICTION_PRIMARY;
    }

    @Override
    public List<UniqueKey<SecurityProfileClientRestrictionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SECURITY_PROFILE_CLIENT_RESTRICTION_UK1_PROFILE_CLIENT_APP_ID);
    }

    @Override
    public List<ForeignKey<SecurityProfileClientRestrictionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_PROFILE_CLIENT_RESTRICTION_PROFILE_ID, Keys.FK3_PROFILE_CLIENT_RESTRICTION_CLIENT_ID);
    }

    private transient SecurityProfilePath _securityProfile;

    /**
     * Get the implicit join path to the <code>security.security_profile</code>
     * table.
     */
    public SecurityProfilePath securityProfile() {
        if (_securityProfile == null)
            _securityProfile = new SecurityProfilePath(this, Keys.FK1_PROFILE_CLIENT_RESTRICTION_PROFILE_ID, null);

        return _securityProfile;
    }

    private transient SecurityClientPath _securityClient;

    /**
     * Get the implicit join path to the <code>security.security_client</code>
     * table.
     */
    public SecurityClientPath securityClient() {
        if (_securityClient == null)
            _securityClient = new SecurityClientPath(this, Keys.FK3_PROFILE_CLIENT_RESTRICTION_CLIENT_ID, null);

        return _securityClient;
    }

    @Override
    public SecurityProfileClientRestriction as(String alias) {
        return new SecurityProfileClientRestriction(DSL.name(alias), this);
    }

    @Override
    public SecurityProfileClientRestriction as(Name alias) {
        return new SecurityProfileClientRestriction(alias, this);
    }

    @Override
    public SecurityProfileClientRestriction as(Table<?> alias) {
        return new SecurityProfileClientRestriction(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityProfileClientRestriction rename(String name) {
        return new SecurityProfileClientRestriction(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityProfileClientRestriction rename(Name name) {
        return new SecurityProfileClientRestriction(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityProfileClientRestriction rename(Table<?> name) {
        return new SecurityProfileClientRestriction(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityProfileClientRestriction where(Condition condition) {
        return new SecurityProfileClientRestriction(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityProfileClientRestriction where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityProfileClientRestriction where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityProfileClientRestriction where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityProfileClientRestriction where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityProfileClientRestriction where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityProfileClientRestriction where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityProfileClientRestriction where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityProfileClientRestriction whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityProfileClientRestriction whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
