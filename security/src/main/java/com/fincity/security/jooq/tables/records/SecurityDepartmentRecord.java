/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables.records;


import com.fincity.security.jooq.tables.SecurityDepartment;

import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SecurityDepartmentRecord extends UpdatableRecordImpl<SecurityDepartmentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>security.security_department.ID</code>. Primary key
     */
    public SecurityDepartmentRecord setId(ULong value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>security.security_department.ID</code>. Primary key
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>security.security_department.CLIENT_ID</code>. Client ID
     * for which this department belongs to
     */
    public SecurityDepartmentRecord setClientId(ULong value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>security.security_department.CLIENT_ID</code>. Client ID
     * for which this department belongs to
     */
    public ULong getClientId() {
        return (ULong) get(1);
    }

    /**
     * Setter for <code>security.security_department.NAME</code>. Name of the
     * department
     */
    public SecurityDepartmentRecord setName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>security.security_department.NAME</code>. Name of the
     * department
     */
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>security.security_department.DESCRIPTION</code>.
     * Description of the department
     */
    public SecurityDepartmentRecord setDescription(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>security.security_department.DESCRIPTION</code>.
     * Description of the department
     */
    public String getDescription() {
        return (String) get(3);
    }

    /**
     * Setter for
     * <code>security.security_department.PARENT_DEPARTMENT_ID</code>. Parent
     * department for hierarchical structure
     */
    public SecurityDepartmentRecord setParentDepartmentId(ULong value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_department.PARENT_DEPARTMENT_ID</code>. Parent
     * department for hierarchical structure
     */
    public ULong getParentDepartmentId() {
        return (ULong) get(4);
    }

    /**
     * Setter for <code>security.security_department.CREATED_BY</code>. ID of
     * the user who created this row
     */
    public SecurityDepartmentRecord setCreatedBy(ULong value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>security.security_department.CREATED_BY</code>. ID of
     * the user who created this row
     */
    public ULong getCreatedBy() {
        return (ULong) get(5);
    }

    /**
     * Setter for <code>security.security_department.CREATED_AT</code>. Time
     * when this row is created
     */
    public SecurityDepartmentRecord setCreatedAt(LocalDateTime value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>security.security_department.CREATED_AT</code>. Time
     * when this row is created
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>security.security_department.UPDATED_BY</code>. ID of
     * the user who updated this row
     */
    public SecurityDepartmentRecord setUpdatedBy(ULong value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>security.security_department.UPDATED_BY</code>. ID of
     * the user who updated this row
     */
    public ULong getUpdatedBy() {
        return (ULong) get(7);
    }

    /**
     * Setter for <code>security.security_department.UPDATED_AT</code>. Time
     * when this row is updated
     */
    public SecurityDepartmentRecord setUpdatedAt(LocalDateTime value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>security.security_department.UPDATED_AT</code>. Time
     * when this row is updated
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SecurityDepartmentRecord
     */
    public SecurityDepartmentRecord() {
        super(SecurityDepartment.SECURITY_DEPARTMENT);
    }

    /**
     * Create a detached, initialised SecurityDepartmentRecord
     */
    public SecurityDepartmentRecord(ULong id, ULong clientId, String name, String description, ULong parentDepartmentId, ULong createdBy, LocalDateTime createdAt, ULong updatedBy, LocalDateTime updatedAt) {
        super(SecurityDepartment.SECURITY_DEPARTMENT);

        setId(id);
        setClientId(clientId);
        setName(name);
        setDescription(description);
        setParentDepartmentId(parentDepartmentId);
        setCreatedBy(createdBy);
        setCreatedAt(createdAt);
        setUpdatedBy(updatedBy);
        setUpdatedAt(updatedAt);
        resetChangedOnNotNull();
    }
}
