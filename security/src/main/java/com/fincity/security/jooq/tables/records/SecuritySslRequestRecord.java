/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables.records;


import com.fincity.security.jooq.tables.SecuritySslRequest;

import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SecuritySslRequestRecord extends UpdatableRecordImpl<SecuritySslRequestRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>security.security_ssl_request.ID</code>. Primary key
     */
    public SecuritySslRequestRecord setId(ULong value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_request.ID</code>. Primary key
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>security.security_ssl_request.URL_ID</code>. URL ID for
     * which this SSL certificate belongs to
     */
    public SecuritySslRequestRecord setUrlId(ULong value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_request.URL_ID</code>. URL ID for
     * which this SSL certificate belongs to
     */
    public ULong getUrlId() {
        return (ULong) get(1);
    }

    /**
     * Setter for <code>security.security_ssl_request.DOMAINS</code>. Domains
     * for which this SSL certificate is valid
     */
    public SecuritySslRequestRecord setDomains(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_request.DOMAINS</code>. Domains
     * for which this SSL certificate is valid
     */
    public String getDomains() {
        return (String) get(2);
    }

    /**
     * Setter for <code>security.security_ssl_request.ORGANIZATION</code>.
     * Organization for which this SSL certificate is valid
     */
    public SecuritySslRequestRecord setOrganization(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_request.ORGANIZATION</code>.
     * Organization for which this SSL certificate is valid
     */
    public String getOrganization() {
        return (String) get(3);
    }

    /**
     * Setter for <code>security.security_ssl_request.CRT_KEY</code>. SSL
     * certificate key
     */
    public SecuritySslRequestRecord setCrtKey(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_request.CRT_KEY</code>. SSL
     * certificate key
     */
    public String getCrtKey() {
        return (String) get(4);
    }

    /**
     * Setter for <code>security.security_ssl_request.CSR</code>. SSL
     * certificate signing request
     */
    public SecuritySslRequestRecord setCsr(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_request.CSR</code>. SSL
     * certificate signing request
     */
    public String getCsr() {
        return (String) get(5);
    }

    /**
     * Setter for <code>security.security_ssl_request.VALIDITY</code>. Validity
     * of the SSL certificate in months
     */
    public SecuritySslRequestRecord setValidity(UInteger value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_request.VALIDITY</code>. Validity
     * of the SSL certificate in months
     */
    public UInteger getValidity() {
        return (UInteger) get(6);
    }

    /**
     * Setter for <code>security.security_ssl_request.FAILED_REASON</code>.
     * Reason for challenge failure
     */
    public SecuritySslRequestRecord setFailedReason(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_request.FAILED_REASON</code>.
     * Reason for challenge failure
     */
    public String getFailedReason() {
        return (String) get(7);
    }

    /**
     * Setter for <code>security.security_ssl_request.UPDATED_BY</code>. ID of
     * the user who updated this row
     */
    public SecuritySslRequestRecord setUpdatedBy(ULong value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_request.UPDATED_BY</code>. ID of
     * the user who updated this row
     */
    public ULong getUpdatedBy() {
        return (ULong) get(8);
    }

    /**
     * Setter for <code>security.security_ssl_request.UPDATED_AT</code>. Time
     * when this row is updated
     */
    public SecuritySslRequestRecord setUpdatedAt(LocalDateTime value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_request.UPDATED_AT</code>. Time
     * when this row is updated
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SecuritySslRequestRecord
     */
    public SecuritySslRequestRecord() {
        super(SecuritySslRequest.SECURITY_SSL_REQUEST);
    }

    /**
     * Create a detached, initialised SecuritySslRequestRecord
     */
    public SecuritySslRequestRecord(ULong id, ULong urlId, String domains, String organization, String crtKey, String csr, UInteger validity, String failedReason, ULong updatedBy, LocalDateTime updatedAt) {
        super(SecuritySslRequest.SECURITY_SSL_REQUEST);

        setId(id);
        setUrlId(urlId);
        setDomains(domains);
        setOrganization(organization);
        setCrtKey(crtKey);
        setCsr(csr);
        setValidity(validity);
        setFailedReason(failedReason);
        setUpdatedBy(updatedBy);
        setUpdatedAt(updatedAt);
        resetTouchedOnNotNull();
    }
}
