/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables;


import com.fincity.security.jooq.Keys;
import com.fincity.security.jooq.Security;
import com.fincity.security.jooq.enums.SecurityAppRegIntegrationPlatform;
import com.fincity.security.jooq.tables.SecurityApp.SecurityAppPath;
import com.fincity.security.jooq.tables.SecurityAppRegIntegrationTokens.SecurityAppRegIntegrationTokensPath;
import com.fincity.security.jooq.tables.SecurityClient.SecurityClientPath;
import com.fincity.security.jooq.tables.records.SecurityAppRegIntegrationRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SecurityAppRegIntegration extends TableImpl<SecurityAppRegIntegrationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>security.security_app_reg_integration</code>
     */
    public static final SecurityAppRegIntegration SECURITY_APP_REG_INTEGRATION = new SecurityAppRegIntegration();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityAppRegIntegrationRecord> getRecordType() {
        return SecurityAppRegIntegrationRecord.class;
    }

    /**
     * The column <code>security.security_app_reg_integration.ID</code>. Primary
     * key
     */
    public final TableField<SecurityAppRegIntegrationRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>security.security_app_reg_integration.APP_ID</code>. App
     * ID
     */
    public final TableField<SecurityAppRegIntegrationRecord, ULong> APP_ID = createField(DSL.name("APP_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "App ID");

    /**
     * The column <code>security.security_app_reg_integration.CLIENT_ID</code>.
     * Client ID
     */
    public final TableField<SecurityAppRegIntegrationRecord, ULong> CLIENT_ID = createField(DSL.name("CLIENT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Client ID");

    /**
     * The column <code>security.security_app_reg_integration.PLATFORM</code>.
     * Platform
     */
    public final TableField<SecurityAppRegIntegrationRecord, SecurityAppRegIntegrationPlatform> PLATFORM = createField(DSL.name("PLATFORM"), SQLDataType.VARCHAR(9).nullable(false).asEnumDataType(SecurityAppRegIntegrationPlatform.class), this, "Platform");

    /**
     * The column <code>security.security_app_reg_integration.INTG_ID</code>.
     * Integration ID
     */
    public final TableField<SecurityAppRegIntegrationRecord, String> INTG_ID = createField(DSL.name("INTG_ID"), SQLDataType.VARCHAR(512).nullable(false), this, "Integration ID");

    /**
     * The column
     * <code>security.security_app_reg_integration.INTG_SECRET</code>.
     * Integration Secret
     */
    public final TableField<SecurityAppRegIntegrationRecord, String> INTG_SECRET = createField(DSL.name("INTG_SECRET"), SQLDataType.VARCHAR(512).nullable(false), this, "Integration Secret");

    /**
     * The column <code>security.security_app_reg_integration.LOGIN_URI</code>.
     * URI for login
     */
    public final TableField<SecurityAppRegIntegrationRecord, String> LOGIN_URI = createField(DSL.name("LOGIN_URI"), SQLDataType.VARCHAR(2083).nullable(false), this, "URI for login");

    /**
     * The column <code>security.security_app_reg_integration.SIGNUP_URI</code>.
     * URI for signup
     */
    public final TableField<SecurityAppRegIntegrationRecord, String> SIGNUP_URI = createField(DSL.name("SIGNUP_URI"), SQLDataType.VARCHAR(2083).nullable(false), this, "URI for signup");

    /**
     * The column <code>security.security_app_reg_integration.CREATED_BY</code>.
     * ID of the user who created this row
     */
    public final TableField<SecurityAppRegIntegrationRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row");

    /**
     * The column <code>security.security_app_reg_integration.CREATED_AT</code>.
     * Time when this row is created
     */
    public final TableField<SecurityAppRegIntegrationRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created");

    /**
     * The column <code>security.security_app_reg_integration.UPDATED_BY</code>.
     * ID of the user who updated this row
     */
    public final TableField<SecurityAppRegIntegrationRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row");

    /**
     * The column <code>security.security_app_reg_integration.UPDATED_AT</code>.
     * Time when this row is updated
     */
    public final TableField<SecurityAppRegIntegrationRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated");

    private SecurityAppRegIntegration(Name alias, Table<SecurityAppRegIntegrationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SecurityAppRegIntegration(Name alias, Table<SecurityAppRegIntegrationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>security.security_app_reg_integration</code>
     * table reference
     */
    public SecurityAppRegIntegration(String alias) {
        this(DSL.name(alias), SECURITY_APP_REG_INTEGRATION);
    }

    /**
     * Create an aliased <code>security.security_app_reg_integration</code>
     * table reference
     */
    public SecurityAppRegIntegration(Name alias) {
        this(alias, SECURITY_APP_REG_INTEGRATION);
    }

    /**
     * Create a <code>security.security_app_reg_integration</code> table
     * reference
     */
    public SecurityAppRegIntegration() {
        this(DSL.name("security_app_reg_integration"), null);
    }

    public <O extends Record> SecurityAppRegIntegration(Table<O> path, ForeignKey<O, SecurityAppRegIntegrationRecord> childPath, InverseForeignKey<O, SecurityAppRegIntegrationRecord> parentPath) {
        super(path, childPath, parentPath, SECURITY_APP_REG_INTEGRATION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SecurityAppRegIntegrationPath extends SecurityAppRegIntegration implements Path<SecurityAppRegIntegrationRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SecurityAppRegIntegrationPath(Table<O> path, ForeignKey<O, SecurityAppRegIntegrationRecord> childPath, InverseForeignKey<O, SecurityAppRegIntegrationRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SecurityAppRegIntegrationPath(Name alias, Table<SecurityAppRegIntegrationRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SecurityAppRegIntegrationPath as(String alias) {
            return new SecurityAppRegIntegrationPath(DSL.name(alias), this);
        }

        @Override
        public SecurityAppRegIntegrationPath as(Name alias) {
            return new SecurityAppRegIntegrationPath(alias, this);
        }

        @Override
        public SecurityAppRegIntegrationPath as(Table<?> alias) {
            return new SecurityAppRegIntegrationPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public Identity<SecurityAppRegIntegrationRecord, ULong> getIdentity() {
        return (Identity<SecurityAppRegIntegrationRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecurityAppRegIntegrationRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_APP_REG_INTEGRATION_PRIMARY;
    }

    @Override
    public List<UniqueKey<SecurityAppRegIntegrationRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SECURITY_APP_REG_INTEGRATION_UK1_APP_REG_INTEGRATION);
    }

    @Override
    public List<ForeignKey<SecurityAppRegIntegrationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_APP_REG_INTEGRATION_APP_ID, Keys.FK2_APP_REG_INTEGRATION_CLIENT_ID);
    }

    private transient SecurityAppPath _securityApp;

    /**
     * Get the implicit join path to the <code>security.security_app</code>
     * table.
     */
    public SecurityAppPath securityApp() {
        if (_securityApp == null)
            _securityApp = new SecurityAppPath(this, Keys.FK1_APP_REG_INTEGRATION_APP_ID, null);

        return _securityApp;
    }

    private transient SecurityClientPath _securityClient;

    /**
     * Get the implicit join path to the <code>security.security_client</code>
     * table.
     */
    public SecurityClientPath securityClient() {
        if (_securityClient == null)
            _securityClient = new SecurityClientPath(this, Keys.FK2_APP_REG_INTEGRATION_CLIENT_ID, null);

        return _securityClient;
    }

    private transient SecurityAppRegIntegrationTokensPath _securityAppRegIntegrationTokens;

    /**
     * Get the implicit to-many join path to the
     * <code>security.security_app_reg_integration_tokens</code> table
     */
    public SecurityAppRegIntegrationTokensPath securityAppRegIntegrationTokens() {
        if (_securityAppRegIntegrationTokens == null)
            _securityAppRegIntegrationTokens = new SecurityAppRegIntegrationTokensPath(this, null, Keys.FK1_INTEGRATION_TOKEN_APP_REG_INTEGRATION_ID.getInverseKey());

        return _securityAppRegIntegrationTokens;
    }

    @Override
    public SecurityAppRegIntegration as(String alias) {
        return new SecurityAppRegIntegration(DSL.name(alias), this);
    }

    @Override
    public SecurityAppRegIntegration as(Name alias) {
        return new SecurityAppRegIntegration(alias, this);
    }

    @Override
    public SecurityAppRegIntegration as(Table<?> alias) {
        return new SecurityAppRegIntegration(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityAppRegIntegration rename(String name) {
        return new SecurityAppRegIntegration(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityAppRegIntegration rename(Name name) {
        return new SecurityAppRegIntegration(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityAppRegIntegration rename(Table<?> name) {
        return new SecurityAppRegIntegration(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityAppRegIntegration where(Condition condition) {
        return new SecurityAppRegIntegration(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityAppRegIntegration where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityAppRegIntegration where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityAppRegIntegration where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityAppRegIntegration where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityAppRegIntegration where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityAppRegIntegration where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityAppRegIntegration where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityAppRegIntegration whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityAppRegIntegration whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
