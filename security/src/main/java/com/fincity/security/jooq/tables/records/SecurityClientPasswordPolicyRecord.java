/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables.records;


import com.fincity.security.jooq.tables.SecurityClientPasswordPolicy;

import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;
import org.jooq.types.UShort;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SecurityClientPasswordPolicyRecord extends UpdatableRecordImpl<SecurityClientPasswordPolicyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>security.security_client_password_policy.ID</code>.
     * Primary key
     */
    public SecurityClientPasswordPolicyRecord setId(ULong value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>security.security_client_password_policy.ID</code>.
     * Primary key
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for
     * <code>security.security_client_password_policy.CLIENT_ID</code>. Client
     * ID
     */
    public SecurityClientPasswordPolicyRecord setClientId(ULong value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_password_policy.CLIENT_ID</code>. Client
     * ID
     */
    public ULong getClientId() {
        return (ULong) get(1);
    }

    /**
     * Setter for <code>security.security_client_password_policy.APP_ID</code>.
     * Identifier for the application to which this OTP belongs. References
     * security_app table
     */
    public SecurityClientPasswordPolicyRecord setAppId(ULong value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>security.security_client_password_policy.APP_ID</code>.
     * Identifier for the application to which this OTP belongs. References
     * security_app table
     */
    public ULong getAppId() {
        return (ULong) get(2);
    }

    /**
     * Setter for
     * <code>security.security_client_password_policy.ATLEAST_ONE_UPPERCASE</code>.
     * Atleast one uppercase letter
     */
    public SecurityClientPasswordPolicyRecord setAtleastOneUppercase(Byte value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_password_policy.ATLEAST_ONE_UPPERCASE</code>.
     * Atleast one uppercase letter
     */
    public Byte getAtleastOneUppercase() {
        return (Byte) get(3);
    }

    /**
     * Setter for
     * <code>security.security_client_password_policy.ATLEAST_ONE_LOWERCASE</code>.
     * Atleast one lowercase letter
     */
    public SecurityClientPasswordPolicyRecord setAtleastOneLowercase(Byte value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_password_policy.ATLEAST_ONE_LOWERCASE</code>.
     * Atleast one lowercase letter
     */
    public Byte getAtleastOneLowercase() {
        return (Byte) get(4);
    }

    /**
     * Setter for
     * <code>security.security_client_password_policy.ATLEAST_ONE_DIGIT</code>.
     * Atleast one digit
     */
    public SecurityClientPasswordPolicyRecord setAtleastOneDigit(Byte value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_password_policy.ATLEAST_ONE_DIGIT</code>.
     * Atleast one digit
     */
    public Byte getAtleastOneDigit() {
        return (Byte) get(5);
    }

    /**
     * Setter for
     * <code>security.security_client_password_policy.ATLEAST_ONE_SPECIAL_CHAR</code>.
     * Atleast one special characters
     */
    public SecurityClientPasswordPolicyRecord setAtleastOneSpecialChar(Byte value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_password_policy.ATLEAST_ONE_SPECIAL_CHAR</code>.
     * Atleast one special characters
     */
    public Byte getAtleastOneSpecialChar() {
        return (Byte) get(6);
    }

    /**
     * Setter for
     * <code>security.security_client_password_policy.SPACES_ALLOWED</code>.
     * Spaces are allowed
     */
    public SecurityClientPasswordPolicyRecord setSpacesAllowed(Byte value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_password_policy.SPACES_ALLOWED</code>.
     * Spaces are allowed
     */
    public Byte getSpacesAllowed() {
        return (Byte) get(7);
    }

    /**
     * Setter for <code>security.security_client_password_policy.REGEX</code>.
     * Matching regular expression
     */
    public SecurityClientPasswordPolicyRecord setRegex(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>security.security_client_password_policy.REGEX</code>.
     * Matching regular expression
     */
    public String getRegex() {
        return (String) get(8);
    }

    /**
     * Setter for
     * <code>security.security_client_password_policy.PERCENTAGE_NAME_MATCH</code>.
     * Percent that first and last name matching
     */
    public SecurityClientPasswordPolicyRecord setPercentageNameMatch(UShort value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_password_policy.PERCENTAGE_NAME_MATCH</code>.
     * Percent that first and last name matching
     */
    public UShort getPercentageNameMatch() {
        return (UShort) get(9);
    }

    /**
     * Setter for
     * <code>security.security_client_password_policy.PASS_EXPIRY_IN_DAYS</code>.
     * Expiry of password in days
     */
    public SecurityClientPasswordPolicyRecord setPassExpiryInDays(UShort value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_password_policy.PASS_EXPIRY_IN_DAYS</code>.
     * Expiry of password in days
     */
    public UShort getPassExpiryInDays() {
        return (UShort) get(10);
    }

    /**
     * Setter for
     * <code>security.security_client_password_policy.PASS_EXPIRY_WARN_IN_DAYS</code>.
     * Password expiration warning in days
     */
    public SecurityClientPasswordPolicyRecord setPassExpiryWarnInDays(UShort value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_password_policy.PASS_EXPIRY_WARN_IN_DAYS</code>.
     * Password expiration warning in days
     */
    public UShort getPassExpiryWarnInDays() {
        return (UShort) get(11);
    }

    /**
     * Setter for
     * <code>security.security_client_password_policy.PASS_MIN_LENGTH</code>.
     * Minimum Length for the password
     */
    public SecurityClientPasswordPolicyRecord setPassMinLength(UShort value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_password_policy.PASS_MIN_LENGTH</code>.
     * Minimum Length for the password
     */
    public UShort getPassMinLength() {
        return (UShort) get(12);
    }

    /**
     * Setter for
     * <code>security.security_client_password_policy.PASS_MAX_LENGTH</code>.
     * Maximum Length for the password
     */
    public SecurityClientPasswordPolicyRecord setPassMaxLength(UShort value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_password_policy.PASS_MAX_LENGTH</code>.
     * Maximum Length for the password
     */
    public UShort getPassMaxLength() {
        return (UShort) get(13);
    }

    /**
     * Setter for
     * <code>security.security_client_password_policy.NO_FAILED_ATTEMPTS</code>.
     * No of continuous attempts of authentication with wrong password
     */
    public SecurityClientPasswordPolicyRecord setNoFailedAttempts(UShort value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_password_policy.NO_FAILED_ATTEMPTS</code>.
     * No of continuous attempts of authentication with wrong password
     */
    public UShort getNoFailedAttempts() {
        return (UShort) get(14);
    }

    /**
     * Setter for
     * <code>security.security_client_password_policy.USER_LOCK_TIME</code>.
     * Time in minutes for which user need to be locked it policy violates
     */
    public SecurityClientPasswordPolicyRecord setUserLockTime(ULong value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_password_policy.USER_LOCK_TIME</code>.
     * Time in minutes for which user need to be locked it policy violates
     */
    public ULong getUserLockTime() {
        return (ULong) get(15);
    }

    /**
     * Setter for
     * <code>security.security_client_password_policy.PASS_HISTORY_COUNT</code>.
     * Remember how many passwords
     */
    public SecurityClientPasswordPolicyRecord setPassHistoryCount(UShort value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_password_policy.PASS_HISTORY_COUNT</code>.
     * Remember how many passwords
     */
    public UShort getPassHistoryCount() {
        return (UShort) get(16);
    }

    /**
     * Setter for
     * <code>security.security_client_password_policy.CREATED_BY</code>. ID of
     * the user who created this row
     */
    public SecurityClientPasswordPolicyRecord setCreatedBy(ULong value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_password_policy.CREATED_BY</code>. ID of
     * the user who created this row
     */
    public ULong getCreatedBy() {
        return (ULong) get(17);
    }

    /**
     * Setter for
     * <code>security.security_client_password_policy.CREATED_AT</code>. Time
     * when this row is created
     */
    public SecurityClientPasswordPolicyRecord setCreatedAt(LocalDateTime value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_password_policy.CREATED_AT</code>. Time
     * when this row is created
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(18);
    }

    /**
     * Setter for
     * <code>security.security_client_password_policy.UPDATED_BY</code>. ID of
     * the user who updated this row
     */
    public SecurityClientPasswordPolicyRecord setUpdatedBy(ULong value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_password_policy.UPDATED_BY</code>. ID of
     * the user who updated this row
     */
    public ULong getUpdatedBy() {
        return (ULong) get(19);
    }

    /**
     * Setter for
     * <code>security.security_client_password_policy.UPDATED_AT</code>. Time
     * when this row is updated
     */
    public SecurityClientPasswordPolicyRecord setUpdatedAt(LocalDateTime value) {
        set(20, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_password_policy.UPDATED_AT</code>. Time
     * when this row is updated
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(20);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SecurityClientPasswordPolicyRecord
     */
    public SecurityClientPasswordPolicyRecord() {
        super(SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY);
    }

    /**
     * Create a detached, initialised SecurityClientPasswordPolicyRecord
     */
    public SecurityClientPasswordPolicyRecord(ULong id, ULong clientId, ULong appId, Byte atleastOneUppercase, Byte atleastOneLowercase, Byte atleastOneDigit, Byte atleastOneSpecialChar, Byte spacesAllowed, String regex, UShort percentageNameMatch, UShort passExpiryInDays, UShort passExpiryWarnInDays, UShort passMinLength, UShort passMaxLength, UShort noFailedAttempts, ULong userLockTime, UShort passHistoryCount, ULong createdBy, LocalDateTime createdAt, ULong updatedBy, LocalDateTime updatedAt) {
        super(SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY);

        setId(id);
        setClientId(clientId);
        setAppId(appId);
        setAtleastOneUppercase(atleastOneUppercase);
        setAtleastOneLowercase(atleastOneLowercase);
        setAtleastOneDigit(atleastOneDigit);
        setAtleastOneSpecialChar(atleastOneSpecialChar);
        setSpacesAllowed(spacesAllowed);
        setRegex(regex);
        setPercentageNameMatch(percentageNameMatch);
        setPassExpiryInDays(passExpiryInDays);
        setPassExpiryWarnInDays(passExpiryWarnInDays);
        setPassMinLength(passMinLength);
        setPassMaxLength(passMaxLength);
        setNoFailedAttempts(noFailedAttempts);
        setUserLockTime(userLockTime);
        setPassHistoryCount(passHistoryCount);
        setCreatedBy(createdBy);
        setCreatedAt(createdAt);
        setUpdatedBy(updatedBy);
        setUpdatedAt(updatedAt);
        resetTouchedOnNotNull();
    }
}
