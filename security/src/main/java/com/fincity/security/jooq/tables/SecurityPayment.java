/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables;


import com.fincity.saas.commons.jooq.convertor.JSONMysqlMapConvertor;
import com.fincity.security.jooq.Keys;
import com.fincity.security.jooq.Security;
import com.fincity.security.jooq.enums.SecurityPaymentPaymentMethod;
import com.fincity.security.jooq.enums.SecurityPaymentPaymentStatus;
import com.fincity.security.jooq.tables.SecurityInvoice.SecurityInvoicePath;
import com.fincity.security.jooq.tables.records.SecurityPaymentRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.Map;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SecurityPayment extends TableImpl<SecurityPaymentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>security.security_payment</code>
     */
    public static final SecurityPayment SECURITY_PAYMENT = new SecurityPayment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityPaymentRecord> getRecordType() {
        return SecurityPaymentRecord.class;
    }

    /**
     * The column <code>security.security_payment.ID</code>. Primary key
     */
    public final TableField<SecurityPaymentRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>security.security_payment.INVOICE_ID</code>. Invoice ID
     */
    public final TableField<SecurityPaymentRecord, ULong> INVOICE_ID = createField(DSL.name("INVOICE_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Invoice ID");

    /**
     * The column <code>security.security_payment.PAYMENT_DATE</code>. Payment
     * date
     */
    public final TableField<SecurityPaymentRecord, LocalDateTime> PAYMENT_DATE = createField(DSL.name("PAYMENT_DATE"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "Payment date");

    /**
     * The column <code>security.security_payment.PAYMENT_AMOUNT</code>. Payment
     * amount
     */
    public final TableField<SecurityPaymentRecord, BigDecimal> PAYMENT_AMOUNT = createField(DSL.name("PAYMENT_AMOUNT"), SQLDataType.DECIMAL(10, 2).nullable(false), this, "Payment amount");

    /**
     * The column <code>security.security_payment.PAYMENT_STATUS</code>. Payment
     * status
     */
    public final TableField<SecurityPaymentRecord, SecurityPaymentPaymentStatus> PAYMENT_STATUS = createField(DSL.name("PAYMENT_STATUS"), SQLDataType.VARCHAR(9).nullable(false).defaultValue(DSL.inline("PENDING", SQLDataType.VARCHAR)).asEnumDataType(SecurityPaymentPaymentStatus.class), this, "Payment status");

    /**
     * The column <code>security.security_payment.PAYMENT_METHOD</code>. Payment
     * method
     */
    public final TableField<SecurityPaymentRecord, SecurityPaymentPaymentMethod> PAYMENT_METHOD = createField(DSL.name("PAYMENT_METHOD"), SQLDataType.VARCHAR(8).nullable(false).defaultValue(DSL.inline("OTHER", SQLDataType.VARCHAR)).asEnumDataType(SecurityPaymentPaymentMethod.class), this, "Payment method");

    /**
     * The column <code>security.security_payment.PAYMENT_REFERENCE</code>.
     * Payment reference or trasaction id
     */
    public final TableField<SecurityPaymentRecord, String> PAYMENT_REFERENCE = createField(DSL.name("PAYMENT_REFERENCE"), SQLDataType.VARCHAR(256), this, "Payment reference or trasaction id");

    /**
     * The column <code>security.security_payment.PAYMENT_RESPONSE</code>.
     * Payment response or error message
     */
    public final TableField<SecurityPaymentRecord, Map> PAYMENT_RESPONSE = createField(DSL.name("PAYMENT_RESPONSE"), SQLDataType.JSON, this, "Payment response or error message", new JSONMysqlMapConvertor());

    /**
     * The column <code>security.security_payment.CREATED_BY</code>. ID of the
     * user who created this row
     */
    public final TableField<SecurityPaymentRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row");

    /**
     * The column <code>security.security_payment.CREATED_AT</code>. Time when
     * this row is created
     */
    public final TableField<SecurityPaymentRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created");

    /**
     * The column <code>security.security_payment.UPDATED_BY</code>. ID of the
     * user who updated this row
     */
    public final TableField<SecurityPaymentRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row");

    /**
     * The column <code>security.security_payment.UPDATED_AT</code>. Time when
     * this row is updated
     */
    public final TableField<SecurityPaymentRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated");

    private SecurityPayment(Name alias, Table<SecurityPaymentRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SecurityPayment(Name alias, Table<SecurityPaymentRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>security.security_payment</code> table reference
     */
    public SecurityPayment(String alias) {
        this(DSL.name(alias), SECURITY_PAYMENT);
    }

    /**
     * Create an aliased <code>security.security_payment</code> table reference
     */
    public SecurityPayment(Name alias) {
        this(alias, SECURITY_PAYMENT);
    }

    /**
     * Create a <code>security.security_payment</code> table reference
     */
    public SecurityPayment() {
        this(DSL.name("security_payment"), null);
    }

    public <O extends Record> SecurityPayment(Table<O> path, ForeignKey<O, SecurityPaymentRecord> childPath, InverseForeignKey<O, SecurityPaymentRecord> parentPath) {
        super(path, childPath, parentPath, SECURITY_PAYMENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SecurityPaymentPath extends SecurityPayment implements Path<SecurityPaymentRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SecurityPaymentPath(Table<O> path, ForeignKey<O, SecurityPaymentRecord> childPath, InverseForeignKey<O, SecurityPaymentRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SecurityPaymentPath(Name alias, Table<SecurityPaymentRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SecurityPaymentPath as(String alias) {
            return new SecurityPaymentPath(DSL.name(alias), this);
        }

        @Override
        public SecurityPaymentPath as(Name alias) {
            return new SecurityPaymentPath(alias, this);
        }

        @Override
        public SecurityPaymentPath as(Table<?> alias) {
            return new SecurityPaymentPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public Identity<SecurityPaymentRecord, ULong> getIdentity() {
        return (Identity<SecurityPaymentRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecurityPaymentRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_PAYMENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<SecurityPaymentRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SECURITY_PAYMENT_UK1_PAYMENT_INVOICE_ID_PAYMENT_REFERENCE);
    }

    @Override
    public List<ForeignKey<SecurityPaymentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_PAYMENT_INVOICE_ID);
    }

    private transient SecurityInvoicePath _securityInvoice;

    /**
     * Get the implicit join path to the <code>security.security_invoice</code>
     * table.
     */
    public SecurityInvoicePath securityInvoice() {
        if (_securityInvoice == null)
            _securityInvoice = new SecurityInvoicePath(this, Keys.FK1_PAYMENT_INVOICE_ID, null);

        return _securityInvoice;
    }

    @Override
    public SecurityPayment as(String alias) {
        return new SecurityPayment(DSL.name(alias), this);
    }

    @Override
    public SecurityPayment as(Name alias) {
        return new SecurityPayment(alias, this);
    }

    @Override
    public SecurityPayment as(Table<?> alias) {
        return new SecurityPayment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityPayment rename(String name) {
        return new SecurityPayment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityPayment rename(Name name) {
        return new SecurityPayment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityPayment rename(Table<?> name) {
        return new SecurityPayment(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPayment where(Condition condition) {
        return new SecurityPayment(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPayment where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPayment where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPayment where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityPayment where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityPayment where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityPayment where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityPayment where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPayment whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPayment whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
