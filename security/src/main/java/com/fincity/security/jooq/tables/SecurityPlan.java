/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables;


import com.fincity.security.jooq.Keys;
import com.fincity.security.jooq.Security;
import com.fincity.security.jooq.enums.SecurityPlanStatus;
import com.fincity.security.jooq.tables.SecurityApp.SecurityAppPath;
import com.fincity.security.jooq.tables.SecurityClient.SecurityClientPath;
import com.fincity.security.jooq.tables.SecurityClientPlan.SecurityClientPlanPath;
import com.fincity.security.jooq.tables.SecurityInvoice.SecurityInvoicePath;
import com.fincity.security.jooq.tables.SecurityPlanApp.SecurityPlanAppPath;
import com.fincity.security.jooq.tables.SecurityPlanCycle.SecurityPlanCyclePath;
import com.fincity.security.jooq.tables.SecurityPlanLimit.SecurityPlanLimitPath;
import com.fincity.security.jooq.tables.records.SecurityPlanRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SecurityPlan extends TableImpl<SecurityPlanRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>security.security_plan</code>
     */
    public static final SecurityPlan SECURITY_PLAN = new SecurityPlan();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityPlanRecord> getRecordType() {
        return SecurityPlanRecord.class;
    }

    /**
     * The column <code>security.security_plan.ID</code>. Primary key
     */
    public final TableField<SecurityPlanRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>security.security_plan.CLIENT_ID</code>. URL Client ID
     * for which this plan belongs to
     */
    public final TableField<SecurityPlanRecord, ULong> CLIENT_ID = createField(DSL.name("CLIENT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "URL Client ID for which this plan belongs to");

    /**
     * The column <code>security.security_plan.NAME</code>. Name of the package
     */
    public final TableField<SecurityPlanRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(256).nullable(false), this, "Name of the package");

    /**
     * The column <code>security.security_plan.DESCRIPTION</code>. Description
     * of the package
     */
    public final TableField<SecurityPlanRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "Description of the package");

    /**
     * The column <code>security.security_plan.FEATURES</code>. Features of the
     * plan
     */
    public final TableField<SecurityPlanRecord, String> FEATURES = createField(DSL.name("FEATURES"), SQLDataType.CLOB, this, "Features of the plan");

    /**
     * The column <code>security.security_plan.STATUS</code>. Status of the plan
     */
    public final TableField<SecurityPlanRecord, SecurityPlanStatus> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(8).nullable(false).defaultValue(DSL.inline("ACTIVE", SQLDataType.VARCHAR)).asEnumDataType(SecurityPlanStatus.class), this, "Status of the plan");

    /**
     * The column <code>security.security_plan.CREATED_BY</code>. ID of the user
     * who created this row
     */
    public final TableField<SecurityPlanRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row");

    /**
     * The column <code>security.security_plan.CREATED_AT</code>. Time when this
     * row is created
     */
    public final TableField<SecurityPlanRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created");

    /**
     * The column <code>security.security_plan.UPDATED_BY</code>. ID of the user
     * who updated this row
     */
    public final TableField<SecurityPlanRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row");

    /**
     * The column <code>security.security_plan.UPDATED_AT</code>. Time when this
     * row is updated
     */
    public final TableField<SecurityPlanRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated");

    private SecurityPlan(Name alias, Table<SecurityPlanRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SecurityPlan(Name alias, Table<SecurityPlanRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>security.security_plan</code> table reference
     */
    public SecurityPlan(String alias) {
        this(DSL.name(alias), SECURITY_PLAN);
    }

    /**
     * Create an aliased <code>security.security_plan</code> table reference
     */
    public SecurityPlan(Name alias) {
        this(alias, SECURITY_PLAN);
    }

    /**
     * Create a <code>security.security_plan</code> table reference
     */
    public SecurityPlan() {
        this(DSL.name("security_plan"), null);
    }

    public <O extends Record> SecurityPlan(Table<O> path, ForeignKey<O, SecurityPlanRecord> childPath, InverseForeignKey<O, SecurityPlanRecord> parentPath) {
        super(path, childPath, parentPath, SECURITY_PLAN);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SecurityPlanPath extends SecurityPlan implements Path<SecurityPlanRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SecurityPlanPath(Table<O> path, ForeignKey<O, SecurityPlanRecord> childPath, InverseForeignKey<O, SecurityPlanRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SecurityPlanPath(Name alias, Table<SecurityPlanRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SecurityPlanPath as(String alias) {
            return new SecurityPlanPath(DSL.name(alias), this);
        }

        @Override
        public SecurityPlanPath as(Name alias) {
            return new SecurityPlanPath(alias, this);
        }

        @Override
        public SecurityPlanPath as(Table<?> alias) {
            return new SecurityPlanPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public Identity<SecurityPlanRecord, ULong> getIdentity() {
        return (Identity<SecurityPlanRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecurityPlanRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_PLAN_PRIMARY;
    }

    @Override
    public List<UniqueKey<SecurityPlanRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SECURITY_PLAN_UK2_PLAN_NAME_CLIENT_ID);
    }

    @Override
    public List<ForeignKey<SecurityPlanRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_PLAN_CLIENT_ID);
    }

    private transient SecurityClientPath _securityClient;

    /**
     * Get the implicit join path to the <code>security.security_client</code>
     * table.
     */
    public SecurityClientPath securityClient() {
        if (_securityClient == null)
            _securityClient = new SecurityClientPath(this, Keys.FK1_PLAN_CLIENT_ID, null);

        return _securityClient;
    }

    private transient SecurityPlanAppPath _securityPlanApp;

    /**
     * Get the implicit to-many join path to the
     * <code>security.security_plan_app</code> table
     */
    public SecurityPlanAppPath securityPlanApp() {
        if (_securityPlanApp == null)
            _securityPlanApp = new SecurityPlanAppPath(this, null, Keys.FK1_PLAN_APP_PLAN_ID.getInverseKey());

        return _securityPlanApp;
    }

    private transient SecurityPlanCyclePath _securityPlanCycle;

    /**
     * Get the implicit to-many join path to the
     * <code>security.security_plan_cycle</code> table
     */
    public SecurityPlanCyclePath securityPlanCycle() {
        if (_securityPlanCycle == null)
            _securityPlanCycle = new SecurityPlanCyclePath(this, null, Keys.FK1_PLAN_CYCLE_PLAN_ID.getInverseKey());

        return _securityPlanCycle;
    }

    private transient SecurityPlanLimitPath _securityPlanLimit;

    /**
     * Get the implicit to-many join path to the
     * <code>security.security_plan_limit</code> table
     */
    public SecurityPlanLimitPath securityPlanLimit() {
        if (_securityPlanLimit == null)
            _securityPlanLimit = new SecurityPlanLimitPath(this, null, Keys.FK1_PLAN_LIMIT_PLAN_ID.getInverseKey());

        return _securityPlanLimit;
    }

    private transient SecurityClientPlanPath _securityClientPlan;

    /**
     * Get the implicit to-many join path to the
     * <code>security.security_client_plan</code> table
     */
    public SecurityClientPlanPath securityClientPlan() {
        if (_securityClientPlan == null)
            _securityClientPlan = new SecurityClientPlanPath(this, null, Keys.FK2_CLIENT_PLAN_PLAN_ID.getInverseKey());

        return _securityClientPlan;
    }

    private transient SecurityInvoicePath _securityInvoice;

    /**
     * Get the implicit to-many join path to the
     * <code>security.security_invoice</code> table
     */
    public SecurityInvoicePath securityInvoice() {
        if (_securityInvoice == null)
            _securityInvoice = new SecurityInvoicePath(this, null, Keys.FK2_INVOICE_PLAN_ID.getInverseKey());

        return _securityInvoice;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>security.security_app</code> table
     */
    public SecurityAppPath securityApp() {
        return securityPlanApp().securityApp();
    }

    @Override
    public SecurityPlan as(String alias) {
        return new SecurityPlan(DSL.name(alias), this);
    }

    @Override
    public SecurityPlan as(Name alias) {
        return new SecurityPlan(alias, this);
    }

    @Override
    public SecurityPlan as(Table<?> alias) {
        return new SecurityPlan(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityPlan rename(String name) {
        return new SecurityPlan(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityPlan rename(Name name) {
        return new SecurityPlan(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityPlan rename(Table<?> name) {
        return new SecurityPlan(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPlan where(Condition condition) {
        return new SecurityPlan(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPlan where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPlan where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPlan where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityPlan where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityPlan where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityPlan where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityPlan where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPlan whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPlan whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
