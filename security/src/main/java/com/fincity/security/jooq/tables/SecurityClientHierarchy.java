/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables;


import com.fincity.security.jooq.Keys;
import com.fincity.security.jooq.Security;
import com.fincity.security.jooq.tables.SecurityClient.SecurityClientPath;
import com.fincity.security.jooq.tables.records.SecurityClientHierarchyRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SecurityClientHierarchy extends TableImpl<SecurityClientHierarchyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>security.security_client_hierarchy</code>
     */
    public static final SecurityClientHierarchy SECURITY_CLIENT_HIERARCHY = new SecurityClientHierarchy();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityClientHierarchyRecord> getRecordType() {
        return SecurityClientHierarchyRecord.class;
    }

    /**
     * The column <code>security.security_client_hierarchy.ID</code>. Primary
     * key
     */
    public final TableField<SecurityClientHierarchyRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>security.security_client_hierarchy.CLIENT_ID</code>.
     * Client ID
     */
    public final TableField<SecurityClientHierarchyRecord, ULong> CLIENT_ID = createField(DSL.name("CLIENT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Client ID");

    /**
     * The column
     * <code>security.security_client_hierarchy.MANAGE_CLIENT_LEVEL_0</code>.
     * Client ID that manages CLIENT_ID
     */
    public final TableField<SecurityClientHierarchyRecord, ULong> MANAGE_CLIENT_LEVEL_0 = createField(DSL.name("MANAGE_CLIENT_LEVEL_0"), SQLDataType.BIGINTUNSIGNED, this, "Client ID that manages CLIENT_ID");

    /**
     * The column
     * <code>security.security_client_hierarchy.MANAGE_CLIENT_LEVEL_1</code>.
     * Client ID that manages MANAGE_CLIENT_LEVEL_0
     */
    public final TableField<SecurityClientHierarchyRecord, ULong> MANAGE_CLIENT_LEVEL_1 = createField(DSL.name("MANAGE_CLIENT_LEVEL_1"), SQLDataType.BIGINTUNSIGNED, this, "Client ID that manages MANAGE_CLIENT_LEVEL_0");

    /**
     * The column
     * <code>security.security_client_hierarchy.MANAGE_CLIENT_LEVEL_2</code>.
     * Client ID that manages MANAGE_CLIENT_LEVEL_1
     */
    public final TableField<SecurityClientHierarchyRecord, ULong> MANAGE_CLIENT_LEVEL_2 = createField(DSL.name("MANAGE_CLIENT_LEVEL_2"), SQLDataType.BIGINTUNSIGNED, this, "Client ID that manages MANAGE_CLIENT_LEVEL_1");

    /**
     * The column
     * <code>security.security_client_hierarchy.MANAGE_CLIENT_LEVEL_3</code>.
     * Client ID that manages MANAGE_CLIENT_LEVEL_2
     */
    public final TableField<SecurityClientHierarchyRecord, ULong> MANAGE_CLIENT_LEVEL_3 = createField(DSL.name("MANAGE_CLIENT_LEVEL_3"), SQLDataType.BIGINTUNSIGNED, this, "Client ID that manages MANAGE_CLIENT_LEVEL_2");

    /**
     * The column <code>security.security_client_hierarchy.CREATED_BY</code>. ID
     * of the user who created this row
     */
    public final TableField<SecurityClientHierarchyRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row");

    /**
     * The column <code>security.security_client_hierarchy.CREATED_AT</code>.
     * Time when this row is created
     */
    public final TableField<SecurityClientHierarchyRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created");

    /**
     * The column <code>security.security_client_hierarchy.UPDATED_BY</code>. ID
     * of the user who last updated this row
     */
    public final TableField<SecurityClientHierarchyRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who last updated this row");

    /**
     * The column <code>security.security_client_hierarchy.UPDATED_AT</code>.
     * Time when this row is last updated
     */
    public final TableField<SecurityClientHierarchyRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is last updated");

    private SecurityClientHierarchy(Name alias, Table<SecurityClientHierarchyRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SecurityClientHierarchy(Name alias, Table<SecurityClientHierarchyRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>security.security_client_hierarchy</code> table
     * reference
     */
    public SecurityClientHierarchy(String alias) {
        this(DSL.name(alias), SECURITY_CLIENT_HIERARCHY);
    }

    /**
     * Create an aliased <code>security.security_client_hierarchy</code> table
     * reference
     */
    public SecurityClientHierarchy(Name alias) {
        this(alias, SECURITY_CLIENT_HIERARCHY);
    }

    /**
     * Create a <code>security.security_client_hierarchy</code> table reference
     */
    public SecurityClientHierarchy() {
        this(DSL.name("security_client_hierarchy"), null);
    }

    public <O extends Record> SecurityClientHierarchy(Table<O> path, ForeignKey<O, SecurityClientHierarchyRecord> childPath, InverseForeignKey<O, SecurityClientHierarchyRecord> parentPath) {
        super(path, childPath, parentPath, SECURITY_CLIENT_HIERARCHY);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SecurityClientHierarchyPath extends SecurityClientHierarchy implements Path<SecurityClientHierarchyRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SecurityClientHierarchyPath(Table<O> path, ForeignKey<O, SecurityClientHierarchyRecord> childPath, InverseForeignKey<O, SecurityClientHierarchyRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SecurityClientHierarchyPath(Name alias, Table<SecurityClientHierarchyRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SecurityClientHierarchyPath as(String alias) {
            return new SecurityClientHierarchyPath(DSL.name(alias), this);
        }

        @Override
        public SecurityClientHierarchyPath as(Name alias) {
            return new SecurityClientHierarchyPath(alias, this);
        }

        @Override
        public SecurityClientHierarchyPath as(Table<?> alias) {
            return new SecurityClientHierarchyPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public Identity<SecurityClientHierarchyRecord, ULong> getIdentity() {
        return (Identity<SecurityClientHierarchyRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecurityClientHierarchyRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_CLIENT_HIERARCHY_PRIMARY;
    }

    @Override
    public List<UniqueKey<SecurityClientHierarchyRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SECURITY_CLIENT_HIERARCHY_UK1_SECURITY_CLIENT_HIERARCHY);
    }

    @Override
    public List<ForeignKey<SecurityClientHierarchyRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_CLIENT_HIERARCHY_CLIENT_ID, Keys.FK1_CLIENT_HIERARCHY_LEVEL_0, Keys.FK1_CLIENT_HIERARCHY_LEVEL_1, Keys.FK1_CLIENT_HIERARCHY_LEVEL_2, Keys.FK1_CLIENT_HIERARCHY_LEVEL_3);
    }

    private transient SecurityClientPath _fk1ClientHierarchyClientId;

    /**
     * Get the implicit join path to the <code>security.security_client</code>
     * table, via the <code>FK1_CLIENT_HIERARCHY_CLIENT_ID</code> key.
     */
    public SecurityClientPath fk1ClientHierarchyClientId() {
        if (_fk1ClientHierarchyClientId == null)
            _fk1ClientHierarchyClientId = new SecurityClientPath(this, Keys.FK1_CLIENT_HIERARCHY_CLIENT_ID, null);

        return _fk1ClientHierarchyClientId;
    }

    private transient SecurityClientPath _fk1ClientHierarchyLevel_0;

    /**
     * Get the implicit join path to the <code>security.security_client</code>
     * table, via the <code>FK1_CLIENT_HIERARCHY_LEVEL_0</code> key.
     */
    public SecurityClientPath fk1ClientHierarchyLevel_0() {
        if (_fk1ClientHierarchyLevel_0 == null)
            _fk1ClientHierarchyLevel_0 = new SecurityClientPath(this, Keys.FK1_CLIENT_HIERARCHY_LEVEL_0, null);

        return _fk1ClientHierarchyLevel_0;
    }

    private transient SecurityClientPath _fk1ClientHierarchyLevel_1;

    /**
     * Get the implicit join path to the <code>security.security_client</code>
     * table, via the <code>FK1_CLIENT_HIERARCHY_LEVEL_1</code> key.
     */
    public SecurityClientPath fk1ClientHierarchyLevel_1() {
        if (_fk1ClientHierarchyLevel_1 == null)
            _fk1ClientHierarchyLevel_1 = new SecurityClientPath(this, Keys.FK1_CLIENT_HIERARCHY_LEVEL_1, null);

        return _fk1ClientHierarchyLevel_1;
    }

    private transient SecurityClientPath _fk1ClientHierarchyLevel_2;

    /**
     * Get the implicit join path to the <code>security.security_client</code>
     * table, via the <code>FK1_CLIENT_HIERARCHY_LEVEL_2</code> key.
     */
    public SecurityClientPath fk1ClientHierarchyLevel_2() {
        if (_fk1ClientHierarchyLevel_2 == null)
            _fk1ClientHierarchyLevel_2 = new SecurityClientPath(this, Keys.FK1_CLIENT_HIERARCHY_LEVEL_2, null);

        return _fk1ClientHierarchyLevel_2;
    }

    private transient SecurityClientPath _fk1ClientHierarchyLevel_3;

    /**
     * Get the implicit join path to the <code>security.security_client</code>
     * table, via the <code>FK1_CLIENT_HIERARCHY_LEVEL_3</code> key.
     */
    public SecurityClientPath fk1ClientHierarchyLevel_3() {
        if (_fk1ClientHierarchyLevel_3 == null)
            _fk1ClientHierarchyLevel_3 = new SecurityClientPath(this, Keys.FK1_CLIENT_HIERARCHY_LEVEL_3, null);

        return _fk1ClientHierarchyLevel_3;
    }

    @Override
    public SecurityClientHierarchy as(String alias) {
        return new SecurityClientHierarchy(DSL.name(alias), this);
    }

    @Override
    public SecurityClientHierarchy as(Name alias) {
        return new SecurityClientHierarchy(alias, this);
    }

    @Override
    public SecurityClientHierarchy as(Table<?> alias) {
        return new SecurityClientHierarchy(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityClientHierarchy rename(String name) {
        return new SecurityClientHierarchy(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityClientHierarchy rename(Name name) {
        return new SecurityClientHierarchy(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityClientHierarchy rename(Table<?> name) {
        return new SecurityClientHierarchy(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityClientHierarchy where(Condition condition) {
        return new SecurityClientHierarchy(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityClientHierarchy where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityClientHierarchy where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityClientHierarchy where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityClientHierarchy where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityClientHierarchy where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityClientHierarchy where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityClientHierarchy where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityClientHierarchy whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityClientHierarchy whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
