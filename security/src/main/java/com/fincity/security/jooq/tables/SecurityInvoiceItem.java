/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables;


import com.fincity.security.jooq.Keys;
import com.fincity.security.jooq.Security;
import com.fincity.security.jooq.tables.SecurityInvoice.SecurityInvoicePath;
import com.fincity.security.jooq.tables.records.SecurityInvoiceItemRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SecurityInvoiceItem extends TableImpl<SecurityInvoiceItemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>security.security_invoice_item</code>
     */
    public static final SecurityInvoiceItem SECURITY_INVOICE_ITEM = new SecurityInvoiceItem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityInvoiceItemRecord> getRecordType() {
        return SecurityInvoiceItemRecord.class;
    }

    /**
     * The column <code>security.security_invoice_item.ID</code>. Primary key
     */
    public final TableField<SecurityInvoiceItemRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>security.security_invoice_item.INVOICE_ID</code>.
     * Invoice ID
     */
    public final TableField<SecurityInvoiceItemRecord, ULong> INVOICE_ID = createField(DSL.name("INVOICE_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Invoice ID");

    /**
     * The column <code>security.security_invoice_item.ITEM_NAME</code>. Item
     * name
     */
    public final TableField<SecurityInvoiceItemRecord, String> ITEM_NAME = createField(DSL.name("ITEM_NAME"), SQLDataType.VARCHAR(256).nullable(false), this, "Item name");

    /**
     * The column <code>security.security_invoice_item.ITEM_DESCRIPTION</code>.
     * Item description
     */
    public final TableField<SecurityInvoiceItemRecord, String> ITEM_DESCRIPTION = createField(DSL.name("ITEM_DESCRIPTION"), SQLDataType.CLOB, this, "Item description");

    /**
     * The column <code>security.security_invoice_item.ITEM_AMOUNT</code>. Item
     * amount
     */
    public final TableField<SecurityInvoiceItemRecord, BigDecimal> ITEM_AMOUNT = createField(DSL.name("ITEM_AMOUNT"), SQLDataType.DECIMAL(10, 2).nullable(false), this, "Item amount");

    /**
     * The column <code>security.security_invoice_item.ITEM_TAX1</code>. Item
     * tax1
     */
    public final TableField<SecurityInvoiceItemRecord, BigDecimal> ITEM_TAX1 = createField(DSL.name("ITEM_TAX1"), SQLDataType.DECIMAL(10, 2), this, "Item tax1");

    /**
     * The column <code>security.security_invoice_item.ITEM_TAX2</code>. Item
     * tax2
     */
    public final TableField<SecurityInvoiceItemRecord, BigDecimal> ITEM_TAX2 = createField(DSL.name("ITEM_TAX2"), SQLDataType.DECIMAL(10, 2), this, "Item tax2");

    /**
     * The column <code>security.security_invoice_item.ITEM_TAX3</code>. Item
     * tax3
     */
    public final TableField<SecurityInvoiceItemRecord, BigDecimal> ITEM_TAX3 = createField(DSL.name("ITEM_TAX3"), SQLDataType.DECIMAL(10, 2), this, "Item tax3");

    /**
     * The column <code>security.security_invoice_item.ITEM_TAX4</code>. Item
     * tax4
     */
    public final TableField<SecurityInvoiceItemRecord, BigDecimal> ITEM_TAX4 = createField(DSL.name("ITEM_TAX4"), SQLDataType.DECIMAL(10, 2), this, "Item tax4");

    /**
     * The column <code>security.security_invoice_item.ITEM_TAX5</code>. Item
     * tax5
     */
    public final TableField<SecurityInvoiceItemRecord, BigDecimal> ITEM_TAX5 = createField(DSL.name("ITEM_TAX5"), SQLDataType.DECIMAL(10, 2), this, "Item tax5");

    private SecurityInvoiceItem(Name alias, Table<SecurityInvoiceItemRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SecurityInvoiceItem(Name alias, Table<SecurityInvoiceItemRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>security.security_invoice_item</code> table
     * reference
     */
    public SecurityInvoiceItem(String alias) {
        this(DSL.name(alias), SECURITY_INVOICE_ITEM);
    }

    /**
     * Create an aliased <code>security.security_invoice_item</code> table
     * reference
     */
    public SecurityInvoiceItem(Name alias) {
        this(alias, SECURITY_INVOICE_ITEM);
    }

    /**
     * Create a <code>security.security_invoice_item</code> table reference
     */
    public SecurityInvoiceItem() {
        this(DSL.name("security_invoice_item"), null);
    }

    public <O extends Record> SecurityInvoiceItem(Table<O> path, ForeignKey<O, SecurityInvoiceItemRecord> childPath, InverseForeignKey<O, SecurityInvoiceItemRecord> parentPath) {
        super(path, childPath, parentPath, SECURITY_INVOICE_ITEM);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SecurityInvoiceItemPath extends SecurityInvoiceItem implements Path<SecurityInvoiceItemRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SecurityInvoiceItemPath(Table<O> path, ForeignKey<O, SecurityInvoiceItemRecord> childPath, InverseForeignKey<O, SecurityInvoiceItemRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SecurityInvoiceItemPath(Name alias, Table<SecurityInvoiceItemRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SecurityInvoiceItemPath as(String alias) {
            return new SecurityInvoiceItemPath(DSL.name(alias), this);
        }

        @Override
        public SecurityInvoiceItemPath as(Name alias) {
            return new SecurityInvoiceItemPath(alias, this);
        }

        @Override
        public SecurityInvoiceItemPath as(Table<?> alias) {
            return new SecurityInvoiceItemPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public Identity<SecurityInvoiceItemRecord, ULong> getIdentity() {
        return (Identity<SecurityInvoiceItemRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecurityInvoiceItemRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_INVOICE_ITEM_PRIMARY;
    }

    @Override
    public List<UniqueKey<SecurityInvoiceItemRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SECURITY_INVOICE_ITEM_UK1_INVOICE_ITEM_INVOICE_ID_ITEM_NAME);
    }

    @Override
    public List<ForeignKey<SecurityInvoiceItemRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_INVOICE_ITEM_INVOICE_ID);
    }

    private transient SecurityInvoicePath _securityInvoice;

    /**
     * Get the implicit join path to the <code>security.security_invoice</code>
     * table.
     */
    public SecurityInvoicePath securityInvoice() {
        if (_securityInvoice == null)
            _securityInvoice = new SecurityInvoicePath(this, Keys.FK1_INVOICE_ITEM_INVOICE_ID, null);

        return _securityInvoice;
    }

    @Override
    public SecurityInvoiceItem as(String alias) {
        return new SecurityInvoiceItem(DSL.name(alias), this);
    }

    @Override
    public SecurityInvoiceItem as(Name alias) {
        return new SecurityInvoiceItem(alias, this);
    }

    @Override
    public SecurityInvoiceItem as(Table<?> alias) {
        return new SecurityInvoiceItem(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityInvoiceItem rename(String name) {
        return new SecurityInvoiceItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityInvoiceItem rename(Name name) {
        return new SecurityInvoiceItem(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityInvoiceItem rename(Table<?> name) {
        return new SecurityInvoiceItem(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityInvoiceItem where(Condition condition) {
        return new SecurityInvoiceItem(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityInvoiceItem where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityInvoiceItem where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityInvoiceItem where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityInvoiceItem where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityInvoiceItem where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityInvoiceItem where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityInvoiceItem where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityInvoiceItem whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityInvoiceItem whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
