/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables;


import com.fincity.security.jooq.Keys;
import com.fincity.security.jooq.Security;
import com.fincity.security.jooq.enums.SecurityUserRequestStatus;
import com.fincity.security.jooq.tables.SecurityApp.SecurityAppPath;
import com.fincity.security.jooq.tables.SecurityClient.SecurityClientPath;
import com.fincity.security.jooq.tables.SecurityUser.SecurityUserPath;
import com.fincity.security.jooq.tables.records.SecurityUserRequestRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SecurityUserRequest extends TableImpl<SecurityUserRequestRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>security.security_user_request</code>
     */
    public static final SecurityUserRequest SECURITY_USER_REQUEST = new SecurityUserRequest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityUserRequestRecord> getRecordType() {
        return SecurityUserRequestRecord.class;
    }

    /**
     * The column <code>security.security_user_request.ID</code>. Primary key
     */
    public final TableField<SecurityUserRequestRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>security.security_user_request.REQUEST_ID</code>.
     * Request id for the user request
     */
    public final TableField<SecurityUserRequestRecord, String> REQUEST_ID = createField(DSL.name("REQUEST_ID"), SQLDataType.VARCHAR(20).nullable(false), this, "Request id for the user request");

    /**
     * The column <code>security.security_user_request.CLIENT_ID</code>. Client
     * id for the user request
     */
    public final TableField<SecurityUserRequestRecord, ULong> CLIENT_ID = createField(DSL.name("CLIENT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Client id for the user request");

    /**
     * The column <code>security.security_user_request.USER_ID</code>. User id
     * for the user request
     */
    public final TableField<SecurityUserRequestRecord, ULong> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "User id for the user request");

    /**
     * The column <code>security.security_user_request.APP_ID</code>. App id for
     * the user request
     */
    public final TableField<SecurityUserRequestRecord, ULong> APP_ID = createField(DSL.name("APP_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "App id for the user request");

    /**
     * The column <code>security.security_user_request.STATUS</code>. Status of
     * the user request
     */
    public final TableField<SecurityUserRequestRecord, SecurityUserRequestStatus> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(8).defaultValue(DSL.inline("PENDING", SQLDataType.VARCHAR)).asEnumDataType(SecurityUserRequestStatus.class), this, "Status of the user request");

    /**
     * The column <code>security.security_user_request.CREATED_BY</code>. ID of
     * the user who created this row
     */
    public final TableField<SecurityUserRequestRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row");

    /**
     * The column <code>security.security_user_request.CREATED_AT</code>. Time
     * when this row is created
     */
    public final TableField<SecurityUserRequestRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created");

    /**
     * The column <code>security.security_user_request.UPDATED_BY</code>. ID of
     * the user who last updated this row
     */
    public final TableField<SecurityUserRequestRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who last updated this row");

    /**
     * The column <code>security.security_user_request.UPDATED_AT</code>. Time
     * when this row is last updated
     */
    public final TableField<SecurityUserRequestRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is last updated");

    private SecurityUserRequest(Name alias, Table<SecurityUserRequestRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SecurityUserRequest(Name alias, Table<SecurityUserRequestRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>security.security_user_request</code> table
     * reference
     */
    public SecurityUserRequest(String alias) {
        this(DSL.name(alias), SECURITY_USER_REQUEST);
    }

    /**
     * Create an aliased <code>security.security_user_request</code> table
     * reference
     */
    public SecurityUserRequest(Name alias) {
        this(alias, SECURITY_USER_REQUEST);
    }

    /**
     * Create a <code>security.security_user_request</code> table reference
     */
    public SecurityUserRequest() {
        this(DSL.name("security_user_request"), null);
    }

    public <O extends Record> SecurityUserRequest(Table<O> path, ForeignKey<O, SecurityUserRequestRecord> childPath, InverseForeignKey<O, SecurityUserRequestRecord> parentPath) {
        super(path, childPath, parentPath, SECURITY_USER_REQUEST);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SecurityUserRequestPath extends SecurityUserRequest implements Path<SecurityUserRequestRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SecurityUserRequestPath(Table<O> path, ForeignKey<O, SecurityUserRequestRecord> childPath, InverseForeignKey<O, SecurityUserRequestRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SecurityUserRequestPath(Name alias, Table<SecurityUserRequestRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SecurityUserRequestPath as(String alias) {
            return new SecurityUserRequestPath(DSL.name(alias), this);
        }

        @Override
        public SecurityUserRequestPath as(Name alias) {
            return new SecurityUserRequestPath(alias, this);
        }

        @Override
        public SecurityUserRequestPath as(Table<?> alias) {
            return new SecurityUserRequestPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public Identity<SecurityUserRequestRecord, ULong> getIdentity() {
        return (Identity<SecurityUserRequestRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecurityUserRequestRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_USER_REQUEST_PRIMARY;
    }

    @Override
    public List<UniqueKey<SecurityUserRequestRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SECURITY_USER_REQUEST_REQUEST_ID);
    }

    @Override
    public List<ForeignKey<SecurityUserRequestRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_SECURITY_USER_REQUEST_APP, Keys.FK_SECURITY_USER_REQUEST_CLIENT, Keys.FK_SECURITY_USER_REQUEST_USER);
    }

    private transient SecurityAppPath _securityApp;

    /**
     * Get the implicit join path to the <code>security.security_app</code>
     * table.
     */
    public SecurityAppPath securityApp() {
        if (_securityApp == null)
            _securityApp = new SecurityAppPath(this, Keys.FK_SECURITY_USER_REQUEST_APP, null);

        return _securityApp;
    }

    private transient SecurityClientPath _securityClient;

    /**
     * Get the implicit join path to the <code>security.security_client</code>
     * table.
     */
    public SecurityClientPath securityClient() {
        if (_securityClient == null)
            _securityClient = new SecurityClientPath(this, Keys.FK_SECURITY_USER_REQUEST_CLIENT, null);

        return _securityClient;
    }

    private transient SecurityUserPath _securityUser;

    /**
     * Get the implicit join path to the <code>security.security_user</code>
     * table.
     */
    public SecurityUserPath securityUser() {
        if (_securityUser == null)
            _securityUser = new SecurityUserPath(this, Keys.FK_SECURITY_USER_REQUEST_USER, null);

        return _securityUser;
    }

    @Override
    public SecurityUserRequest as(String alias) {
        return new SecurityUserRequest(DSL.name(alias), this);
    }

    @Override
    public SecurityUserRequest as(Name alias) {
        return new SecurityUserRequest(alias, this);
    }

    @Override
    public SecurityUserRequest as(Table<?> alias) {
        return new SecurityUserRequest(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityUserRequest rename(String name) {
        return new SecurityUserRequest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityUserRequest rename(Name name) {
        return new SecurityUserRequest(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityUserRequest rename(Table<?> name) {
        return new SecurityUserRequest(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityUserRequest where(Condition condition) {
        return new SecurityUserRequest(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityUserRequest where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityUserRequest where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityUserRequest where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityUserRequest where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityUserRequest where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityUserRequest where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityUserRequest where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityUserRequest whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityUserRequest whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
