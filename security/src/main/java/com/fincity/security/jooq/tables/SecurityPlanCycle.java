/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables;


import com.fincity.security.jooq.Keys;
import com.fincity.security.jooq.Security;
import com.fincity.security.jooq.enums.SecurityPlanCycleStatus;
import com.fincity.security.jooq.tables.SecurityInvoice.SecurityInvoicePath;
import com.fincity.security.jooq.tables.SecurityPlan.SecurityPlanPath;
import com.fincity.security.jooq.tables.records.SecurityPlanCycleRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SecurityPlanCycle extends TableImpl<SecurityPlanCycleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>security.security_plan_cycle</code>
     */
    public static final SecurityPlanCycle SECURITY_PLAN_CYCLE = new SecurityPlanCycle();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityPlanCycleRecord> getRecordType() {
        return SecurityPlanCycleRecord.class;
    }

    /**
     * The column <code>security.security_plan_cycle.ID</code>. Primary key
     */
    public final TableField<SecurityPlanCycleRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>security.security_plan_cycle.NAME</code>. Name of the
     * cycle
     */
    public final TableField<SecurityPlanCycleRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(256).nullable(false), this, "Name of the cycle");

    /**
     * The column <code>security.security_plan_cycle.DESCRIPTION</code>.
     * Description of the cycle
     */
    public final TableField<SecurityPlanCycleRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "Description of the cycle");

    /**
     * The column <code>security.security_plan_cycle.PLAN_ID</code>. Plan ID
     */
    public final TableField<SecurityPlanCycleRecord, ULong> PLAN_ID = createField(DSL.name("PLAN_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Plan ID");

    /**
     * The column <code>security.security_plan_cycle.COST</code>. Cost of the
     * plan
     */
    public final TableField<SecurityPlanCycleRecord, BigDecimal> COST = createField(DSL.name("COST"), SQLDataType.DECIMAL(10, 2).nullable(false), this, "Cost of the plan");

    /**
     * The column <code>security.security_plan_cycle.CURRENCY</code>. Currency
     * of the plan
     */
    public final TableField<SecurityPlanCycleRecord, String> CURRENCY = createField(DSL.name("CURRENCY"), SQLDataType.CHAR(4).nullable(false), this, "Currency of the plan");

    /**
     * The column <code>security.security_plan_cycle.TAX1</code>. Tax1 of the
     * plan
     */
    public final TableField<SecurityPlanCycleRecord, BigDecimal> TAX1 = createField(DSL.name("TAX1"), SQLDataType.DECIMAL(10, 2), this, "Tax1 of the plan");

    /**
     * The column <code>security.security_plan_cycle.TAX1_NAME</code>. Tax1 name
     * of the plan
     */
    public final TableField<SecurityPlanCycleRecord, String> TAX1_NAME = createField(DSL.name("TAX1_NAME"), SQLDataType.VARCHAR(256), this, "Tax1 name of the plan");

    /**
     * The column <code>security.security_plan_cycle.TAX2</code>. Tax2 of the
     * plan
     */
    public final TableField<SecurityPlanCycleRecord, BigDecimal> TAX2 = createField(DSL.name("TAX2"), SQLDataType.DECIMAL(10, 2), this, "Tax2 of the plan");

    /**
     * The column <code>security.security_plan_cycle.TAX2_NAME</code>. Tax2 name
     * of the plan
     */
    public final TableField<SecurityPlanCycleRecord, String> TAX2_NAME = createField(DSL.name("TAX2_NAME"), SQLDataType.VARCHAR(256), this, "Tax2 name of the plan");

    /**
     * The column <code>security.security_plan_cycle.TAX3</code>. Tax3 of the
     * plan
     */
    public final TableField<SecurityPlanCycleRecord, BigDecimal> TAX3 = createField(DSL.name("TAX3"), SQLDataType.DECIMAL(10, 2), this, "Tax3 of the plan");

    /**
     * The column <code>security.security_plan_cycle.TAX3_NAME</code>. Tax3 name
     * of the plan
     */
    public final TableField<SecurityPlanCycleRecord, String> TAX3_NAME = createField(DSL.name("TAX3_NAME"), SQLDataType.VARCHAR(256), this, "Tax3 name of the plan");

    /**
     * The column <code>security.security_plan_cycle.TAX4</code>. Tax4 of the
     * plan
     */
    public final TableField<SecurityPlanCycleRecord, BigDecimal> TAX4 = createField(DSL.name("TAX4"), SQLDataType.DECIMAL(10, 2), this, "Tax4 of the plan");

    /**
     * The column <code>security.security_plan_cycle.TAX4_NAME</code>. Tax4 name
     * of the plan
     */
    public final TableField<SecurityPlanCycleRecord, String> TAX4_NAME = createField(DSL.name("TAX4_NAME"), SQLDataType.VARCHAR(256), this, "Tax4 name of the plan");

    /**
     * The column <code>security.security_plan_cycle.TAX5</code>. Tax5 of the
     * plan
     */
    public final TableField<SecurityPlanCycleRecord, BigDecimal> TAX5 = createField(DSL.name("TAX5"), SQLDataType.DECIMAL(10, 2), this, "Tax5 of the plan");

    /**
     * The column <code>security.security_plan_cycle.TAX5_NAME</code>. Tax5 name
     * of the plan
     */
    public final TableField<SecurityPlanCycleRecord, String> TAX5_NAME = createField(DSL.name("TAX5_NAME"), SQLDataType.VARCHAR(256), this, "Tax5 name of the plan");

    /**
     * The column <code>security.security_plan_cycle.INTERVAL</code>. Interval
     * of the plan in days
     */
    public final TableField<SecurityPlanCycleRecord, Integer> INTERVAL = createField(DSL.name("INTERVAL"), SQLDataType.INTEGER.nullable(false), this, "Interval of the plan in days");

    /**
     * The column <code>security.security_plan_cycle.STATUS</code>. Status of
     * the cycle in a plan
     */
    public final TableField<SecurityPlanCycleRecord, SecurityPlanCycleStatus> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(8).nullable(false).defaultValue(DSL.inline("ACTIVE", SQLDataType.VARCHAR)).asEnumDataType(SecurityPlanCycleStatus.class), this, "Status of the cycle in a plan");

    private SecurityPlanCycle(Name alias, Table<SecurityPlanCycleRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SecurityPlanCycle(Name alias, Table<SecurityPlanCycleRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>security.security_plan_cycle</code> table
     * reference
     */
    public SecurityPlanCycle(String alias) {
        this(DSL.name(alias), SECURITY_PLAN_CYCLE);
    }

    /**
     * Create an aliased <code>security.security_plan_cycle</code> table
     * reference
     */
    public SecurityPlanCycle(Name alias) {
        this(alias, SECURITY_PLAN_CYCLE);
    }

    /**
     * Create a <code>security.security_plan_cycle</code> table reference
     */
    public SecurityPlanCycle() {
        this(DSL.name("security_plan_cycle"), null);
    }

    public <O extends Record> SecurityPlanCycle(Table<O> path, ForeignKey<O, SecurityPlanCycleRecord> childPath, InverseForeignKey<O, SecurityPlanCycleRecord> parentPath) {
        super(path, childPath, parentPath, SECURITY_PLAN_CYCLE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SecurityPlanCyclePath extends SecurityPlanCycle implements Path<SecurityPlanCycleRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SecurityPlanCyclePath(Table<O> path, ForeignKey<O, SecurityPlanCycleRecord> childPath, InverseForeignKey<O, SecurityPlanCycleRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SecurityPlanCyclePath(Name alias, Table<SecurityPlanCycleRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SecurityPlanCyclePath as(String alias) {
            return new SecurityPlanCyclePath(DSL.name(alias), this);
        }

        @Override
        public SecurityPlanCyclePath as(Name alias) {
            return new SecurityPlanCyclePath(alias, this);
        }

        @Override
        public SecurityPlanCyclePath as(Table<?> alias) {
            return new SecurityPlanCyclePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public Identity<SecurityPlanCycleRecord, ULong> getIdentity() {
        return (Identity<SecurityPlanCycleRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecurityPlanCycleRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_PLAN_CYCLE_PRIMARY;
    }

    @Override
    public List<UniqueKey<SecurityPlanCycleRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SECURITY_PLAN_CYCLE_UK1_PLAN_CYCLE_PLAN_ID_NAME);
    }

    @Override
    public List<ForeignKey<SecurityPlanCycleRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_PLAN_CYCLE_PLAN_ID);
    }

    private transient SecurityPlanPath _securityPlan;

    /**
     * Get the implicit join path to the <code>security.security_plan</code>
     * table.
     */
    public SecurityPlanPath securityPlan() {
        if (_securityPlan == null)
            _securityPlan = new SecurityPlanPath(this, Keys.FK1_PLAN_CYCLE_PLAN_ID, null);

        return _securityPlan;
    }

    private transient SecurityInvoicePath _securityInvoice;

    /**
     * Get the implicit to-many join path to the
     * <code>security.security_invoice</code> table
     */
    public SecurityInvoicePath securityInvoice() {
        if (_securityInvoice == null)
            _securityInvoice = new SecurityInvoicePath(this, null, Keys.FK3_INVOICE_CYCLE_ID.getInverseKey());

        return _securityInvoice;
    }

    @Override
    public SecurityPlanCycle as(String alias) {
        return new SecurityPlanCycle(DSL.name(alias), this);
    }

    @Override
    public SecurityPlanCycle as(Name alias) {
        return new SecurityPlanCycle(alias, this);
    }

    @Override
    public SecurityPlanCycle as(Table<?> alias) {
        return new SecurityPlanCycle(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityPlanCycle rename(String name) {
        return new SecurityPlanCycle(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityPlanCycle rename(Name name) {
        return new SecurityPlanCycle(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityPlanCycle rename(Table<?> name) {
        return new SecurityPlanCycle(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPlanCycle where(Condition condition) {
        return new SecurityPlanCycle(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPlanCycle where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPlanCycle where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPlanCycle where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityPlanCycle where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityPlanCycle where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityPlanCycle where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityPlanCycle where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPlanCycle whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPlanCycle whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
