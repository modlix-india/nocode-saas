/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables;


import com.fincity.security.jooq.Keys;
import com.fincity.security.jooq.Security;
import com.fincity.security.jooq.tables.SecurityClient.SecurityClientPath;
import com.fincity.security.jooq.tables.SecurityDesignation.SecurityDesignationPath;
import com.fincity.security.jooq.tables.SecurityProfile.SecurityProfilePath;
import com.fincity.security.jooq.tables.records.SecurityUserInviteRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SecurityUserInvite extends TableImpl<SecurityUserInviteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>security.security_user_invite</code>
     */
    public static final SecurityUserInvite SECURITY_USER_INVITE = new SecurityUserInvite();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityUserInviteRecord> getRecordType() {
        return SecurityUserInviteRecord.class;
    }

    /**
     * The column <code>security.security_user_invite.ID</code>. Primary key
     */
    public final TableField<SecurityUserInviteRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>security.security_user_invite.CLIENT_ID</code>. Client
     * id for the user to be created in
     */
    public final TableField<SecurityUserInviteRecord, ULong> CLIENT_ID = createField(DSL.name("CLIENT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Client id for the user to be created in");

    /**
     * The column <code>security.security_user_invite.USER_NAME</code>. User
     * Name to login
     */
    public final TableField<SecurityUserInviteRecord, String> USER_NAME = createField(DSL.name("USER_NAME"), SQLDataType.CHAR(32), this, "User Name to login");

    /**
     * The column <code>security.security_user_invite.EMAIL_ID</code>. Email ID
     * to login
     */
    public final TableField<SecurityUserInviteRecord, String> EMAIL_ID = createField(DSL.name("EMAIL_ID"), SQLDataType.VARCHAR(320), this, "Email ID to login");

    /**
     * The column <code>security.security_user_invite.PHONE_NUMBER</code>. Phone
     * Number to login
     */
    public final TableField<SecurityUserInviteRecord, String> PHONE_NUMBER = createField(DSL.name("PHONE_NUMBER"), SQLDataType.CHAR(32), this, "Phone Number to login");

    /**
     * The column <code>security.security_user_invite.FIRST_NAME</code>. First
     * name
     */
    public final TableField<SecurityUserInviteRecord, String> FIRST_NAME = createField(DSL.name("FIRST_NAME"), SQLDataType.VARCHAR(128), this, "First name");

    /**
     * The column <code>security.security_user_invite.LAST_NAME</code>. Last
     * name
     */
    public final TableField<SecurityUserInviteRecord, String> LAST_NAME = createField(DSL.name("LAST_NAME"), SQLDataType.VARCHAR(128), this, "Last name");

    /**
     * The column <code>security.security_user_invite.INVITE_CODE</code>. Unique
     * Invitation Code
     */
    public final TableField<SecurityUserInviteRecord, String> INVITE_CODE = createField(DSL.name("INVITE_CODE"), SQLDataType.CHAR(36).nullable(false), this, "Unique Invitation Code");

    /**
     * The column <code>security.security_user_invite.PROFILE_ID</code>. Profile
     * Id to assign by default
     */
    public final TableField<SecurityUserInviteRecord, ULong> PROFILE_ID = createField(DSL.name("PROFILE_ID"), SQLDataType.BIGINTUNSIGNED, this, "Profile Id to assign by default");

    /**
     * The column <code>security.security_user_invite.DESIGNATION_ID</code>.
     * Designation Id to assign by default
     */
    public final TableField<SecurityUserInviteRecord, ULong> DESIGNATION_ID = createField(DSL.name("DESIGNATION_ID"), SQLDataType.BIGINTUNSIGNED, this, "Designation Id to assign by default");

    /**
     * The column <code>security.security_user_invite.CREATED_BY</code>. ID of
     * the user who created this row
     */
    public final TableField<SecurityUserInviteRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row");

    /**
     * The column <code>security.security_user_invite.CREATED_AT</code>. Time
     * when this row is created
     */
    public final TableField<SecurityUserInviteRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created");

    private SecurityUserInvite(Name alias, Table<SecurityUserInviteRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SecurityUserInvite(Name alias, Table<SecurityUserInviteRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>security.security_user_invite</code> table
     * reference
     */
    public SecurityUserInvite(String alias) {
        this(DSL.name(alias), SECURITY_USER_INVITE);
    }

    /**
     * Create an aliased <code>security.security_user_invite</code> table
     * reference
     */
    public SecurityUserInvite(Name alias) {
        this(alias, SECURITY_USER_INVITE);
    }

    /**
     * Create a <code>security.security_user_invite</code> table reference
     */
    public SecurityUserInvite() {
        this(DSL.name("security_user_invite"), null);
    }

    public <O extends Record> SecurityUserInvite(Table<O> path, ForeignKey<O, SecurityUserInviteRecord> childPath, InverseForeignKey<O, SecurityUserInviteRecord> parentPath) {
        super(path, childPath, parentPath, SECURITY_USER_INVITE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SecurityUserInvitePath extends SecurityUserInvite implements Path<SecurityUserInviteRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SecurityUserInvitePath(Table<O> path, ForeignKey<O, SecurityUserInviteRecord> childPath, InverseForeignKey<O, SecurityUserInviteRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SecurityUserInvitePath(Name alias, Table<SecurityUserInviteRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SecurityUserInvitePath as(String alias) {
            return new SecurityUserInvitePath(DSL.name(alias), this);
        }

        @Override
        public SecurityUserInvitePath as(Name alias) {
            return new SecurityUserInvitePath(alias, this);
        }

        @Override
        public SecurityUserInvitePath as(Table<?> alias) {
            return new SecurityUserInvitePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public Identity<SecurityUserInviteRecord, ULong> getIdentity() {
        return (Identity<SecurityUserInviteRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecurityUserInviteRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_USER_INVITE_PRIMARY;
    }

    @Override
    public List<UniqueKey<SecurityUserInviteRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SECURITY_USER_INVITE_CLIENT_ID, Keys.KEY_SECURITY_USER_INVITE_CLIENT_ID_2, Keys.KEY_SECURITY_USER_INVITE_INVITE_CODE);
    }

    @Override
    public List<ForeignKey<SecurityUserInviteRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_SECURITY_USER_INVITE_CLIENT, Keys.FK_SECURITY_USER_INVITE_DESIGNATION, Keys.FK_SECURITY_USER_INVITE_PROFILE);
    }

    private transient SecurityClientPath _securityClient;

    /**
     * Get the implicit join path to the <code>security.security_client</code>
     * table.
     */
    public SecurityClientPath securityClient() {
        if (_securityClient == null)
            _securityClient = new SecurityClientPath(this, Keys.FK_SECURITY_USER_INVITE_CLIENT, null);

        return _securityClient;
    }

    private transient SecurityDesignationPath _securityDesignation;

    /**
     * Get the implicit join path to the
     * <code>security.security_designation</code> table.
     */
    public SecurityDesignationPath securityDesignation() {
        if (_securityDesignation == null)
            _securityDesignation = new SecurityDesignationPath(this, Keys.FK_SECURITY_USER_INVITE_DESIGNATION, null);

        return _securityDesignation;
    }

    private transient SecurityProfilePath _securityProfile;

    /**
     * Get the implicit join path to the <code>security.security_profile</code>
     * table.
     */
    public SecurityProfilePath securityProfile() {
        if (_securityProfile == null)
            _securityProfile = new SecurityProfilePath(this, Keys.FK_SECURITY_USER_INVITE_PROFILE, null);

        return _securityProfile;
    }

    @Override
    public SecurityUserInvite as(String alias) {
        return new SecurityUserInvite(DSL.name(alias), this);
    }

    @Override
    public SecurityUserInvite as(Name alias) {
        return new SecurityUserInvite(alias, this);
    }

    @Override
    public SecurityUserInvite as(Table<?> alias) {
        return new SecurityUserInvite(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityUserInvite rename(String name) {
        return new SecurityUserInvite(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityUserInvite rename(Name name) {
        return new SecurityUserInvite(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityUserInvite rename(Table<?> name) {
        return new SecurityUserInvite(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityUserInvite where(Condition condition) {
        return new SecurityUserInvite(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityUserInvite where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityUserInvite where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityUserInvite where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityUserInvite where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityUserInvite where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityUserInvite where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityUserInvite where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityUserInvite whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityUserInvite whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
