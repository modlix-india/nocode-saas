/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables.records;


import com.fincity.security.jooq.enums.SecurityClientOtpPolicyTargetType;
import com.fincity.security.jooq.tables.SecurityClientOtpPolicy;

import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;
import org.jooq.types.UShort;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SecurityClientOtpPolicyRecord extends UpdatableRecordImpl<SecurityClientOtpPolicyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>security.security_client_otp_policy.ID</code>. Primary
     * key, unique identifier for each OTP policy entry
     */
    public SecurityClientOtpPolicyRecord setId(ULong value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>security.security_client_otp_policy.ID</code>. Primary
     * key, unique identifier for each OTP policy entry
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>security.security_client_otp_policy.CLIENT_ID</code>.
     * Identifier for the client to which this OTP policy belongs. References
     * security_client table
     */
    public SecurityClientOtpPolicyRecord setClientId(ULong value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>security.security_client_otp_policy.CLIENT_ID</code>.
     * Identifier for the client to which this OTP policy belongs. References
     * security_client table
     */
    public ULong getClientId() {
        return (ULong) get(1);
    }

    /**
     * Setter for <code>security.security_client_otp_policy.APP_ID</code>.
     * Identifier for the application to which this OTP policy belongs.
     * References security_app table
     */
    public SecurityClientOtpPolicyRecord setAppId(ULong value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>security.security_client_otp_policy.APP_ID</code>.
     * Identifier for the application to which this OTP policy belongs.
     * References security_app table
     */
    public ULong getAppId() {
        return (ULong) get(2);
    }

    /**
     * Setter for <code>security.security_client_otp_policy.TARGET_TYPE</code>.
     * The target medium for the OTP delivery: EMAIL, PHONE, or BOTH
     */
    public SecurityClientOtpPolicyRecord setTargetType(SecurityClientOtpPolicyTargetType value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>security.security_client_otp_policy.TARGET_TYPE</code>.
     * The target medium for the OTP delivery: EMAIL, PHONE, or BOTH
     */
    public SecurityClientOtpPolicyTargetType getTargetType() {
        return (SecurityClientOtpPolicyTargetType) get(3);
    }

    /**
     * Setter for <code>security.security_client_otp_policy.IS_CONSTANT</code>.
     * Flag indicating if OTP should be a constant value
     */
    public SecurityClientOtpPolicyRecord setIsConstant(Byte value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>security.security_client_otp_policy.IS_CONSTANT</code>.
     * Flag indicating if OTP should be a constant value
     */
    public Byte getIsConstant() {
        return (Byte) get(4);
    }

    /**
     * Setter for
     * <code>security.security_client_otp_policy.CONSTANT_VALUE</code>. Value of
     * OTP if IS_CONSTANT is true
     */
    public SecurityClientOtpPolicyRecord setConstantValue(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_otp_policy.CONSTANT_VALUE</code>. Value of
     * OTP if IS_CONSTANT is true
     */
    public String getConstantValue() {
        return (String) get(5);
    }

    /**
     * Setter for <code>security.security_client_otp_policy.IS_NUMERIC</code>.
     * Flag indicating if OTP should contain only numeric characters
     */
    public SecurityClientOtpPolicyRecord setIsNumeric(Byte value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>security.security_client_otp_policy.IS_NUMERIC</code>.
     * Flag indicating if OTP should contain only numeric characters
     */
    public Byte getIsNumeric() {
        return (Byte) get(6);
    }

    /**
     * Setter for
     * <code>security.security_client_otp_policy.IS_ALPHANUMERIC</code>. Flag
     * indicating if OTP should contain alphanumeric characters
     */
    public SecurityClientOtpPolicyRecord setIsAlphanumeric(Byte value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_otp_policy.IS_ALPHANUMERIC</code>. Flag
     * indicating if OTP should contain alphanumeric characters
     */
    public Byte getIsAlphanumeric() {
        return (Byte) get(7);
    }

    /**
     * Setter for <code>security.security_client_otp_policy.LENGTH</code>.
     * Length of the OTP to be generated
     */
    public SecurityClientOtpPolicyRecord setLength(UShort value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>security.security_client_otp_policy.LENGTH</code>.
     * Length of the OTP to be generated
     */
    public UShort getLength() {
        return (UShort) get(8);
    }

    /**
     * Setter for
     * <code>security.security_client_otp_policy.RESEND_SAME_OTP</code>. Flag
     * indication weather to send same OTP in resend request.
     */
    public SecurityClientOtpPolicyRecord setResendSameOtp(Byte value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_otp_policy.RESEND_SAME_OTP</code>. Flag
     * indication weather to send same OTP in resend request.
     */
    public Byte getResendSameOtp() {
        return (Byte) get(9);
    }

    /**
     * Setter for
     * <code>security.security_client_otp_policy.NO_RESEND_ATTEMPTS</code>.
     * Maximum number of Resend attempts allowed before User is blocked
     */
    public SecurityClientOtpPolicyRecord setNoResendAttempts(UShort value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_otp_policy.NO_RESEND_ATTEMPTS</code>.
     * Maximum number of Resend attempts allowed before User is blocked
     */
    public UShort getNoResendAttempts() {
        return (UShort) get(10);
    }

    /**
     * Setter for
     * <code>security.security_client_otp_policy.EXPIRE_INTERVAL</code>. Time
     * interval in minutes after which OTP will expire
     */
    public SecurityClientOtpPolicyRecord setExpireInterval(ULong value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_otp_policy.EXPIRE_INTERVAL</code>. Time
     * interval in minutes after which OTP will expire
     */
    public ULong getExpireInterval() {
        return (ULong) get(11);
    }

    /**
     * Setter for
     * <code>security.security_client_otp_policy.NO_FAILED_ATTEMPTS</code>.
     * Maximum number of failed attempts allowed before OTP is invalidated
     */
    public SecurityClientOtpPolicyRecord setNoFailedAttempts(UShort value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_otp_policy.NO_FAILED_ATTEMPTS</code>.
     * Maximum number of failed attempts allowed before OTP is invalidated
     */
    public UShort getNoFailedAttempts() {
        return (UShort) get(12);
    }

    /**
     * Setter for
     * <code>security.security_client_otp_policy.USER_LOCK_TIME</code>. Time in
     * minutes for which user need to be locked it policy violates
     */
    public SecurityClientOtpPolicyRecord setUserLockTime(ULong value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_otp_policy.USER_LOCK_TIME</code>. Time in
     * minutes for which user need to be locked it policy violates
     */
    public ULong getUserLockTime() {
        return (ULong) get(13);
    }

    /**
     * Setter for <code>security.security_client_otp_policy.CREATED_BY</code>.
     * ID of the user who created this row
     */
    public SecurityClientOtpPolicyRecord setCreatedBy(ULong value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>security.security_client_otp_policy.CREATED_BY</code>.
     * ID of the user who created this row
     */
    public ULong getCreatedBy() {
        return (ULong) get(14);
    }

    /**
     * Setter for <code>security.security_client_otp_policy.CREATED_AT</code>.
     * Time when this row is created
     */
    public SecurityClientOtpPolicyRecord setCreatedAt(LocalDateTime value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>security.security_client_otp_policy.CREATED_AT</code>.
     * Time when this row is created
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(15);
    }

    /**
     * Setter for <code>security.security_client_otp_policy.UPDATED_BY</code>.
     * ID of the user who last updated this row
     */
    public SecurityClientOtpPolicyRecord setUpdatedBy(ULong value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>security.security_client_otp_policy.UPDATED_BY</code>.
     * ID of the user who last updated this row
     */
    public ULong getUpdatedBy() {
        return (ULong) get(16);
    }

    /**
     * Setter for <code>security.security_client_otp_policy.UPDATED_AT</code>.
     * Time when this row is last updated
     */
    public SecurityClientOtpPolicyRecord setUpdatedAt(LocalDateTime value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>security.security_client_otp_policy.UPDATED_AT</code>.
     * Time when this row is last updated
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(17);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SecurityClientOtpPolicyRecord
     */
    public SecurityClientOtpPolicyRecord() {
        super(SecurityClientOtpPolicy.SECURITY_CLIENT_OTP_POLICY);
    }

    /**
     * Create a detached, initialised SecurityClientOtpPolicyRecord
     */
    public SecurityClientOtpPolicyRecord(ULong id, ULong clientId, ULong appId, SecurityClientOtpPolicyTargetType targetType, Byte isConstant, String constantValue, Byte isNumeric, Byte isAlphanumeric, UShort length, Byte resendSameOtp, UShort noResendAttempts, ULong expireInterval, UShort noFailedAttempts, ULong userLockTime, ULong createdBy, LocalDateTime createdAt, ULong updatedBy, LocalDateTime updatedAt) {
        super(SecurityClientOtpPolicy.SECURITY_CLIENT_OTP_POLICY);

        setId(id);
        setClientId(clientId);
        setAppId(appId);
        setTargetType(targetType);
        setIsConstant(isConstant);
        setConstantValue(constantValue);
        setIsNumeric(isNumeric);
        setIsAlphanumeric(isAlphanumeric);
        setLength(length);
        setResendSameOtp(resendSameOtp);
        setNoResendAttempts(noResendAttempts);
        setExpireInterval(expireInterval);
        setNoFailedAttempts(noFailedAttempts);
        setUserLockTime(userLockTime);
        setCreatedBy(createdBy);
        setCreatedAt(createdAt);
        setUpdatedBy(updatedBy);
        setUpdatedAt(updatedAt);
        resetChangedOnNotNull();
    }
}
