/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables;


import com.fincity.security.jooq.Keys;
import com.fincity.security.jooq.Security;
import com.fincity.security.jooq.enums.SecurityPaymentGatewayPaymentGateway;
import com.fincity.security.jooq.tables.SecurityClient.SecurityClientPath;
import com.fincity.security.jooq.tables.records.SecurityPaymentGatewayRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SecurityPaymentGateway extends TableImpl<SecurityPaymentGatewayRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>security.security_payment_gateway</code>
     */
    public static final SecurityPaymentGateway SECURITY_PAYMENT_GATEWAY = new SecurityPaymentGateway();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityPaymentGatewayRecord> getRecordType() {
        return SecurityPaymentGatewayRecord.class;
    }

    /**
     * The column <code>security.security_payment_gateway.ID</code>. Primary key
     */
    public final TableField<SecurityPaymentGatewayRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>security.security_payment_gateway.CLIENT_ID</code>.
     * Client ID for which this payment gateway belongs to
     */
    public final TableField<SecurityPaymentGatewayRecord, ULong> CLIENT_ID = createField(DSL.name("CLIENT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Client ID for which this payment gateway belongs to");

    /**
     * The column
     * <code>security.security_payment_gateway.PAYMENT_GATEWAY</code>. Payment
     * gateway
     */
    public final TableField<SecurityPaymentGatewayRecord, SecurityPaymentGatewayPaymentGateway> PAYMENT_GATEWAY = createField(DSL.name("PAYMENT_GATEWAY"), SQLDataType.VARCHAR(8).nullable(false).defaultValue(DSL.inline("OTHER", SQLDataType.VARCHAR)).asEnumDataType(SecurityPaymentGatewayPaymentGateway.class), this, "Payment gateway");

    /**
     * The column
     * <code>security.security_payment_gateway.PAYMENT_GATEWAY_DETAILS</code>.
     * Payment gateway details
     */
    public final TableField<SecurityPaymentGatewayRecord, JSON> PAYMENT_GATEWAY_DETAILS = createField(DSL.name("PAYMENT_GATEWAY_DETAILS"), SQLDataType.JSON.nullable(false), this, "Payment gateway details");

    private SecurityPaymentGateway(Name alias, Table<SecurityPaymentGatewayRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SecurityPaymentGateway(Name alias, Table<SecurityPaymentGatewayRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>security.security_payment_gateway</code> table
     * reference
     */
    public SecurityPaymentGateway(String alias) {
        this(DSL.name(alias), SECURITY_PAYMENT_GATEWAY);
    }

    /**
     * Create an aliased <code>security.security_payment_gateway</code> table
     * reference
     */
    public SecurityPaymentGateway(Name alias) {
        this(alias, SECURITY_PAYMENT_GATEWAY);
    }

    /**
     * Create a <code>security.security_payment_gateway</code> table reference
     */
    public SecurityPaymentGateway() {
        this(DSL.name("security_payment_gateway"), null);
    }

    public <O extends Record> SecurityPaymentGateway(Table<O> path, ForeignKey<O, SecurityPaymentGatewayRecord> childPath, InverseForeignKey<O, SecurityPaymentGatewayRecord> parentPath) {
        super(path, childPath, parentPath, SECURITY_PAYMENT_GATEWAY);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SecurityPaymentGatewayPath extends SecurityPaymentGateway implements Path<SecurityPaymentGatewayRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SecurityPaymentGatewayPath(Table<O> path, ForeignKey<O, SecurityPaymentGatewayRecord> childPath, InverseForeignKey<O, SecurityPaymentGatewayRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SecurityPaymentGatewayPath(Name alias, Table<SecurityPaymentGatewayRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SecurityPaymentGatewayPath as(String alias) {
            return new SecurityPaymentGatewayPath(DSL.name(alias), this);
        }

        @Override
        public SecurityPaymentGatewayPath as(Name alias) {
            return new SecurityPaymentGatewayPath(alias, this);
        }

        @Override
        public SecurityPaymentGatewayPath as(Table<?> alias) {
            return new SecurityPaymentGatewayPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public Identity<SecurityPaymentGatewayRecord, ULong> getIdentity() {
        return (Identity<SecurityPaymentGatewayRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecurityPaymentGatewayRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_PAYMENT_GATEWAY_PRIMARY;
    }

    @Override
    public List<UniqueKey<SecurityPaymentGatewayRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SECURITY_PAYMENT_GATEWAY_UK1_PAYMENT_GATEWAY_CLIENT_ID_PAYMENT_GATEWAY);
    }

    @Override
    public List<ForeignKey<SecurityPaymentGatewayRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_PAYMENT_GATEWAY_CLIENT_ID);
    }

    private transient SecurityClientPath _securityClient;

    /**
     * Get the implicit join path to the <code>security.security_client</code>
     * table.
     */
    public SecurityClientPath securityClient() {
        if (_securityClient == null)
            _securityClient = new SecurityClientPath(this, Keys.FK1_PAYMENT_GATEWAY_CLIENT_ID, null);

        return _securityClient;
    }

    @Override
    public SecurityPaymentGateway as(String alias) {
        return new SecurityPaymentGateway(DSL.name(alias), this);
    }

    @Override
    public SecurityPaymentGateway as(Name alias) {
        return new SecurityPaymentGateway(alias, this);
    }

    @Override
    public SecurityPaymentGateway as(Table<?> alias) {
        return new SecurityPaymentGateway(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityPaymentGateway rename(String name) {
        return new SecurityPaymentGateway(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityPaymentGateway rename(Name name) {
        return new SecurityPaymentGateway(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityPaymentGateway rename(Table<?> name) {
        return new SecurityPaymentGateway(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPaymentGateway where(Condition condition) {
        return new SecurityPaymentGateway(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPaymentGateway where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPaymentGateway where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPaymentGateway where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityPaymentGateway where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityPaymentGateway where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityPaymentGateway where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityPaymentGateway where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPaymentGateway whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPaymentGateway whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
