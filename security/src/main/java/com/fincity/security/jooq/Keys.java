/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq;


import com.fincity.security.jooq.tables.SecurityAddress;
import com.fincity.security.jooq.tables.SecurityApp;
import com.fincity.security.jooq.tables.SecurityAppAccess;
import com.fincity.security.jooq.tables.SecurityAppDependency;
import com.fincity.security.jooq.tables.SecurityAppProperty;
import com.fincity.security.jooq.tables.SecurityAppRegAccess;
import com.fincity.security.jooq.tables.SecurityAppRegFileAccess;
import com.fincity.security.jooq.tables.SecurityAppRegIntegration;
import com.fincity.security.jooq.tables.SecurityAppRegIntegrationTokens;
import com.fincity.security.jooq.tables.SecurityClient;
import com.fincity.security.jooq.tables.SecurityClientAddress;
import com.fincity.security.jooq.tables.SecurityClientHierarchy;
import com.fincity.security.jooq.tables.SecurityClientOtpPolicy;
import com.fincity.security.jooq.tables.SecurityClientPasswordPolicy;
import com.fincity.security.jooq.tables.SecurityClientPinPolicy;
import com.fincity.security.jooq.tables.SecurityClientProfile;
import com.fincity.security.jooq.tables.SecurityClientType;
import com.fincity.security.jooq.tables.SecurityClientUrl;
import com.fincity.security.jooq.tables.SecurityDepartment;
import com.fincity.security.jooq.tables.SecurityOtp;
import com.fincity.security.jooq.tables.SecurityPastPasswords;
import com.fincity.security.jooq.tables.SecurityPastPins;
import com.fincity.security.jooq.tables.SecurityPermission;
import com.fincity.security.jooq.tables.SecurityProfile;
import com.fincity.security.jooq.tables.SecurityProfileRole;
import com.fincity.security.jooq.tables.SecurityProfileUser;
import com.fincity.security.jooq.tables.SecuritySoxLog;
import com.fincity.security.jooq.tables.SecuritySslCertificate;
import com.fincity.security.jooq.tables.SecuritySslChallenge;
import com.fincity.security.jooq.tables.SecuritySslRequest;
import com.fincity.security.jooq.tables.SecurityUser;
import com.fincity.security.jooq.tables.SecurityUserAddress;
import com.fincity.security.jooq.tables.SecurityUserToken;
import com.fincity.security.jooq.tables.SecurityV2Role;
import com.fincity.security.jooq.tables.SecurityV2RolePermission;
import com.fincity.security.jooq.tables.SecurityV2RoleRole;
import com.fincity.security.jooq.tables.SecurityV2UserRole;
import com.fincity.security.jooq.tables.records.SecurityAddressRecord;
import com.fincity.security.jooq.tables.records.SecurityAppAccessRecord;
import com.fincity.security.jooq.tables.records.SecurityAppDependencyRecord;
import com.fincity.security.jooq.tables.records.SecurityAppPropertyRecord;
import com.fincity.security.jooq.tables.records.SecurityAppRecord;
import com.fincity.security.jooq.tables.records.SecurityAppRegAccessRecord;
import com.fincity.security.jooq.tables.records.SecurityAppRegFileAccessRecord;
import com.fincity.security.jooq.tables.records.SecurityAppRegIntegrationRecord;
import com.fincity.security.jooq.tables.records.SecurityAppRegIntegrationTokensRecord;
import com.fincity.security.jooq.tables.records.SecurityClientAddressRecord;
import com.fincity.security.jooq.tables.records.SecurityClientHierarchyRecord;
import com.fincity.security.jooq.tables.records.SecurityClientOtpPolicyRecord;
import com.fincity.security.jooq.tables.records.SecurityClientPasswordPolicyRecord;
import com.fincity.security.jooq.tables.records.SecurityClientPinPolicyRecord;
import com.fincity.security.jooq.tables.records.SecurityClientProfileRecord;
import com.fincity.security.jooq.tables.records.SecurityClientRecord;
import com.fincity.security.jooq.tables.records.SecurityClientTypeRecord;
import com.fincity.security.jooq.tables.records.SecurityClientUrlRecord;
import com.fincity.security.jooq.tables.records.SecurityDepartmentRecord;
import com.fincity.security.jooq.tables.records.SecurityOtpRecord;
import com.fincity.security.jooq.tables.records.SecurityPastPasswordsRecord;
import com.fincity.security.jooq.tables.records.SecurityPastPinsRecord;
import com.fincity.security.jooq.tables.records.SecurityPermissionRecord;
import com.fincity.security.jooq.tables.records.SecurityProfileRecord;
import com.fincity.security.jooq.tables.records.SecurityProfileRoleRecord;
import com.fincity.security.jooq.tables.records.SecurityProfileUserRecord;
import com.fincity.security.jooq.tables.records.SecuritySoxLogRecord;
import com.fincity.security.jooq.tables.records.SecuritySslCertificateRecord;
import com.fincity.security.jooq.tables.records.SecuritySslChallengeRecord;
import com.fincity.security.jooq.tables.records.SecuritySslRequestRecord;
import com.fincity.security.jooq.tables.records.SecurityUserAddressRecord;
import com.fincity.security.jooq.tables.records.SecurityUserRecord;
import com.fincity.security.jooq.tables.records.SecurityUserTokenRecord;
import com.fincity.security.jooq.tables.records.SecurityV2RolePermissionRecord;
import com.fincity.security.jooq.tables.records.SecurityV2RoleRecord;
import com.fincity.security.jooq.tables.records.SecurityV2RoleRoleRecord;
import com.fincity.security.jooq.tables.records.SecurityV2UserRoleRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * security.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<SecurityAddressRecord> KEY_SECURITY_ADDRESS_PRIMARY = Internal.createUniqueKey(SecurityAddress.SECURITY_ADDRESS, DSL.name("KEY_security_address_PRIMARY"), new TableField[] { SecurityAddress.SECURITY_ADDRESS.ID }, true);
    public static final UniqueKey<SecurityAppRecord> KEY_SECURITY_APP_PRIMARY = Internal.createUniqueKey(SecurityApp.SECURITY_APP, DSL.name("KEY_security_app_PRIMARY"), new TableField[] { SecurityApp.SECURITY_APP.ID }, true);
    public static final UniqueKey<SecurityAppRecord> KEY_SECURITY_APP_UK1_APPCODE = Internal.createUniqueKey(SecurityApp.SECURITY_APP, DSL.name("KEY_security_app_UK1_APPCODE"), new TableField[] { SecurityApp.SECURITY_APP.APP_CODE }, true);
    public static final UniqueKey<SecurityAppAccessRecord> KEY_SECURITY_APP_ACCESS_PRIMARY = Internal.createUniqueKey(SecurityAppAccess.SECURITY_APP_ACCESS, DSL.name("KEY_security_app_access_PRIMARY"), new TableField[] { SecurityAppAccess.SECURITY_APP_ACCESS.ID }, true);
    public static final UniqueKey<SecurityAppAccessRecord> KEY_SECURITY_APP_ACCESS_UK1_APPCLIENT = Internal.createUniqueKey(SecurityAppAccess.SECURITY_APP_ACCESS, DSL.name("KEY_security_app_access_UK1_APPCLIENT"), new TableField[] { SecurityAppAccess.SECURITY_APP_ACCESS.CLIENT_ID, SecurityAppAccess.SECURITY_APP_ACCESS.APP_ID }, true);
    public static final UniqueKey<SecurityAppDependencyRecord> KEY_SECURITY_APP_DEPENDENCY_APP_ID = Internal.createUniqueKey(SecurityAppDependency.SECURITY_APP_DEPENDENCY, DSL.name("KEY_security_app_dependency_APP_ID"), new TableField[] { SecurityAppDependency.SECURITY_APP_DEPENDENCY.APP_ID, SecurityAppDependency.SECURITY_APP_DEPENDENCY.DEP_APP_ID }, true);
    public static final UniqueKey<SecurityAppDependencyRecord> KEY_SECURITY_APP_DEPENDENCY_PRIMARY = Internal.createUniqueKey(SecurityAppDependency.SECURITY_APP_DEPENDENCY, DSL.name("KEY_security_app_dependency_PRIMARY"), new TableField[] { SecurityAppDependency.SECURITY_APP_DEPENDENCY.ID }, true);
    public static final UniqueKey<SecurityAppPropertyRecord> KEY_SECURITY_APP_PROPERTY_APP_ID = Internal.createUniqueKey(SecurityAppProperty.SECURITY_APP_PROPERTY, DSL.name("KEY_security_app_property_APP_ID"), new TableField[] { SecurityAppProperty.SECURITY_APP_PROPERTY.APP_ID, SecurityAppProperty.SECURITY_APP_PROPERTY.CLIENT_ID, SecurityAppProperty.SECURITY_APP_PROPERTY.NAME }, true);
    public static final UniqueKey<SecurityAppPropertyRecord> KEY_SECURITY_APP_PROPERTY_PRIMARY = Internal.createUniqueKey(SecurityAppProperty.SECURITY_APP_PROPERTY, DSL.name("KEY_security_app_property_PRIMARY"), new TableField[] { SecurityAppProperty.SECURITY_APP_PROPERTY.ID }, true);
    public static final UniqueKey<SecurityAppRegAccessRecord> KEY_SECURITY_APP_REG_ACCESS_CLIENT_ID = Internal.createUniqueKey(SecurityAppRegAccess.SECURITY_APP_REG_ACCESS, DSL.name("KEY_security_app_reg_access_CLIENT_ID"), new TableField[] { SecurityAppRegAccess.SECURITY_APP_REG_ACCESS.CLIENT_ID, SecurityAppRegAccess.SECURITY_APP_REG_ACCESS.APP_ID, SecurityAppRegAccess.SECURITY_APP_REG_ACCESS.ALLOW_APP_ID, SecurityAppRegAccess.SECURITY_APP_REG_ACCESS.CLIENT_TYPE, SecurityAppRegAccess.SECURITY_APP_REG_ACCESS.LEVEL, SecurityAppRegAccess.SECURITY_APP_REG_ACCESS.BUSINESS_TYPE }, true);
    public static final UniqueKey<SecurityAppRegAccessRecord> KEY_SECURITY_APP_REG_ACCESS_PRIMARY = Internal.createUniqueKey(SecurityAppRegAccess.SECURITY_APP_REG_ACCESS, DSL.name("KEY_security_app_reg_access_PRIMARY"), new TableField[] { SecurityAppRegAccess.SECURITY_APP_REG_ACCESS.ID }, true);
    public static final UniqueKey<SecurityAppRegFileAccessRecord> KEY_SECURITY_APP_REG_FILE_ACCESS_PRIMARY = Internal.createUniqueKey(SecurityAppRegFileAccess.SECURITY_APP_REG_FILE_ACCESS, DSL.name("KEY_security_app_reg_file_access_PRIMARY"), new TableField[] { SecurityAppRegFileAccess.SECURITY_APP_REG_FILE_ACCESS.ID }, true);
    public static final UniqueKey<SecurityAppRegIntegrationRecord> KEY_SECURITY_APP_REG_INTEGRATION_PRIMARY = Internal.createUniqueKey(SecurityAppRegIntegration.SECURITY_APP_REG_INTEGRATION, DSL.name("KEY_security_app_reg_integration_PRIMARY"), new TableField[] { SecurityAppRegIntegration.SECURITY_APP_REG_INTEGRATION.ID }, true);
    public static final UniqueKey<SecurityAppRegIntegrationRecord> KEY_SECURITY_APP_REG_INTEGRATION_UK1_APP_REG_INTEGRATION = Internal.createUniqueKey(SecurityAppRegIntegration.SECURITY_APP_REG_INTEGRATION, DSL.name("KEY_security_app_reg_integration_UK1_APP_REG_INTEGRATION"), new TableField[] { SecurityAppRegIntegration.SECURITY_APP_REG_INTEGRATION.APP_ID, SecurityAppRegIntegration.SECURITY_APP_REG_INTEGRATION.CLIENT_ID, SecurityAppRegIntegration.SECURITY_APP_REG_INTEGRATION.PLATFORM }, true);
    public static final UniqueKey<SecurityAppRegIntegrationTokensRecord> KEY_SECURITY_APP_REG_INTEGRATION_TOKENS_PRIMARY = Internal.createUniqueKey(SecurityAppRegIntegrationTokens.SECURITY_APP_REG_INTEGRATION_TOKENS, DSL.name("KEY_security_app_reg_integration_tokens_PRIMARY"), new TableField[] { SecurityAppRegIntegrationTokens.SECURITY_APP_REG_INTEGRATION_TOKENS.ID }, true);
    public static final UniqueKey<SecurityAppRegIntegrationTokensRecord> KEY_SECURITY_APP_REG_INTEGRATION_TOKENS_UK1_INTEGRATION_TOKEN = Internal.createUniqueKey(SecurityAppRegIntegrationTokens.SECURITY_APP_REG_INTEGRATION_TOKENS, DSL.name("KEY_security_app_reg_integration_tokens_UK1_INTEGRATION_TOKEN"), new TableField[] { SecurityAppRegIntegrationTokens.SECURITY_APP_REG_INTEGRATION_TOKENS.INTEGRATION_ID, SecurityAppRegIntegrationTokens.SECURITY_APP_REG_INTEGRATION_TOKENS.CREATED_BY }, true);
    public static final UniqueKey<SecurityAppRegIntegrationTokensRecord> KEY_SECURITY_APP_REG_INTEGRATION_TOKENS_UK2_INTEGRATION_TOKEN_STATE = Internal.createUniqueKey(SecurityAppRegIntegrationTokens.SECURITY_APP_REG_INTEGRATION_TOKENS, DSL.name("KEY_security_app_reg_integration_tokens_UK2_INTEGRATION_TOKEN_STATE"), new TableField[] { SecurityAppRegIntegrationTokens.SECURITY_APP_REG_INTEGRATION_TOKENS.STATE }, true);
    public static final UniqueKey<SecurityClientRecord> KEY_SECURITY_CLIENT_PRIMARY = Internal.createUniqueKey(SecurityClient.SECURITY_CLIENT, DSL.name("KEY_security_client_PRIMARY"), new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final UniqueKey<SecurityClientRecord> KEY_SECURITY_CLIENT_UK1_CLIENT_CODE = Internal.createUniqueKey(SecurityClient.SECURITY_CLIENT, DSL.name("KEY_security_client_UK1_CLIENT_CODE"), new TableField[] { SecurityClient.SECURITY_CLIENT.CODE }, true);
    public static final UniqueKey<SecurityClientAddressRecord> KEY_SECURITY_CLIENT_ADDRESS_PRIMARY = Internal.createUniqueKey(SecurityClientAddress.SECURITY_CLIENT_ADDRESS, DSL.name("KEY_security_client_address_PRIMARY"), new TableField[] { SecurityClientAddress.SECURITY_CLIENT_ADDRESS.ID }, true);
    public static final UniqueKey<SecurityClientHierarchyRecord> KEY_SECURITY_CLIENT_HIERARCHY_PRIMARY = Internal.createUniqueKey(SecurityClientHierarchy.SECURITY_CLIENT_HIERARCHY, DSL.name("KEY_security_client_hierarchy_PRIMARY"), new TableField[] { SecurityClientHierarchy.SECURITY_CLIENT_HIERARCHY.ID }, true);
    public static final UniqueKey<SecurityClientHierarchyRecord> KEY_SECURITY_CLIENT_HIERARCHY_UK1_SECURITY_CLIENT_HIERARCHY = Internal.createUniqueKey(SecurityClientHierarchy.SECURITY_CLIENT_HIERARCHY, DSL.name("KEY_security_client_hierarchy_UK1_SECURITY_CLIENT_HIERARCHY"), new TableField[] { SecurityClientHierarchy.SECURITY_CLIENT_HIERARCHY.CLIENT_ID }, true);
    public static final UniqueKey<SecurityClientOtpPolicyRecord> KEY_SECURITY_CLIENT_OTP_POLICY_PRIMARY = Internal.createUniqueKey(SecurityClientOtpPolicy.SECURITY_CLIENT_OTP_POLICY, DSL.name("KEY_security_client_otp_policy_PRIMARY"), new TableField[] { SecurityClientOtpPolicy.SECURITY_CLIENT_OTP_POLICY.ID }, true);
    public static final UniqueKey<SecurityClientOtpPolicyRecord> KEY_SECURITY_CLIENT_OTP_POLICY_UK1_CLIENT_OTP_POL_CLIENT_ID_APP_ID = Internal.createUniqueKey(SecurityClientOtpPolicy.SECURITY_CLIENT_OTP_POLICY, DSL.name("KEY_security_client_otp_policy_UK1_CLIENT_OTP_POL_CLIENT_ID_APP_ID"), new TableField[] { SecurityClientOtpPolicy.SECURITY_CLIENT_OTP_POLICY.CLIENT_ID, SecurityClientOtpPolicy.SECURITY_CLIENT_OTP_POLICY.APP_ID }, true);
    public static final UniqueKey<SecurityClientPasswordPolicyRecord> KEY_SECURITY_CLIENT_PASSWORD_POLICY_PRIMARY = Internal.createUniqueKey(SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY, DSL.name("KEY_security_client_password_policy_PRIMARY"), new TableField[] { SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY.ID }, true);
    public static final UniqueKey<SecurityClientPasswordPolicyRecord> KEY_SECURITY_CLIENT_PASSWORD_POLICY_UK1_CLIENT_PWD_POL_CLIENT_ID_APP_ID = Internal.createUniqueKey(SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY, DSL.name("KEY_security_client_password_policy_UK1_CLIENT_PWD_POL_CLIENT_ID_APP_ID"), new TableField[] { SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY.CLIENT_ID, SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY.APP_ID }, true);
    public static final UniqueKey<SecurityClientPinPolicyRecord> KEY_SECURITY_CLIENT_PIN_POLICY_PRIMARY = Internal.createUniqueKey(SecurityClientPinPolicy.SECURITY_CLIENT_PIN_POLICY, DSL.name("KEY_security_client_pin_policy_PRIMARY"), new TableField[] { SecurityClientPinPolicy.SECURITY_CLIENT_PIN_POLICY.ID }, true);
    public static final UniqueKey<SecurityClientPinPolicyRecord> KEY_SECURITY_CLIENT_PIN_POLICY_UK1_CLIENT_PIN_POL_CLIENT_ID_APP_ID = Internal.createUniqueKey(SecurityClientPinPolicy.SECURITY_CLIENT_PIN_POLICY, DSL.name("KEY_security_client_pin_policy_UK1_CLIENT_PIN_POL_CLIENT_ID_APP_ID"), new TableField[] { SecurityClientPinPolicy.SECURITY_CLIENT_PIN_POLICY.CLIENT_ID, SecurityClientPinPolicy.SECURITY_CLIENT_PIN_POLICY.APP_ID }, true);
    public static final UniqueKey<SecurityClientProfileRecord> KEY_SECURITY_CLIENT_PROFILE_PRIMARY = Internal.createUniqueKey(SecurityClientProfile.SECURITY_CLIENT_PROFILE, DSL.name("KEY_security_client_profile_PRIMARY"), new TableField[] { SecurityClientProfile.SECURITY_CLIENT_PROFILE.ID }, true);
    public static final UniqueKey<SecurityClientProfileRecord> KEY_SECURITY_CLIENT_PROFILE_UK1_CLIENT_PROFILE = Internal.createUniqueKey(SecurityClientProfile.SECURITY_CLIENT_PROFILE, DSL.name("KEY_security_client_profile_UK1_CLIENT_PROFILE"), new TableField[] { SecurityClientProfile.SECURITY_CLIENT_PROFILE.CLIENT_ID, SecurityClientProfile.SECURITY_CLIENT_PROFILE.PROFILE_ID }, true);
    public static final UniqueKey<SecurityClientTypeRecord> KEY_SECURITY_CLIENT_TYPE_PRIMARY = Internal.createUniqueKey(SecurityClientType.SECURITY_CLIENT_TYPE, DSL.name("KEY_security_client_type_PRIMARY"), new TableField[] { SecurityClientType.SECURITY_CLIENT_TYPE.ID }, true);
    public static final UniqueKey<SecurityClientTypeRecord> KEY_SECURITY_CLIENT_TYPE_UK1_CLIENT_TYPE_CODE = Internal.createUniqueKey(SecurityClientType.SECURITY_CLIENT_TYPE, DSL.name("KEY_security_client_type_UK1_CLIENT_TYPE_CODE"), new TableField[] { SecurityClientType.SECURITY_CLIENT_TYPE.CODE }, true);
    public static final UniqueKey<SecurityClientUrlRecord> KEY_SECURITY_CLIENT_URL_PRIMARY = Internal.createUniqueKey(SecurityClientUrl.SECURITY_CLIENT_URL, DSL.name("KEY_security_client_url_PRIMARY"), new TableField[] { SecurityClientUrl.SECURITY_CLIENT_URL.ID }, true);
    public static final UniqueKey<SecurityClientUrlRecord> KEY_SECURITY_CLIENT_URL_UK1_URL_PATTERN = Internal.createUniqueKey(SecurityClientUrl.SECURITY_CLIENT_URL, DSL.name("KEY_security_client_url_UK1_URL_PATTERN"), new TableField[] { SecurityClientUrl.SECURITY_CLIENT_URL.URL_PATTERN }, true);
    public static final UniqueKey<SecurityDepartmentRecord> KEY_SECURITY_DEPARTMENT_PRIMARY = Internal.createUniqueKey(SecurityDepartment.SECURITY_DEPARTMENT, DSL.name("KEY_security_department_PRIMARY"), new TableField[] { SecurityDepartment.SECURITY_DEPARTMENT.ID }, true);
    public static final UniqueKey<SecurityOtpRecord> KEY_SECURITY_OTP_PRIMARY = Internal.createUniqueKey(SecurityOtp.SECURITY_OTP, DSL.name("KEY_security_otp_PRIMARY"), new TableField[] { SecurityOtp.SECURITY_OTP.ID }, true);
    public static final UniqueKey<SecurityPastPasswordsRecord> KEY_SECURITY_PAST_PASSWORDS_PRIMARY = Internal.createUniqueKey(SecurityPastPasswords.SECURITY_PAST_PASSWORDS, DSL.name("KEY_security_past_passwords_PRIMARY"), new TableField[] { SecurityPastPasswords.SECURITY_PAST_PASSWORDS.ID }, true);
    public static final UniqueKey<SecurityPastPinsRecord> KEY_SECURITY_PAST_PINS_PRIMARY = Internal.createUniqueKey(SecurityPastPins.SECURITY_PAST_PINS, DSL.name("KEY_security_past_pins_PRIMARY"), new TableField[] { SecurityPastPins.SECURITY_PAST_PINS.ID }, true);
    public static final UniqueKey<SecurityPermissionRecord> KEY_SECURITY_PERMISSION_PRIMARY = Internal.createUniqueKey(SecurityPermission.SECURITY_PERMISSION, DSL.name("KEY_security_permission_PRIMARY"), new TableField[] { SecurityPermission.SECURITY_PERMISSION.ID }, true);
    public static final UniqueKey<SecurityPermissionRecord> KEY_SECURITY_PERMISSION_UK1_PERMISSION_NAME = Internal.createUniqueKey(SecurityPermission.SECURITY_PERMISSION, DSL.name("KEY_security_permission_UK1_PERMISSION_NAME"), new TableField[] { SecurityPermission.SECURITY_PERMISSION.NAME }, true);
    public static final UniqueKey<SecurityProfileRecord> KEY_SECURITY_PROFILE_PRIMARY = Internal.createUniqueKey(SecurityProfile.SECURITY_PROFILE, DSL.name("KEY_security_profile_PRIMARY"), new TableField[] { SecurityProfile.SECURITY_PROFILE.ID }, true);
    public static final UniqueKey<SecurityProfileRecord> KEY_SECURITY_PROFILE_UK1_PROFILE_NAME_APP_ID = Internal.createUniqueKey(SecurityProfile.SECURITY_PROFILE, DSL.name("KEY_security_profile_UK1_PROFILE_NAME_APP_ID"), new TableField[] { SecurityProfile.SECURITY_PROFILE.NAME, SecurityProfile.SECURITY_PROFILE.APP_ID }, true);
    public static final UniqueKey<SecurityProfileRoleRecord> KEY_SECURITY_PROFILE_ROLE_PRIMARY = Internal.createUniqueKey(SecurityProfileRole.SECURITY_PROFILE_ROLE, DSL.name("KEY_security_profile_role_PRIMARY"), new TableField[] { SecurityProfileRole.SECURITY_PROFILE_ROLE.ID }, true);
    public static final UniqueKey<SecurityProfileRoleRecord> KEY_SECURITY_PROFILE_ROLE_UK1_PROFILE_ROLE_PROFILE_ID_ROLE_ID = Internal.createUniqueKey(SecurityProfileRole.SECURITY_PROFILE_ROLE, DSL.name("KEY_security_profile_role_UK1_PROFILE_ROLE_PROFILE_ID_ROLE_ID"), new TableField[] { SecurityProfileRole.SECURITY_PROFILE_ROLE.PROFILE_ID, SecurityProfileRole.SECURITY_PROFILE_ROLE.ROLE_ID }, true);
    public static final UniqueKey<SecurityProfileUserRecord> KEY_SECURITY_PROFILE_USER_PRIMARY = Internal.createUniqueKey(SecurityProfileUser.SECURITY_PROFILE_USER, DSL.name("KEY_security_profile_user_PRIMARY"), new TableField[] { SecurityProfileUser.SECURITY_PROFILE_USER.ID }, true);
    public static final UniqueKey<SecurityProfileUserRecord> KEY_SECURITY_PROFILE_USER_UK1_PROFILE_USER_PROFILE_ID_USER_ID = Internal.createUniqueKey(SecurityProfileUser.SECURITY_PROFILE_USER, DSL.name("KEY_security_profile_user_UK1_PROFILE_USER_PROFILE_ID_USER_ID"), new TableField[] { SecurityProfileUser.SECURITY_PROFILE_USER.PROFILE_ID, SecurityProfileUser.SECURITY_PROFILE_USER.USER_ID }, true);
    public static final UniqueKey<SecuritySoxLogRecord> KEY_SECURITY_SOX_LOG_PRIMARY = Internal.createUniqueKey(SecuritySoxLog.SECURITY_SOX_LOG, DSL.name("KEY_security_sox_log_PRIMARY"), new TableField[] { SecuritySoxLog.SECURITY_SOX_LOG.ID }, true);
    public static final UniqueKey<SecuritySslCertificateRecord> KEY_SECURITY_SSL_CERTIFICATE_PRIMARY = Internal.createUniqueKey(SecuritySslCertificate.SECURITY_SSL_CERTIFICATE, DSL.name("KEY_security_ssl_certificate_PRIMARY"), new TableField[] { SecuritySslCertificate.SECURITY_SSL_CERTIFICATE.ID }, true);
    public static final UniqueKey<SecuritySslChallengeRecord> KEY_SECURITY_SSL_CHALLENGE_PRIMARY = Internal.createUniqueKey(SecuritySslChallenge.SECURITY_SSL_CHALLENGE, DSL.name("KEY_security_ssl_challenge_PRIMARY"), new TableField[] { SecuritySslChallenge.SECURITY_SSL_CHALLENGE.ID }, true);
    public static final UniqueKey<SecuritySslRequestRecord> KEY_SECURITY_SSL_REQUEST_PRIMARY = Internal.createUniqueKey(SecuritySslRequest.SECURITY_SSL_REQUEST, DSL.name("KEY_security_ssl_request_PRIMARY"), new TableField[] { SecuritySslRequest.SECURITY_SSL_REQUEST.ID }, true);
    public static final UniqueKey<SecuritySslRequestRecord> KEY_SECURITY_SSL_REQUEST_URL_ID = Internal.createUniqueKey(SecuritySslRequest.SECURITY_SSL_REQUEST, DSL.name("KEY_security_ssl_request_URL_ID"), new TableField[] { SecuritySslRequest.SECURITY_SSL_REQUEST.URL_ID }, true);
    public static final UniqueKey<SecurityUserRecord> KEY_SECURITY_USER_PRIMARY = Internal.createUniqueKey(SecurityUser.SECURITY_USER, DSL.name("KEY_security_user_PRIMARY"), new TableField[] { SecurityUser.SECURITY_USER.ID }, true);
    public static final UniqueKey<SecurityUserRecord> KEY_SECURITY_USER_UK1_USER_NAME = Internal.createUniqueKey(SecurityUser.SECURITY_USER, DSL.name("KEY_security_user_UK1_USER_NAME"), new TableField[] { SecurityUser.SECURITY_USER.CLIENT_ID, SecurityUser.SECURITY_USER.USER_NAME, SecurityUser.SECURITY_USER.EMAIL_ID, SecurityUser.SECURITY_USER.PHONE_NUMBER }, true);
    public static final UniqueKey<SecurityUserAddressRecord> KEY_SECURITY_USER_ADDRESS_PRIMARY = Internal.createUniqueKey(SecurityUserAddress.SECURITY_USER_ADDRESS, DSL.name("KEY_security_user_address_PRIMARY"), new TableField[] { SecurityUserAddress.SECURITY_USER_ADDRESS.ID }, true);
    public static final UniqueKey<SecurityUserTokenRecord> KEY_SECURITY_USER_TOKEN_PRIMARY = Internal.createUniqueKey(SecurityUserToken.SECURITY_USER_TOKEN, DSL.name("KEY_security_user_token_PRIMARY"), new TableField[] { SecurityUserToken.SECURITY_USER_TOKEN.ID }, true);
    public static final UniqueKey<SecurityV2RoleRecord> KEY_SECURITY_V2_ROLE_PRIMARY = Internal.createUniqueKey(SecurityV2Role.SECURITY_V2_ROLE, DSL.name("KEY_security_v2_role_PRIMARY"), new TableField[] { SecurityV2Role.SECURITY_V2_ROLE.ID }, true);
    public static final UniqueKey<SecurityV2RolePermissionRecord> KEY_SECURITY_V2_ROLE_PERMISSION_PRIMARY = Internal.createUniqueKey(SecurityV2RolePermission.SECURITY_V2_ROLE_PERMISSION, DSL.name("KEY_security_v2_role_permission_PRIMARY"), new TableField[] { SecurityV2RolePermission.SECURITY_V2_ROLE_PERMISSION.ID }, true);
    public static final UniqueKey<SecurityV2RolePermissionRecord> KEY_SECURITY_V2_ROLE_PERMISSION_UK1_ROLE_PERMISSION_ROLE_ID_PERMISSION_ID = Internal.createUniqueKey(SecurityV2RolePermission.SECURITY_V2_ROLE_PERMISSION, DSL.name("KEY_security_v2_role_permission_UK1_ROLE_PERMISSION_ROLE_ID_PERMISSION_ID"), new TableField[] { SecurityV2RolePermission.SECURITY_V2_ROLE_PERMISSION.ROLE_ID, SecurityV2RolePermission.SECURITY_V2_ROLE_PERMISSION.PERMISSION_ID }, true);
    public static final UniqueKey<SecurityV2RoleRoleRecord> KEY_SECURITY_V2_ROLE_ROLE_PRIMARY = Internal.createUniqueKey(SecurityV2RoleRole.SECURITY_V2_ROLE_ROLE, DSL.name("KEY_security_v2_role_role_PRIMARY"), new TableField[] { SecurityV2RoleRole.SECURITY_V2_ROLE_ROLE.ID }, true);
    public static final UniqueKey<SecurityV2RoleRoleRecord> KEY_SECURITY_V2_ROLE_ROLE_UK1_ROLE_ROLE_ROLE_ID_SUB_ROLE_ID = Internal.createUniqueKey(SecurityV2RoleRole.SECURITY_V2_ROLE_ROLE, DSL.name("KEY_security_v2_role_role_UK1_ROLE_ROLE_ROLE_ID_SUB_ROLE_ID"), new TableField[] { SecurityV2RoleRole.SECURITY_V2_ROLE_ROLE.ROLE_ID, SecurityV2RoleRole.SECURITY_V2_ROLE_ROLE.SUB_ROLE_ID }, true);
    public static final UniqueKey<SecurityV2UserRoleRecord> KEY_SECURITY_V2_USER_ROLE_PRIMARY = Internal.createUniqueKey(SecurityV2UserRole.SECURITY_V2_USER_ROLE, DSL.name("KEY_security_v2_user_role_PRIMARY"), new TableField[] { SecurityV2UserRole.SECURITY_V2_USER_ROLE.ID }, true);
    public static final UniqueKey<SecurityV2UserRoleRecord> KEY_SECURITY_V2_USER_ROLE_UK1_USER_ROLE_USER_ID_ROLE_ID = Internal.createUniqueKey(SecurityV2UserRole.SECURITY_V2_USER_ROLE, DSL.name("KEY_security_v2_user_role_UK1_USER_ROLE_USER_ID_ROLE_ID"), new TableField[] { SecurityV2UserRole.SECURITY_V2_USER_ROLE.USER_ID, SecurityV2UserRole.SECURITY_V2_USER_ROLE.ROLE_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<SecurityAppRecord, SecurityClientRecord> FK1_APP_CLIENT_ID = Internal.createForeignKey(SecurityApp.SECURITY_APP, DSL.name("FK1_APP_CLIENT_ID"), new TableField[] { SecurityApp.SECURITY_APP.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityAppAccessRecord, SecurityAppRecord> FK1_APP_ACCESS_APP_ID = Internal.createForeignKey(SecurityAppAccess.SECURITY_APP_ACCESS, DSL.name("FK1_APP_ACCESS_APP_ID"), new TableField[] { SecurityAppAccess.SECURITY_APP_ACCESS.APP_ID }, Keys.KEY_SECURITY_APP_PRIMARY, new TableField[] { SecurityApp.SECURITY_APP.ID }, true);
    public static final ForeignKey<SecurityAppAccessRecord, SecurityClientRecord> FK1_APP_ACCESS_CLIENT_ID = Internal.createForeignKey(SecurityAppAccess.SECURITY_APP_ACCESS, DSL.name("FK1_APP_ACCESS_CLIENT_ID"), new TableField[] { SecurityAppAccess.SECURITY_APP_ACCESS.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityAppDependencyRecord, SecurityAppRecord> FK1_APP_DEP_APP_ID = Internal.createForeignKey(SecurityAppDependency.SECURITY_APP_DEPENDENCY, DSL.name("FK1_APP_DEP_APP_ID"), new TableField[] { SecurityAppDependency.SECURITY_APP_DEPENDENCY.APP_ID }, Keys.KEY_SECURITY_APP_PRIMARY, new TableField[] { SecurityApp.SECURITY_APP.ID }, true);
    public static final ForeignKey<SecurityAppDependencyRecord, SecurityAppRecord> FK2_APP_DEP_DEP_APP_ID = Internal.createForeignKey(SecurityAppDependency.SECURITY_APP_DEPENDENCY, DSL.name("FK2_APP_DEP_DEP_APP_ID"), new TableField[] { SecurityAppDependency.SECURITY_APP_DEPENDENCY.DEP_APP_ID }, Keys.KEY_SECURITY_APP_PRIMARY, new TableField[] { SecurityApp.SECURITY_APP.ID }, true);
    public static final ForeignKey<SecurityAppPropertyRecord, SecurityAppRecord> FK1_APP_PROP_APP_ID = Internal.createForeignKey(SecurityAppProperty.SECURITY_APP_PROPERTY, DSL.name("FK1_APP_PROP_APP_ID"), new TableField[] { SecurityAppProperty.SECURITY_APP_PROPERTY.APP_ID }, Keys.KEY_SECURITY_APP_PRIMARY, new TableField[] { SecurityApp.SECURITY_APP.ID }, true);
    public static final ForeignKey<SecurityAppPropertyRecord, SecurityClientRecord> FK2_APP_PROP_CLNT_ID = Internal.createForeignKey(SecurityAppProperty.SECURITY_APP_PROPERTY, DSL.name("FK2_APP_PROP_CLNT_ID"), new TableField[] { SecurityAppProperty.SECURITY_APP_PROPERTY.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityAppRegAccessRecord, SecurityClientRecord> FK1_APP_REG_ACC_CLNT_ID = Internal.createForeignKey(SecurityAppRegAccess.SECURITY_APP_REG_ACCESS, DSL.name("FK1_APP_REG_ACC_CLNT_ID"), new TableField[] { SecurityAppRegAccess.SECURITY_APP_REG_ACCESS.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityAppRegAccessRecord, SecurityAppRecord> FK2_APP_REG_ACC_APP_ID = Internal.createForeignKey(SecurityAppRegAccess.SECURITY_APP_REG_ACCESS, DSL.name("FK2_APP_REG_ACC_APP_ID"), new TableField[] { SecurityAppRegAccess.SECURITY_APP_REG_ACCESS.APP_ID }, Keys.KEY_SECURITY_APP_PRIMARY, new TableField[] { SecurityApp.SECURITY_APP.ID }, true);
    public static final ForeignKey<SecurityAppRegAccessRecord, SecurityAppRecord> FK3_APP_REG_ACC_ALLOW_APP_ID = Internal.createForeignKey(SecurityAppRegAccess.SECURITY_APP_REG_ACCESS, DSL.name("FK3_APP_REG_ACC_ALLOW_APP_ID"), new TableField[] { SecurityAppRegAccess.SECURITY_APP_REG_ACCESS.ALLOW_APP_ID }, Keys.KEY_SECURITY_APP_PRIMARY, new TableField[] { SecurityApp.SECURITY_APP.ID }, true);
    public static final ForeignKey<SecurityAppRegAccessRecord, SecurityClientTypeRecord> FK4_APP_REG_ACC_CLIENT_TYPE = Internal.createForeignKey(SecurityAppRegAccess.SECURITY_APP_REG_ACCESS, DSL.name("FK4_APP_REG_ACC_CLIENT_TYPE"), new TableField[] { SecurityAppRegAccess.SECURITY_APP_REG_ACCESS.CLIENT_TYPE }, Keys.KEY_SECURITY_CLIENT_TYPE_UK1_CLIENT_TYPE_CODE, new TableField[] { SecurityClientType.SECURITY_CLIENT_TYPE.CODE }, true);
    public static final ForeignKey<SecurityAppRegFileAccessRecord, SecurityClientRecord> FK1_APP_REG_FILE_ACC_CLNT_ID = Internal.createForeignKey(SecurityAppRegFileAccess.SECURITY_APP_REG_FILE_ACCESS, DSL.name("FK1_APP_REG_FILE_ACC_CLNT_ID"), new TableField[] { SecurityAppRegFileAccess.SECURITY_APP_REG_FILE_ACCESS.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityAppRegFileAccessRecord, SecurityAppRecord> FK2_APP_REG_FILE_ACC_APP_ID = Internal.createForeignKey(SecurityAppRegFileAccess.SECURITY_APP_REG_FILE_ACCESS, DSL.name("FK2_APP_REG_FILE_ACC_APP_ID"), new TableField[] { SecurityAppRegFileAccess.SECURITY_APP_REG_FILE_ACCESS.APP_ID }, Keys.KEY_SECURITY_APP_PRIMARY, new TableField[] { SecurityApp.SECURITY_APP.ID }, true);
    public static final ForeignKey<SecurityAppRegFileAccessRecord, SecurityClientTypeRecord> FK4_APP_REG_FILE_ACC_CLIENT_TYPE = Internal.createForeignKey(SecurityAppRegFileAccess.SECURITY_APP_REG_FILE_ACCESS, DSL.name("FK4_APP_REG_FILE_ACC_CLIENT_TYPE"), new TableField[] { SecurityAppRegFileAccess.SECURITY_APP_REG_FILE_ACCESS.CLIENT_TYPE }, Keys.KEY_SECURITY_CLIENT_TYPE_UK1_CLIENT_TYPE_CODE, new TableField[] { SecurityClientType.SECURITY_CLIENT_TYPE.CODE }, true);
    public static final ForeignKey<SecurityAppRegIntegrationRecord, SecurityAppRecord> FK1_APP_REG_INTEGRATION_APP_ID = Internal.createForeignKey(SecurityAppRegIntegration.SECURITY_APP_REG_INTEGRATION, DSL.name("FK1_APP_REG_INTEGRATION_APP_ID"), new TableField[] { SecurityAppRegIntegration.SECURITY_APP_REG_INTEGRATION.APP_ID }, Keys.KEY_SECURITY_APP_PRIMARY, new TableField[] { SecurityApp.SECURITY_APP.ID }, true);
    public static final ForeignKey<SecurityAppRegIntegrationRecord, SecurityClientRecord> FK2_APP_REG_INTEGRATION_CLIENT_ID = Internal.createForeignKey(SecurityAppRegIntegration.SECURITY_APP_REG_INTEGRATION, DSL.name("FK2_APP_REG_INTEGRATION_CLIENT_ID"), new TableField[] { SecurityAppRegIntegration.SECURITY_APP_REG_INTEGRATION.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityAppRegIntegrationTokensRecord, SecurityAppRegIntegrationRecord> FK1_INTEGRATION_TOKEN_APP_REG_INTEGRATION_ID = Internal.createForeignKey(SecurityAppRegIntegrationTokens.SECURITY_APP_REG_INTEGRATION_TOKENS, DSL.name("FK1_INTEGRATION_TOKEN_APP_REG_INTEGRATION_ID"), new TableField[] { SecurityAppRegIntegrationTokens.SECURITY_APP_REG_INTEGRATION_TOKENS.INTEGRATION_ID }, Keys.KEY_SECURITY_APP_REG_INTEGRATION_PRIMARY, new TableField[] { SecurityAppRegIntegration.SECURITY_APP_REG_INTEGRATION.ID }, true);
    public static final ForeignKey<SecurityClientRecord, SecurityClientTypeRecord> FK1_CLIENT_CLIENT_TYPE_CODE = Internal.createForeignKey(SecurityClient.SECURITY_CLIENT, DSL.name("FK1_CLIENT_CLIENT_TYPE_CODE"), new TableField[] { SecurityClient.SECURITY_CLIENT.TYPE_CODE }, Keys.KEY_SECURITY_CLIENT_TYPE_UK1_CLIENT_TYPE_CODE, new TableField[] { SecurityClientType.SECURITY_CLIENT_TYPE.CODE }, true);
    public static final ForeignKey<SecurityClientAddressRecord, SecurityClientRecord> FK1_CLIENT_ADDRESS_CLIENT_ID = Internal.createForeignKey(SecurityClientAddress.SECURITY_CLIENT_ADDRESS, DSL.name("FK1_CLIENT_ADDRESS_CLIENT_ID"), new TableField[] { SecurityClientAddress.SECURITY_CLIENT_ADDRESS.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityClientAddressRecord, SecurityAddressRecord> FK2_CLIENT_ADDRESS_ADDRESS_ID = Internal.createForeignKey(SecurityClientAddress.SECURITY_CLIENT_ADDRESS, DSL.name("FK2_CLIENT_ADDRESS_ADDRESS_ID"), new TableField[] { SecurityClientAddress.SECURITY_CLIENT_ADDRESS.ADDRESS_ID }, Keys.KEY_SECURITY_ADDRESS_PRIMARY, new TableField[] { SecurityAddress.SECURITY_ADDRESS.ID }, true);
    public static final ForeignKey<SecurityClientHierarchyRecord, SecurityClientRecord> FK1_CLIENT_HIERARCHY_CLIENT_ID = Internal.createForeignKey(SecurityClientHierarchy.SECURITY_CLIENT_HIERARCHY, DSL.name("FK1_CLIENT_HIERARCHY_CLIENT_ID"), new TableField[] { SecurityClientHierarchy.SECURITY_CLIENT_HIERARCHY.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityClientHierarchyRecord, SecurityClientRecord> FK1_CLIENT_HIERARCHY_LEVEL_0 = Internal.createForeignKey(SecurityClientHierarchy.SECURITY_CLIENT_HIERARCHY, DSL.name("FK1_CLIENT_HIERARCHY_LEVEL_0"), new TableField[] { SecurityClientHierarchy.SECURITY_CLIENT_HIERARCHY.MANAGE_CLIENT_LEVEL_0 }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityClientHierarchyRecord, SecurityClientRecord> FK1_CLIENT_HIERARCHY_LEVEL_1 = Internal.createForeignKey(SecurityClientHierarchy.SECURITY_CLIENT_HIERARCHY, DSL.name("FK1_CLIENT_HIERARCHY_LEVEL_1"), new TableField[] { SecurityClientHierarchy.SECURITY_CLIENT_HIERARCHY.MANAGE_CLIENT_LEVEL_1 }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityClientHierarchyRecord, SecurityClientRecord> FK1_CLIENT_HIERARCHY_LEVEL_2 = Internal.createForeignKey(SecurityClientHierarchy.SECURITY_CLIENT_HIERARCHY, DSL.name("FK1_CLIENT_HIERARCHY_LEVEL_2"), new TableField[] { SecurityClientHierarchy.SECURITY_CLIENT_HIERARCHY.MANAGE_CLIENT_LEVEL_2 }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityClientHierarchyRecord, SecurityClientRecord> FK1_CLIENT_HIERARCHY_LEVEL_3 = Internal.createForeignKey(SecurityClientHierarchy.SECURITY_CLIENT_HIERARCHY, DSL.name("FK1_CLIENT_HIERARCHY_LEVEL_3"), new TableField[] { SecurityClientHierarchy.SECURITY_CLIENT_HIERARCHY.MANAGE_CLIENT_LEVEL_3 }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityClientOtpPolicyRecord, SecurityClientRecord> FK1_CLIENT_OTP_POL_CLIENT_ID = Internal.createForeignKey(SecurityClientOtpPolicy.SECURITY_CLIENT_OTP_POLICY, DSL.name("FK1_CLIENT_OTP_POL_CLIENT_ID"), new TableField[] { SecurityClientOtpPolicy.SECURITY_CLIENT_OTP_POLICY.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityClientOtpPolicyRecord, SecurityAppRecord> FK2_CLIENT_OTP_POL_APP_ID = Internal.createForeignKey(SecurityClientOtpPolicy.SECURITY_CLIENT_OTP_POLICY, DSL.name("FK2_CLIENT_OTP_POL_APP_ID"), new TableField[] { SecurityClientOtpPolicy.SECURITY_CLIENT_OTP_POLICY.APP_ID }, Keys.KEY_SECURITY_APP_PRIMARY, new TableField[] { SecurityApp.SECURITY_APP.ID }, true);
    public static final ForeignKey<SecurityClientPasswordPolicyRecord, SecurityClientRecord> FK1_CLIENT_PWD_POL_CLIENT_ID = Internal.createForeignKey(SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY, DSL.name("FK1_CLIENT_PWD_POL_CLIENT_ID"), new TableField[] { SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityClientPasswordPolicyRecord, SecurityAppRecord> FK2_CLIENT_PWD_POL_APP_ID = Internal.createForeignKey(SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY, DSL.name("FK2_CLIENT_PWD_POL_APP_ID"), new TableField[] { SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY.APP_ID }, Keys.KEY_SECURITY_APP_PRIMARY, new TableField[] { SecurityApp.SECURITY_APP.ID }, true);
    public static final ForeignKey<SecurityClientPinPolicyRecord, SecurityClientRecord> FK1_CLIENT_PIN_POL_CLIENT_ID = Internal.createForeignKey(SecurityClientPinPolicy.SECURITY_CLIENT_PIN_POLICY, DSL.name("FK1_CLIENT_PIN_POL_CLIENT_ID"), new TableField[] { SecurityClientPinPolicy.SECURITY_CLIENT_PIN_POLICY.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityClientPinPolicyRecord, SecurityAppRecord> FK2_CLIENT_PIN_POL_APP_ID = Internal.createForeignKey(SecurityClientPinPolicy.SECURITY_CLIENT_PIN_POLICY, DSL.name("FK2_CLIENT_PIN_POL_APP_ID"), new TableField[] { SecurityClientPinPolicy.SECURITY_CLIENT_PIN_POLICY.APP_ID }, Keys.KEY_SECURITY_APP_PRIMARY, new TableField[] { SecurityApp.SECURITY_APP.ID }, true);
    public static final ForeignKey<SecurityClientProfileRecord, SecurityClientRecord> FK1_CLIENT_PROFILE_CLIENT_ID = Internal.createForeignKey(SecurityClientProfile.SECURITY_CLIENT_PROFILE, DSL.name("FK1_CLIENT_PROFILE_CLIENT_ID"), new TableField[] { SecurityClientProfile.SECURITY_CLIENT_PROFILE.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityClientProfileRecord, SecurityProfileRecord> FK2_CLIENT_PROFILE_PROFILE_ID = Internal.createForeignKey(SecurityClientProfile.SECURITY_CLIENT_PROFILE, DSL.name("FK2_CLIENT_PROFILE_PROFILE_ID"), new TableField[] { SecurityClientProfile.SECURITY_CLIENT_PROFILE.PROFILE_ID }, Keys.KEY_SECURITY_PROFILE_PRIMARY, new TableField[] { SecurityProfile.SECURITY_PROFILE.ID }, true);
    public static final ForeignKey<SecurityClientUrlRecord, SecurityAppRecord> FK1_CLIENT_URL_APP_CODE = Internal.createForeignKey(SecurityClientUrl.SECURITY_CLIENT_URL, DSL.name("FK1_CLIENT_URL_APP_CODE"), new TableField[] { SecurityClientUrl.SECURITY_CLIENT_URL.APP_CODE }, Keys.KEY_SECURITY_APP_UK1_APPCODE, new TableField[] { SecurityApp.SECURITY_APP.APP_CODE }, true);
    public static final ForeignKey<SecurityClientUrlRecord, SecurityClientRecord> FK1_CLIENT_URL_CLIENT_ID = Internal.createForeignKey(SecurityClientUrl.SECURITY_CLIENT_URL, DSL.name("FK1_CLIENT_URL_CLIENT_ID"), new TableField[] { SecurityClientUrl.SECURITY_CLIENT_URL.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityDepartmentRecord, SecurityClientRecord> FK1_DEPARTMENT_CLIENT_ID = Internal.createForeignKey(SecurityDepartment.SECURITY_DEPARTMENT, DSL.name("FK1_DEPARTMENT_CLIENT_ID"), new TableField[] { SecurityDepartment.SECURITY_DEPARTMENT.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityDepartmentRecord, SecurityDepartmentRecord> FK2_DEPARTMENT_PARENT_ID = Internal.createForeignKey(SecurityDepartment.SECURITY_DEPARTMENT, DSL.name("FK2_DEPARTMENT_PARENT_ID"), new TableField[] { SecurityDepartment.SECURITY_DEPARTMENT.PARENT_DEPARTMENT_ID }, Keys.KEY_SECURITY_DEPARTMENT_PRIMARY, new TableField[] { SecurityDepartment.SECURITY_DEPARTMENT.ID }, true);
    public static final ForeignKey<SecurityOtpRecord, SecurityAppRecord> FK1_OTP_APP_ID = Internal.createForeignKey(SecurityOtp.SECURITY_OTP, DSL.name("FK1_OTP_APP_ID"), new TableField[] { SecurityOtp.SECURITY_OTP.APP_ID }, Keys.KEY_SECURITY_APP_PRIMARY, new TableField[] { SecurityApp.SECURITY_APP.ID }, true);
    public static final ForeignKey<SecurityOtpRecord, SecurityUserRecord> FK2_OTP_USER_ID = Internal.createForeignKey(SecurityOtp.SECURITY_OTP, DSL.name("FK2_OTP_USER_ID"), new TableField[] { SecurityOtp.SECURITY_OTP.USER_ID }, Keys.KEY_SECURITY_USER_PRIMARY, new TableField[] { SecurityUser.SECURITY_USER.ID }, true);
    public static final ForeignKey<SecurityPastPasswordsRecord, SecurityUserRecord> FK1_PAST_PASSWORD_USER_ID = Internal.createForeignKey(SecurityPastPasswords.SECURITY_PAST_PASSWORDS, DSL.name("FK1_PAST_PASSWORD_USER_ID"), new TableField[] { SecurityPastPasswords.SECURITY_PAST_PASSWORDS.USER_ID }, Keys.KEY_SECURITY_USER_PRIMARY, new TableField[] { SecurityUser.SECURITY_USER.ID }, true);
    public static final ForeignKey<SecurityPastPinsRecord, SecurityUserRecord> FK1_PAST_PIN_USER_ID = Internal.createForeignKey(SecurityPastPins.SECURITY_PAST_PINS, DSL.name("FK1_PAST_PIN_USER_ID"), new TableField[] { SecurityPastPins.SECURITY_PAST_PINS.USER_ID }, Keys.KEY_SECURITY_USER_PRIMARY, new TableField[] { SecurityUser.SECURITY_USER.ID }, true);
    public static final ForeignKey<SecurityPermissionRecord, SecurityClientRecord> FK1_PERMISSION_CLIENT_ID = Internal.createForeignKey(SecurityPermission.SECURITY_PERMISSION, DSL.name("FK1_PERMISSION_CLIENT_ID"), new TableField[] { SecurityPermission.SECURITY_PERMISSION.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityPermissionRecord, SecurityAppRecord> FK2_PERMISSION_APP_ID = Internal.createForeignKey(SecurityPermission.SECURITY_PERMISSION, DSL.name("FK2_PERMISSION_APP_ID"), new TableField[] { SecurityPermission.SECURITY_PERMISSION.APP_ID }, Keys.KEY_SECURITY_APP_PRIMARY, new TableField[] { SecurityApp.SECURITY_APP.ID }, true);
    public static final ForeignKey<SecurityProfileRecord, SecurityClientRecord> FK1_PROFILE_CLIENT_ID = Internal.createForeignKey(SecurityProfile.SECURITY_PROFILE, DSL.name("FK1_PROFILE_CLIENT_ID"), new TableField[] { SecurityProfile.SECURITY_PROFILE.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityProfileRecord, SecurityAppRecord> FK2_PROFILE_APP_ID = Internal.createForeignKey(SecurityProfile.SECURITY_PROFILE, DSL.name("FK2_PROFILE_APP_ID"), new TableField[] { SecurityProfile.SECURITY_PROFILE.APP_ID }, Keys.KEY_SECURITY_APP_PRIMARY, new TableField[] { SecurityApp.SECURITY_APP.ID }, true);
    public static final ForeignKey<SecurityProfileRecord, SecurityProfileRecord> FK3_PROFILE_PARENT_PROFILE_ID = Internal.createForeignKey(SecurityProfile.SECURITY_PROFILE, DSL.name("FK3_PROFILE_PARENT_PROFILE_ID"), new TableField[] { SecurityProfile.SECURITY_PROFILE.PARENT_PROFILE_ID }, Keys.KEY_SECURITY_PROFILE_PRIMARY, new TableField[] { SecurityProfile.SECURITY_PROFILE.ID }, true);
    public static final ForeignKey<SecurityProfileRoleRecord, SecurityProfileRecord> FK1_PROFILE_ROLE_PROFILE_ID = Internal.createForeignKey(SecurityProfileRole.SECURITY_PROFILE_ROLE, DSL.name("FK1_PROFILE_ROLE_PROFILE_ID"), new TableField[] { SecurityProfileRole.SECURITY_PROFILE_ROLE.PROFILE_ID }, Keys.KEY_SECURITY_PROFILE_PRIMARY, new TableField[] { SecurityProfile.SECURITY_PROFILE.ID }, true);
    public static final ForeignKey<SecurityProfileRoleRecord, SecurityV2RoleRecord> FK2_PROFILE_ROLE_ROLE_ID = Internal.createForeignKey(SecurityProfileRole.SECURITY_PROFILE_ROLE, DSL.name("FK2_PROFILE_ROLE_ROLE_ID"), new TableField[] { SecurityProfileRole.SECURITY_PROFILE_ROLE.ROLE_ID }, Keys.KEY_SECURITY_V2_ROLE_PRIMARY, new TableField[] { SecurityV2Role.SECURITY_V2_ROLE.ID }, true);
    public static final ForeignKey<SecurityProfileUserRecord, SecurityProfileRecord> FK1_PROFILE_USER_PROFILE_ID = Internal.createForeignKey(SecurityProfileUser.SECURITY_PROFILE_USER, DSL.name("FK1_PROFILE_USER_PROFILE_ID"), new TableField[] { SecurityProfileUser.SECURITY_PROFILE_USER.PROFILE_ID }, Keys.KEY_SECURITY_PROFILE_PRIMARY, new TableField[] { SecurityProfile.SECURITY_PROFILE.ID }, true);
    public static final ForeignKey<SecurityProfileUserRecord, SecurityUserRecord> FK2_PROFILE_USER_USER_ID = Internal.createForeignKey(SecurityProfileUser.SECURITY_PROFILE_USER, DSL.name("FK2_PROFILE_USER_USER_ID"), new TableField[] { SecurityProfileUser.SECURITY_PROFILE_USER.USER_ID }, Keys.KEY_SECURITY_USER_PRIMARY, new TableField[] { SecurityUser.SECURITY_USER.ID }, true);
    public static final ForeignKey<SecuritySslCertificateRecord, SecurityClientUrlRecord> FK1_SSL_CRT_CLNT_URL_ID = Internal.createForeignKey(SecuritySslCertificate.SECURITY_SSL_CERTIFICATE, DSL.name("FK1_SSL_CRT_CLNT_URL_ID"), new TableField[] { SecuritySslCertificate.SECURITY_SSL_CERTIFICATE.URL_ID }, Keys.KEY_SECURITY_CLIENT_URL_PRIMARY, new TableField[] { SecurityClientUrl.SECURITY_CLIENT_URL.ID }, true);
    public static final ForeignKey<SecuritySslChallengeRecord, SecuritySslRequestRecord> FK1_SSL_CHLNG_REQ_ID = Internal.createForeignKey(SecuritySslChallenge.SECURITY_SSL_CHALLENGE, DSL.name("FK1_SSL_CHLNG_REQ_ID"), new TableField[] { SecuritySslChallenge.SECURITY_SSL_CHALLENGE.REQUEST_ID }, Keys.KEY_SECURITY_SSL_REQUEST_PRIMARY, new TableField[] { SecuritySslRequest.SECURITY_SSL_REQUEST.ID }, true);
    public static final ForeignKey<SecuritySslRequestRecord, SecurityClientUrlRecord> FK1_SSL_REQ_CLNT_URL_ID = Internal.createForeignKey(SecuritySslRequest.SECURITY_SSL_REQUEST, DSL.name("FK1_SSL_REQ_CLNT_URL_ID"), new TableField[] { SecuritySslRequest.SECURITY_SSL_REQUEST.URL_ID }, Keys.KEY_SECURITY_CLIENT_URL_PRIMARY, new TableField[] { SecurityClientUrl.SECURITY_CLIENT_URL.ID }, true);
    public static final ForeignKey<SecurityUserRecord, SecurityClientRecord> FK1_USER_CLIENT_ID = Internal.createForeignKey(SecurityUser.SECURITY_USER, DSL.name("FK1_USER_CLIENT_ID"), new TableField[] { SecurityUser.SECURITY_USER.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityUserAddressRecord, SecurityUserRecord> FK1_USER_ADDRESS_USER_ID = Internal.createForeignKey(SecurityUserAddress.SECURITY_USER_ADDRESS, DSL.name("FK1_USER_ADDRESS_USER_ID"), new TableField[] { SecurityUserAddress.SECURITY_USER_ADDRESS.USER_ID }, Keys.KEY_SECURITY_USER_PRIMARY, new TableField[] { SecurityUser.SECURITY_USER.ID }, true);
    public static final ForeignKey<SecurityUserAddressRecord, SecurityAddressRecord> FK2_USER_ADDRESS_ADDRESS_ID = Internal.createForeignKey(SecurityUserAddress.SECURITY_USER_ADDRESS, DSL.name("FK2_USER_ADDRESS_ADDRESS_ID"), new TableField[] { SecurityUserAddress.SECURITY_USER_ADDRESS.ADDRESS_ID }, Keys.KEY_SECURITY_ADDRESS_PRIMARY, new TableField[] { SecurityAddress.SECURITY_ADDRESS.ID }, true);
    public static final ForeignKey<SecurityUserTokenRecord, SecurityUserRecord> FK1_USER_TOKEN_USER_ID = Internal.createForeignKey(SecurityUserToken.SECURITY_USER_TOKEN, DSL.name("FK1_USER_TOKEN_USER_ID"), new TableField[] { SecurityUserToken.SECURITY_USER_TOKEN.USER_ID }, Keys.KEY_SECURITY_USER_PRIMARY, new TableField[] { SecurityUser.SECURITY_USER.ID }, true);
    public static final ForeignKey<SecurityV2RoleRecord, SecurityClientRecord> FK1_V2_ROLE_CLIENT_ID = Internal.createForeignKey(SecurityV2Role.SECURITY_V2_ROLE, DSL.name("FK1_V2_ROLE_CLIENT_ID"), new TableField[] { SecurityV2Role.SECURITY_V2_ROLE.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityV2RoleRecord, SecurityAppRecord> FK2_V2_ROLE_APP_ID = Internal.createForeignKey(SecurityV2Role.SECURITY_V2_ROLE, DSL.name("FK2_V2_ROLE_APP_ID"), new TableField[] { SecurityV2Role.SECURITY_V2_ROLE.APP_ID }, Keys.KEY_SECURITY_APP_PRIMARY, new TableField[] { SecurityApp.SECURITY_APP.ID }, true);
    public static final ForeignKey<SecurityV2RolePermissionRecord, SecurityV2RoleRecord> FK1_ROLE_PERMISSION_ROLE_ID = Internal.createForeignKey(SecurityV2RolePermission.SECURITY_V2_ROLE_PERMISSION, DSL.name("FK1_ROLE_PERMISSION_ROLE_ID"), new TableField[] { SecurityV2RolePermission.SECURITY_V2_ROLE_PERMISSION.ROLE_ID }, Keys.KEY_SECURITY_V2_ROLE_PRIMARY, new TableField[] { SecurityV2Role.SECURITY_V2_ROLE.ID }, true);
    public static final ForeignKey<SecurityV2RolePermissionRecord, SecurityPermissionRecord> FK2_ROLE_PERMISSION_PERMISSION_ID = Internal.createForeignKey(SecurityV2RolePermission.SECURITY_V2_ROLE_PERMISSION, DSL.name("FK2_ROLE_PERMISSION_PERMISSION_ID"), new TableField[] { SecurityV2RolePermission.SECURITY_V2_ROLE_PERMISSION.PERMISSION_ID }, Keys.KEY_SECURITY_PERMISSION_PRIMARY, new TableField[] { SecurityPermission.SECURITY_PERMISSION.ID }, true);
    public static final ForeignKey<SecurityV2RoleRoleRecord, SecurityV2RoleRecord> FK1_ROLE_ROLE_ROLE_ID = Internal.createForeignKey(SecurityV2RoleRole.SECURITY_V2_ROLE_ROLE, DSL.name("FK1_ROLE_ROLE_ROLE_ID"), new TableField[] { SecurityV2RoleRole.SECURITY_V2_ROLE_ROLE.ROLE_ID }, Keys.KEY_SECURITY_V2_ROLE_PRIMARY, new TableField[] { SecurityV2Role.SECURITY_V2_ROLE.ID }, true);
    public static final ForeignKey<SecurityV2RoleRoleRecord, SecurityV2RoleRecord> FK2_ROLE_ROLE_SUB_ROLE_ID = Internal.createForeignKey(SecurityV2RoleRole.SECURITY_V2_ROLE_ROLE, DSL.name("FK2_ROLE_ROLE_SUB_ROLE_ID"), new TableField[] { SecurityV2RoleRole.SECURITY_V2_ROLE_ROLE.SUB_ROLE_ID }, Keys.KEY_SECURITY_V2_ROLE_PRIMARY, new TableField[] { SecurityV2Role.SECURITY_V2_ROLE.ID }, true);
    public static final ForeignKey<SecurityV2UserRoleRecord, SecurityUserRecord> FK1_USER_ROLE_V2_USER_ID = Internal.createForeignKey(SecurityV2UserRole.SECURITY_V2_USER_ROLE, DSL.name("FK1_USER_ROLE_V2_USER_ID"), new TableField[] { SecurityV2UserRole.SECURITY_V2_USER_ROLE.USER_ID }, Keys.KEY_SECURITY_USER_PRIMARY, new TableField[] { SecurityUser.SECURITY_USER.ID }, true);
    public static final ForeignKey<SecurityV2UserRoleRecord, SecurityV2RoleRecord> FK2_USER_ROLE_V2_ROLE_ID = Internal.createForeignKey(SecurityV2UserRole.SECURITY_V2_USER_ROLE, DSL.name("FK2_USER_ROLE_V2_ROLE_ID"), new TableField[] { SecurityV2UserRole.SECURITY_V2_USER_ROLE.ROLE_ID }, Keys.KEY_SECURITY_V2_ROLE_PRIMARY, new TableField[] { SecurityV2Role.SECURITY_V2_ROLE.ID }, true);
}
