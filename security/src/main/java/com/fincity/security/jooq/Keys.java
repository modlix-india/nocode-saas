/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq;


import com.fincity.security.jooq.tables.SecurityAddress;
import com.fincity.security.jooq.tables.SecurityApp;
import com.fincity.security.jooq.tables.SecurityAppAccess;
import com.fincity.security.jooq.tables.SecurityAppDependency;
import com.fincity.security.jooq.tables.SecurityAppProperty;
import com.fincity.security.jooq.tables.SecurityAppRegAccess;
import com.fincity.security.jooq.tables.SecurityAppRegFileAccess;
import com.fincity.security.jooq.tables.SecurityAppRegIntegration;
import com.fincity.security.jooq.tables.SecurityAppRegIntegrationTokens;
import com.fincity.security.jooq.tables.SecurityAppRegPackage;
import com.fincity.security.jooq.tables.SecurityAppRegUserRole;
import com.fincity.security.jooq.tables.SecurityClient;
import com.fincity.security.jooq.tables.SecurityClientAddress;
import com.fincity.security.jooq.tables.SecurityClientHierarchy;
import com.fincity.security.jooq.tables.SecurityClientManage;
import com.fincity.security.jooq.tables.SecurityClientOtpPolicy;
import com.fincity.security.jooq.tables.SecurityClientPackage;
import com.fincity.security.jooq.tables.SecurityClientPasswordPolicy;
import com.fincity.security.jooq.tables.SecurityClientPinPolicy;
import com.fincity.security.jooq.tables.SecurityClientType;
import com.fincity.security.jooq.tables.SecurityClientUrl;
import com.fincity.security.jooq.tables.SecurityCodeAccess;
import com.fincity.security.jooq.tables.SecurityOrgStructure;
import com.fincity.security.jooq.tables.SecurityOtp;
import com.fincity.security.jooq.tables.SecurityPackage;
import com.fincity.security.jooq.tables.SecurityPackageRole;
import com.fincity.security.jooq.tables.SecurityPastPasswords;
import com.fincity.security.jooq.tables.SecurityPastPins;
import com.fincity.security.jooq.tables.SecurityPermission;
import com.fincity.security.jooq.tables.SecurityRole;
import com.fincity.security.jooq.tables.SecurityRolePermission;
import com.fincity.security.jooq.tables.SecuritySoxLog;
import com.fincity.security.jooq.tables.SecuritySslCertificate;
import com.fincity.security.jooq.tables.SecuritySslChallenge;
import com.fincity.security.jooq.tables.SecuritySslRequest;
import com.fincity.security.jooq.tables.SecurityUser;
import com.fincity.security.jooq.tables.SecurityUserAddress;
import com.fincity.security.jooq.tables.SecurityUserRolePermission;
import com.fincity.security.jooq.tables.SecurityUserToken;
import com.fincity.security.jooq.tables.records.SecurityAddressRecord;
import com.fincity.security.jooq.tables.records.SecurityAppAccessRecord;
import com.fincity.security.jooq.tables.records.SecurityAppDependencyRecord;
import com.fincity.security.jooq.tables.records.SecurityAppPropertyRecord;
import com.fincity.security.jooq.tables.records.SecurityAppRecord;
import com.fincity.security.jooq.tables.records.SecurityAppRegAccessRecord;
import com.fincity.security.jooq.tables.records.SecurityAppRegFileAccessRecord;
import com.fincity.security.jooq.tables.records.SecurityAppRegIntegrationRecord;
import com.fincity.security.jooq.tables.records.SecurityAppRegIntegrationTokensRecord;
import com.fincity.security.jooq.tables.records.SecurityAppRegPackageRecord;
import com.fincity.security.jooq.tables.records.SecurityAppRegUserRoleRecord;
import com.fincity.security.jooq.tables.records.SecurityClientAddressRecord;
import com.fincity.security.jooq.tables.records.SecurityClientHierarchyRecord;
import com.fincity.security.jooq.tables.records.SecurityClientManageRecord;
import com.fincity.security.jooq.tables.records.SecurityClientOtpPolicyRecord;
import com.fincity.security.jooq.tables.records.SecurityClientPackageRecord;
import com.fincity.security.jooq.tables.records.SecurityClientPasswordPolicyRecord;
import com.fincity.security.jooq.tables.records.SecurityClientPinPolicyRecord;
import com.fincity.security.jooq.tables.records.SecurityClientRecord;
import com.fincity.security.jooq.tables.records.SecurityClientTypeRecord;
import com.fincity.security.jooq.tables.records.SecurityClientUrlRecord;
import com.fincity.security.jooq.tables.records.SecurityCodeAccessRecord;
import com.fincity.security.jooq.tables.records.SecurityOrgStructureRecord;
import com.fincity.security.jooq.tables.records.SecurityOtpRecord;
import com.fincity.security.jooq.tables.records.SecurityPackageRecord;
import com.fincity.security.jooq.tables.records.SecurityPackageRoleRecord;
import com.fincity.security.jooq.tables.records.SecurityPastPasswordsRecord;
import com.fincity.security.jooq.tables.records.SecurityPastPinsRecord;
import com.fincity.security.jooq.tables.records.SecurityPermissionRecord;
import com.fincity.security.jooq.tables.records.SecurityRolePermissionRecord;
import com.fincity.security.jooq.tables.records.SecurityRoleRecord;
import com.fincity.security.jooq.tables.records.SecuritySoxLogRecord;
import com.fincity.security.jooq.tables.records.SecuritySslCertificateRecord;
import com.fincity.security.jooq.tables.records.SecuritySslChallengeRecord;
import com.fincity.security.jooq.tables.records.SecuritySslRequestRecord;
import com.fincity.security.jooq.tables.records.SecurityUserAddressRecord;
import com.fincity.security.jooq.tables.records.SecurityUserRecord;
import com.fincity.security.jooq.tables.records.SecurityUserRolePermissionRecord;
import com.fincity.security.jooq.tables.records.SecurityUserTokenRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * security.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<SecurityAddressRecord> KEY_SECURITY_ADDRESS_PRIMARY = Internal.createUniqueKey(SecurityAddress.SECURITY_ADDRESS, DSL.name("KEY_security_address_PRIMARY"), new TableField[] { SecurityAddress.SECURITY_ADDRESS.ID }, true);
    public static final UniqueKey<SecurityAppRecord> KEY_SECURITY_APP_PRIMARY = Internal.createUniqueKey(SecurityApp.SECURITY_APP, DSL.name("KEY_security_app_PRIMARY"), new TableField[] { SecurityApp.SECURITY_APP.ID }, true);
    public static final UniqueKey<SecurityAppRecord> KEY_SECURITY_APP_UK1_APPCODE = Internal.createUniqueKey(SecurityApp.SECURITY_APP, DSL.name("KEY_security_app_UK1_APPCODE"), new TableField[] { SecurityApp.SECURITY_APP.APP_CODE }, true);
    public static final UniqueKey<SecurityAppAccessRecord> KEY_SECURITY_APP_ACCESS_PRIMARY = Internal.createUniqueKey(SecurityAppAccess.SECURITY_APP_ACCESS, DSL.name("KEY_security_app_access_PRIMARY"), new TableField[] { SecurityAppAccess.SECURITY_APP_ACCESS.ID }, true);
    public static final UniqueKey<SecurityAppAccessRecord> KEY_SECURITY_APP_ACCESS_UK1_APPCLIENT = Internal.createUniqueKey(SecurityAppAccess.SECURITY_APP_ACCESS, DSL.name("KEY_security_app_access_UK1_APPCLIENT"), new TableField[] { SecurityAppAccess.SECURITY_APP_ACCESS.CLIENT_ID, SecurityAppAccess.SECURITY_APP_ACCESS.APP_ID }, true);
    public static final UniqueKey<SecurityAppDependencyRecord> KEY_SECURITY_APP_DEPENDENCY_APP_ID = Internal.createUniqueKey(SecurityAppDependency.SECURITY_APP_DEPENDENCY, DSL.name("KEY_security_app_dependency_APP_ID"), new TableField[] { SecurityAppDependency.SECURITY_APP_DEPENDENCY.APP_ID, SecurityAppDependency.SECURITY_APP_DEPENDENCY.DEP_APP_ID }, true);
    public static final UniqueKey<SecurityAppDependencyRecord> KEY_SECURITY_APP_DEPENDENCY_PRIMARY = Internal.createUniqueKey(SecurityAppDependency.SECURITY_APP_DEPENDENCY, DSL.name("KEY_security_app_dependency_PRIMARY"), new TableField[] { SecurityAppDependency.SECURITY_APP_DEPENDENCY.ID }, true);
    public static final UniqueKey<SecurityAppPropertyRecord> KEY_SECURITY_APP_PROPERTY_APP_ID = Internal.createUniqueKey(SecurityAppProperty.SECURITY_APP_PROPERTY, DSL.name("KEY_security_app_property_APP_ID"), new TableField[] { SecurityAppProperty.SECURITY_APP_PROPERTY.APP_ID, SecurityAppProperty.SECURITY_APP_PROPERTY.CLIENT_ID, SecurityAppProperty.SECURITY_APP_PROPERTY.NAME }, true);
    public static final UniqueKey<SecurityAppPropertyRecord> KEY_SECURITY_APP_PROPERTY_PRIMARY = Internal.createUniqueKey(SecurityAppProperty.SECURITY_APP_PROPERTY, DSL.name("KEY_security_app_property_PRIMARY"), new TableField[] { SecurityAppProperty.SECURITY_APP_PROPERTY.ID }, true);
    public static final UniqueKey<SecurityAppRegAccessRecord> KEY_SECURITY_APP_REG_ACCESS_CLIENT_ID = Internal.createUniqueKey(SecurityAppRegAccess.SECURITY_APP_REG_ACCESS, DSL.name("KEY_security_app_reg_access_CLIENT_ID"), new TableField[] { SecurityAppRegAccess.SECURITY_APP_REG_ACCESS.CLIENT_ID, SecurityAppRegAccess.SECURITY_APP_REG_ACCESS.APP_ID, SecurityAppRegAccess.SECURITY_APP_REG_ACCESS.ALLOW_APP_ID, SecurityAppRegAccess.SECURITY_APP_REG_ACCESS.CLIENT_TYPE, SecurityAppRegAccess.SECURITY_APP_REG_ACCESS.LEVEL, SecurityAppRegAccess.SECURITY_APP_REG_ACCESS.BUSINESS_TYPE }, true);
    public static final UniqueKey<SecurityAppRegAccessRecord> KEY_SECURITY_APP_REG_ACCESS_PRIMARY = Internal.createUniqueKey(SecurityAppRegAccess.SECURITY_APP_REG_ACCESS, DSL.name("KEY_security_app_reg_access_PRIMARY"), new TableField[] { SecurityAppRegAccess.SECURITY_APP_REG_ACCESS.ID }, true);
    public static final UniqueKey<SecurityAppRegFileAccessRecord> KEY_SECURITY_APP_REG_FILE_ACCESS_PRIMARY = Internal.createUniqueKey(SecurityAppRegFileAccess.SECURITY_APP_REG_FILE_ACCESS, DSL.name("KEY_security_app_reg_file_access_PRIMARY"), new TableField[] { SecurityAppRegFileAccess.SECURITY_APP_REG_FILE_ACCESS.ID }, true);
    public static final UniqueKey<SecurityAppRegIntegrationRecord> KEY_SECURITY_APP_REG_INTEGRATION_PRIMARY = Internal.createUniqueKey(SecurityAppRegIntegration.SECURITY_APP_REG_INTEGRATION, DSL.name("KEY_security_app_reg_integration_PRIMARY"), new TableField[] { SecurityAppRegIntegration.SECURITY_APP_REG_INTEGRATION.ID }, true);
    public static final UniqueKey<SecurityAppRegIntegrationRecord> KEY_SECURITY_APP_REG_INTEGRATION_UK1_APP_REG_INTEGRATION = Internal.createUniqueKey(SecurityAppRegIntegration.SECURITY_APP_REG_INTEGRATION, DSL.name("KEY_security_app_reg_integration_UK1_APP_REG_INTEGRATION"), new TableField[] { SecurityAppRegIntegration.SECURITY_APP_REG_INTEGRATION.APP_ID, SecurityAppRegIntegration.SECURITY_APP_REG_INTEGRATION.CLIENT_ID, SecurityAppRegIntegration.SECURITY_APP_REG_INTEGRATION.PLATFORM }, true);
    public static final UniqueKey<SecurityAppRegIntegrationTokensRecord> KEY_SECURITY_APP_REG_INTEGRATION_TOKENS_PRIMARY = Internal.createUniqueKey(SecurityAppRegIntegrationTokens.SECURITY_APP_REG_INTEGRATION_TOKENS, DSL.name("KEY_security_app_reg_integration_tokens_PRIMARY"), new TableField[] { SecurityAppRegIntegrationTokens.SECURITY_APP_REG_INTEGRATION_TOKENS.ID }, true);
    public static final UniqueKey<SecurityAppRegIntegrationTokensRecord> KEY_SECURITY_APP_REG_INTEGRATION_TOKENS_UK1_INTEGRATION_TOKEN = Internal.createUniqueKey(SecurityAppRegIntegrationTokens.SECURITY_APP_REG_INTEGRATION_TOKENS, DSL.name("KEY_security_app_reg_integration_tokens_UK1_INTEGRATION_TOKEN"), new TableField[] { SecurityAppRegIntegrationTokens.SECURITY_APP_REG_INTEGRATION_TOKENS.INTEGRATION_ID, SecurityAppRegIntegrationTokens.SECURITY_APP_REG_INTEGRATION_TOKENS.CREATED_BY }, true);
    public static final UniqueKey<SecurityAppRegIntegrationTokensRecord> KEY_SECURITY_APP_REG_INTEGRATION_TOKENS_UK2_INTEGRATION_TOKEN_STATE = Internal.createUniqueKey(SecurityAppRegIntegrationTokens.SECURITY_APP_REG_INTEGRATION_TOKENS, DSL.name("KEY_security_app_reg_integration_tokens_UK2_INTEGRATION_TOKEN_STATE"), new TableField[] { SecurityAppRegIntegrationTokens.SECURITY_APP_REG_INTEGRATION_TOKENS.STATE }, true);
    public static final UniqueKey<SecurityAppRegPackageRecord> KEY_SECURITY_APP_REG_PACKAGE_CLIENT_ID = Internal.createUniqueKey(SecurityAppRegPackage.SECURITY_APP_REG_PACKAGE, DSL.name("KEY_security_app_reg_package_CLIENT_ID"), new TableField[] { SecurityAppRegPackage.SECURITY_APP_REG_PACKAGE.CLIENT_ID, SecurityAppRegPackage.SECURITY_APP_REG_PACKAGE.APP_ID, SecurityAppRegPackage.SECURITY_APP_REG_PACKAGE.PACKAGE_ID, SecurityAppRegPackage.SECURITY_APP_REG_PACKAGE.CLIENT_TYPE, SecurityAppRegPackage.SECURITY_APP_REG_PACKAGE.LEVEL, SecurityAppRegPackage.SECURITY_APP_REG_PACKAGE.BUSINESS_TYPE }, true);
    public static final UniqueKey<SecurityAppRegPackageRecord> KEY_SECURITY_APP_REG_PACKAGE_PRIMARY = Internal.createUniqueKey(SecurityAppRegPackage.SECURITY_APP_REG_PACKAGE, DSL.name("KEY_security_app_reg_package_PRIMARY"), new TableField[] { SecurityAppRegPackage.SECURITY_APP_REG_PACKAGE.ID }, true);
    public static final UniqueKey<SecurityAppRegUserRoleRecord> KEY_SECURITY_APP_REG_USER_ROLE_CLIENT_ID = Internal.createUniqueKey(SecurityAppRegUserRole.SECURITY_APP_REG_USER_ROLE, DSL.name("KEY_security_app_reg_user_role_CLIENT_ID"), new TableField[] { SecurityAppRegUserRole.SECURITY_APP_REG_USER_ROLE.CLIENT_ID, SecurityAppRegUserRole.SECURITY_APP_REG_USER_ROLE.APP_ID, SecurityAppRegUserRole.SECURITY_APP_REG_USER_ROLE.ROLE_ID, SecurityAppRegUserRole.SECURITY_APP_REG_USER_ROLE.CLIENT_TYPE, SecurityAppRegUserRole.SECURITY_APP_REG_USER_ROLE.LEVEL, SecurityAppRegUserRole.SECURITY_APP_REG_USER_ROLE.BUSINESS_TYPE }, true);
    public static final UniqueKey<SecurityAppRegUserRoleRecord> KEY_SECURITY_APP_REG_USER_ROLE_PRIMARY = Internal.createUniqueKey(SecurityAppRegUserRole.SECURITY_APP_REG_USER_ROLE, DSL.name("KEY_security_app_reg_user_role_PRIMARY"), new TableField[] { SecurityAppRegUserRole.SECURITY_APP_REG_USER_ROLE.ID }, true);
    public static final UniqueKey<SecurityClientRecord> KEY_SECURITY_CLIENT_PRIMARY = Internal.createUniqueKey(SecurityClient.SECURITY_CLIENT, DSL.name("KEY_security_client_PRIMARY"), new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final UniqueKey<SecurityClientRecord> KEY_SECURITY_CLIENT_UK1_CLIENT_CODE = Internal.createUniqueKey(SecurityClient.SECURITY_CLIENT, DSL.name("KEY_security_client_UK1_CLIENT_CODE"), new TableField[] { SecurityClient.SECURITY_CLIENT.CODE }, true);
    public static final UniqueKey<SecurityClientAddressRecord> KEY_SECURITY_CLIENT_ADDRESS_PRIMARY = Internal.createUniqueKey(SecurityClientAddress.SECURITY_CLIENT_ADDRESS, DSL.name("KEY_security_client_address_PRIMARY"), new TableField[] { SecurityClientAddress.SECURITY_CLIENT_ADDRESS.ID }, true);
    public static final UniqueKey<SecurityClientHierarchyRecord> KEY_SECURITY_CLIENT_HIERARCHY_PRIMARY = Internal.createUniqueKey(SecurityClientHierarchy.SECURITY_CLIENT_HIERARCHY, DSL.name("KEY_security_client_hierarchy_PRIMARY"), new TableField[] { SecurityClientHierarchy.SECURITY_CLIENT_HIERARCHY.ID }, true);
    public static final UniqueKey<SecurityClientHierarchyRecord> KEY_SECURITY_CLIENT_HIERARCHY_UK1_SECURITY_CLIENT_HIERARCHY = Internal.createUniqueKey(SecurityClientHierarchy.SECURITY_CLIENT_HIERARCHY, DSL.name("KEY_security_client_hierarchy_UK1_SECURITY_CLIENT_HIERARCHY"), new TableField[] { SecurityClientHierarchy.SECURITY_CLIENT_HIERARCHY.CLIENT_ID }, true);
    public static final UniqueKey<SecurityClientManageRecord> KEY_SECURITY_CLIENT_MANAGE_PRIMARY = Internal.createUniqueKey(SecurityClientManage.SECURITY_CLIENT_MANAGE, DSL.name("KEY_security_client_manage_PRIMARY"), new TableField[] { SecurityClientManage.SECURITY_CLIENT_MANAGE.ID }, true);
    public static final UniqueKey<SecurityClientOtpPolicyRecord> KEY_SECURITY_CLIENT_OTP_POLICY_PRIMARY = Internal.createUniqueKey(SecurityClientOtpPolicy.SECURITY_CLIENT_OTP_POLICY, DSL.name("KEY_security_client_otp_policy_PRIMARY"), new TableField[] { SecurityClientOtpPolicy.SECURITY_CLIENT_OTP_POLICY.ID }, true);
    public static final UniqueKey<SecurityClientOtpPolicyRecord> KEY_SECURITY_CLIENT_OTP_POLICY_UK1_CLIENT_OTP_POL_CLIENT_ID_APP_ID = Internal.createUniqueKey(SecurityClientOtpPolicy.SECURITY_CLIENT_OTP_POLICY, DSL.name("KEY_security_client_otp_policy_UK1_CLIENT_OTP_POL_CLIENT_ID_APP_ID"), new TableField[] { SecurityClientOtpPolicy.SECURITY_CLIENT_OTP_POLICY.CLIENT_ID, SecurityClientOtpPolicy.SECURITY_CLIENT_OTP_POLICY.APP_ID }, true);
    public static final UniqueKey<SecurityClientPackageRecord> KEY_SECURITY_CLIENT_PACKAGE_PRIMARY = Internal.createUniqueKey(SecurityClientPackage.SECURITY_CLIENT_PACKAGE, DSL.name("KEY_security_client_package_PRIMARY"), new TableField[] { SecurityClientPackage.SECURITY_CLIENT_PACKAGE.ID }, true);
    public static final UniqueKey<SecurityClientPackageRecord> KEY_SECURITY_CLIENT_PACKAGE_UK1_CLIENT_PACKAGE = Internal.createUniqueKey(SecurityClientPackage.SECURITY_CLIENT_PACKAGE, DSL.name("KEY_security_client_package_UK1_CLIENT_PACKAGE"), new TableField[] { SecurityClientPackage.SECURITY_CLIENT_PACKAGE.CLIENT_ID, SecurityClientPackage.SECURITY_CLIENT_PACKAGE.PACKAGE_ID }, true);
    public static final UniqueKey<SecurityClientPasswordPolicyRecord> KEY_SECURITY_CLIENT_PASSWORD_POLICY_PRIMARY = Internal.createUniqueKey(SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY, DSL.name("KEY_security_client_password_policy_PRIMARY"), new TableField[] { SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY.ID }, true);
    public static final UniqueKey<SecurityClientPasswordPolicyRecord> KEY_SECURITY_CLIENT_PASSWORD_POLICY_UK1_CLIENT_PWD_POL_CLIENT_ID_APP_ID = Internal.createUniqueKey(SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY, DSL.name("KEY_security_client_password_policy_UK1_CLIENT_PWD_POL_CLIENT_ID_APP_ID"), new TableField[] { SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY.CLIENT_ID, SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY.APP_ID }, true);
    public static final UniqueKey<SecurityClientPinPolicyRecord> KEY_SECURITY_CLIENT_PIN_POLICY_PRIMARY = Internal.createUniqueKey(SecurityClientPinPolicy.SECURITY_CLIENT_PIN_POLICY, DSL.name("KEY_security_client_pin_policy_PRIMARY"), new TableField[] { SecurityClientPinPolicy.SECURITY_CLIENT_PIN_POLICY.ID }, true);
    public static final UniqueKey<SecurityClientPinPolicyRecord> KEY_SECURITY_CLIENT_PIN_POLICY_UK1_CLIENT_PIN_POL_CLIENT_ID_APP_ID = Internal.createUniqueKey(SecurityClientPinPolicy.SECURITY_CLIENT_PIN_POLICY, DSL.name("KEY_security_client_pin_policy_UK1_CLIENT_PIN_POL_CLIENT_ID_APP_ID"), new TableField[] { SecurityClientPinPolicy.SECURITY_CLIENT_PIN_POLICY.CLIENT_ID, SecurityClientPinPolicy.SECURITY_CLIENT_PIN_POLICY.APP_ID }, true);
    public static final UniqueKey<SecurityClientTypeRecord> KEY_SECURITY_CLIENT_TYPE_PRIMARY = Internal.createUniqueKey(SecurityClientType.SECURITY_CLIENT_TYPE, DSL.name("KEY_security_client_type_PRIMARY"), new TableField[] { SecurityClientType.SECURITY_CLIENT_TYPE.ID }, true);
    public static final UniqueKey<SecurityClientTypeRecord> KEY_SECURITY_CLIENT_TYPE_UK1_CLIENT_TYPE_CODE = Internal.createUniqueKey(SecurityClientType.SECURITY_CLIENT_TYPE, DSL.name("KEY_security_client_type_UK1_CLIENT_TYPE_CODE"), new TableField[] { SecurityClientType.SECURITY_CLIENT_TYPE.CODE }, true);
    public static final UniqueKey<SecurityClientUrlRecord> KEY_SECURITY_CLIENT_URL_PRIMARY = Internal.createUniqueKey(SecurityClientUrl.SECURITY_CLIENT_URL, DSL.name("KEY_security_client_url_PRIMARY"), new TableField[] { SecurityClientUrl.SECURITY_CLIENT_URL.ID }, true);
    public static final UniqueKey<SecurityClientUrlRecord> KEY_SECURITY_CLIENT_URL_UK1_URL_PATTERN = Internal.createUniqueKey(SecurityClientUrl.SECURITY_CLIENT_URL, DSL.name("KEY_security_client_url_UK1_URL_PATTERN"), new TableField[] { SecurityClientUrl.SECURITY_CLIENT_URL.URL_PATTERN }, true);
    public static final UniqueKey<SecurityCodeAccessRecord> KEY_SECURITY_CODE_ACCESS_PRIMARY = Internal.createUniqueKey(SecurityCodeAccess.SECURITY_CODE_ACCESS, DSL.name("KEY_security_code_access_PRIMARY"), new TableField[] { SecurityCodeAccess.SECURITY_CODE_ACCESS.ID }, true);
    public static final UniqueKey<SecurityCodeAccessRecord> KEY_SECURITY_CODE_ACCESS_UK1_CODE_ACCESS_CODE = Internal.createUniqueKey(SecurityCodeAccess.SECURITY_CODE_ACCESS, DSL.name("KEY_security_code_access_UK1_CODE_ACCESS_CODE"), new TableField[] { SecurityCodeAccess.SECURITY_CODE_ACCESS.APP_ID, SecurityCodeAccess.SECURITY_CODE_ACCESS.CLIENT_ID, SecurityCodeAccess.SECURITY_CODE_ACCESS.CODE }, true);
    public static final UniqueKey<SecurityCodeAccessRecord> KEY_SECURITY_CODE_ACCESS_UK1_CODE_ACCESS_EMAIL_APP_CLIENT = Internal.createUniqueKey(SecurityCodeAccess.SECURITY_CODE_ACCESS, DSL.name("KEY_security_code_access_UK1_CODE_ACCESS_EMAIL_APP_CLIENT"), new TableField[] { SecurityCodeAccess.SECURITY_CODE_ACCESS.APP_ID, SecurityCodeAccess.SECURITY_CODE_ACCESS.CLIENT_ID, SecurityCodeAccess.SECURITY_CODE_ACCESS.EMAIL_ID }, true);
    public static final UniqueKey<SecurityOrgStructureRecord> KEY_SECURITY_ORG_STRUCTURE_PRIMARY = Internal.createUniqueKey(SecurityOrgStructure.SECURITY_ORG_STRUCTURE, DSL.name("KEY_security_org_structure_PRIMARY"), new TableField[] { SecurityOrgStructure.SECURITY_ORG_STRUCTURE.ID }, true);
    public static final UniqueKey<SecurityOrgStructureRecord> KEY_SECURITY_ORG_STRUCTURE_UK1_ORG_STRUCTURE = Internal.createUniqueKey(SecurityOrgStructure.SECURITY_ORG_STRUCTURE, DSL.name("KEY_security_org_structure_UK1_ORG_STRUCTURE"), new TableField[] { SecurityOrgStructure.SECURITY_ORG_STRUCTURE.USER_ID, SecurityOrgStructure.SECURITY_ORG_STRUCTURE.MANAGER_ID }, true);
    public static final UniqueKey<SecurityOtpRecord> KEY_SECURITY_OTP_PRIMARY = Internal.createUniqueKey(SecurityOtp.SECURITY_OTP, DSL.name("KEY_security_otp_PRIMARY"), new TableField[] { SecurityOtp.SECURITY_OTP.ID }, true);
    public static final UniqueKey<SecurityPackageRecord> KEY_SECURITY_PACKAGE_PRIMARY = Internal.createUniqueKey(SecurityPackage.SECURITY_PACKAGE, DSL.name("KEY_security_package_PRIMARY"), new TableField[] { SecurityPackage.SECURITY_PACKAGE.ID }, true);
    public static final UniqueKey<SecurityPackageRecord> KEY_SECURITY_PACKAGE_UK1_PACKAGE_CODE = Internal.createUniqueKey(SecurityPackage.SECURITY_PACKAGE, DSL.name("KEY_security_package_UK1_PACKAGE_CODE"), new TableField[] { SecurityPackage.SECURITY_PACKAGE.CODE }, true);
    public static final UniqueKey<SecurityPackageRecord> KEY_SECURITY_PACKAGE_UK2_PACKAGE_NAME_APP_ID = Internal.createUniqueKey(SecurityPackage.SECURITY_PACKAGE, DSL.name("KEY_security_package_UK2_PACKAGE_NAME_APP_ID"), new TableField[] { SecurityPackage.SECURITY_PACKAGE.NAME, SecurityPackage.SECURITY_PACKAGE.APP_ID }, true);
    public static final UniqueKey<SecurityPackageRoleRecord> KEY_SECURITY_PACKAGE_ROLE_PRIMARY = Internal.createUniqueKey(SecurityPackageRole.SECURITY_PACKAGE_ROLE, DSL.name("KEY_security_package_role_PRIMARY"), new TableField[] { SecurityPackageRole.SECURITY_PACKAGE_ROLE.ID }, true);
    public static final UniqueKey<SecurityPackageRoleRecord> KEY_SECURITY_PACKAGE_ROLE_UK1_PACKAGE_ROLE = Internal.createUniqueKey(SecurityPackageRole.SECURITY_PACKAGE_ROLE, DSL.name("KEY_security_package_role_UK1_PACKAGE_ROLE"), new TableField[] { SecurityPackageRole.SECURITY_PACKAGE_ROLE.ROLE_ID, SecurityPackageRole.SECURITY_PACKAGE_ROLE.PACKAGE_ID }, true);
    public static final UniqueKey<SecurityPastPasswordsRecord> KEY_SECURITY_PAST_PASSWORDS_PRIMARY = Internal.createUniqueKey(SecurityPastPasswords.SECURITY_PAST_PASSWORDS, DSL.name("KEY_security_past_passwords_PRIMARY"), new TableField[] { SecurityPastPasswords.SECURITY_PAST_PASSWORDS.ID }, true);
    public static final UniqueKey<SecurityPastPinsRecord> KEY_SECURITY_PAST_PINS_PRIMARY = Internal.createUniqueKey(SecurityPastPins.SECURITY_PAST_PINS, DSL.name("KEY_security_past_pins_PRIMARY"), new TableField[] { SecurityPastPins.SECURITY_PAST_PINS.ID }, true);
    public static final UniqueKey<SecurityPermissionRecord> KEY_SECURITY_PERMISSION_PRIMARY = Internal.createUniqueKey(SecurityPermission.SECURITY_PERMISSION, DSL.name("KEY_security_permission_PRIMARY"), new TableField[] { SecurityPermission.SECURITY_PERMISSION.ID }, true);
    public static final UniqueKey<SecurityPermissionRecord> KEY_SECURITY_PERMISSION_UK1_PERMISSION_NAME = Internal.createUniqueKey(SecurityPermission.SECURITY_PERMISSION, DSL.name("KEY_security_permission_UK1_PERMISSION_NAME"), new TableField[] { SecurityPermission.SECURITY_PERMISSION.NAME }, true);
    public static final UniqueKey<SecurityRoleRecord> KEY_SECURITY_ROLE_PRIMARY = Internal.createUniqueKey(SecurityRole.SECURITY_ROLE, DSL.name("KEY_security_role_PRIMARY"), new TableField[] { SecurityRole.SECURITY_ROLE.ID }, true);
    public static final UniqueKey<SecurityRoleRecord> KEY_SECURITY_ROLE_UK1_ROLE_NAME_APP_ID = Internal.createUniqueKey(SecurityRole.SECURITY_ROLE, DSL.name("KEY_security_role_UK1_ROLE_NAME_APP_ID"), new TableField[] { SecurityRole.SECURITY_ROLE.NAME, SecurityRole.SECURITY_ROLE.APP_ID }, true);
    public static final UniqueKey<SecurityRolePermissionRecord> KEY_SECURITY_ROLE_PERMISSION_PRIMARY = Internal.createUniqueKey(SecurityRolePermission.SECURITY_ROLE_PERMISSION, DSL.name("KEY_security_role_permission_PRIMARY"), new TableField[] { SecurityRolePermission.SECURITY_ROLE_PERMISSION.ID }, true);
    public static final UniqueKey<SecurityRolePermissionRecord> KEY_SECURITY_ROLE_PERMISSION_UK1_ROLE_PERMISSION = Internal.createUniqueKey(SecurityRolePermission.SECURITY_ROLE_PERMISSION, DSL.name("KEY_security_role_permission_UK1_ROLE_PERMISSION"), new TableField[] { SecurityRolePermission.SECURITY_ROLE_PERMISSION.ROLE_ID, SecurityRolePermission.SECURITY_ROLE_PERMISSION.PERMISSION_ID }, true);
    public static final UniqueKey<SecuritySoxLogRecord> KEY_SECURITY_SOX_LOG_PRIMARY = Internal.createUniqueKey(SecuritySoxLog.SECURITY_SOX_LOG, DSL.name("KEY_security_sox_log_PRIMARY"), new TableField[] { SecuritySoxLog.SECURITY_SOX_LOG.ID }, true);
    public static final UniqueKey<SecuritySslCertificateRecord> KEY_SECURITY_SSL_CERTIFICATE_PRIMARY = Internal.createUniqueKey(SecuritySslCertificate.SECURITY_SSL_CERTIFICATE, DSL.name("KEY_security_ssl_certificate_PRIMARY"), new TableField[] { SecuritySslCertificate.SECURITY_SSL_CERTIFICATE.ID }, true);
    public static final UniqueKey<SecuritySslChallengeRecord> KEY_SECURITY_SSL_CHALLENGE_PRIMARY = Internal.createUniqueKey(SecuritySslChallenge.SECURITY_SSL_CHALLENGE, DSL.name("KEY_security_ssl_challenge_PRIMARY"), new TableField[] { SecuritySslChallenge.SECURITY_SSL_CHALLENGE.ID }, true);
    public static final UniqueKey<SecuritySslRequestRecord> KEY_SECURITY_SSL_REQUEST_PRIMARY = Internal.createUniqueKey(SecuritySslRequest.SECURITY_SSL_REQUEST, DSL.name("KEY_security_ssl_request_PRIMARY"), new TableField[] { SecuritySslRequest.SECURITY_SSL_REQUEST.ID }, true);
    public static final UniqueKey<SecuritySslRequestRecord> KEY_SECURITY_SSL_REQUEST_URL_ID = Internal.createUniqueKey(SecuritySslRequest.SECURITY_SSL_REQUEST, DSL.name("KEY_security_ssl_request_URL_ID"), new TableField[] { SecuritySslRequest.SECURITY_SSL_REQUEST.URL_ID }, true);
    public static final UniqueKey<SecurityUserRecord> KEY_SECURITY_USER_PRIMARY = Internal.createUniqueKey(SecurityUser.SECURITY_USER, DSL.name("KEY_security_user_PRIMARY"), new TableField[] { SecurityUser.SECURITY_USER.ID }, true);
    public static final UniqueKey<SecurityUserRecord> KEY_SECURITY_USER_UK1_USER_NAME = Internal.createUniqueKey(SecurityUser.SECURITY_USER, DSL.name("KEY_security_user_UK1_USER_NAME"), new TableField[] { SecurityUser.SECURITY_USER.CLIENT_ID, SecurityUser.SECURITY_USER.USER_NAME, SecurityUser.SECURITY_USER.EMAIL_ID, SecurityUser.SECURITY_USER.PHONE_NUMBER }, true);
    public static final UniqueKey<SecurityUserAddressRecord> KEY_SECURITY_USER_ADDRESS_PRIMARY = Internal.createUniqueKey(SecurityUserAddress.SECURITY_USER_ADDRESS, DSL.name("KEY_security_user_address_PRIMARY"), new TableField[] { SecurityUserAddress.SECURITY_USER_ADDRESS.ID }, true);
    public static final UniqueKey<SecurityUserRolePermissionRecord> KEY_SECURITY_USER_ROLE_PERMISSION_PRIMARY = Internal.createUniqueKey(SecurityUserRolePermission.SECURITY_USER_ROLE_PERMISSION, DSL.name("KEY_security_user_role_permission_PRIMARY"), new TableField[] { SecurityUserRolePermission.SECURITY_USER_ROLE_PERMISSION.ID }, true);
    public static final UniqueKey<SecurityUserTokenRecord> KEY_SECURITY_USER_TOKEN_PRIMARY = Internal.createUniqueKey(SecurityUserToken.SECURITY_USER_TOKEN, DSL.name("KEY_security_user_token_PRIMARY"), new TableField[] { SecurityUserToken.SECURITY_USER_TOKEN.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<SecurityAppRecord, SecurityClientRecord> FK1_APP_CLIENT_ID = Internal.createForeignKey(SecurityApp.SECURITY_APP, DSL.name("FK1_APP_CLIENT_ID"), new TableField[] { SecurityApp.SECURITY_APP.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityAppAccessRecord, SecurityAppRecord> FK1_APP_ACCESS_APP_ID = Internal.createForeignKey(SecurityAppAccess.SECURITY_APP_ACCESS, DSL.name("FK1_APP_ACCESS_APP_ID"), new TableField[] { SecurityAppAccess.SECURITY_APP_ACCESS.APP_ID }, Keys.KEY_SECURITY_APP_PRIMARY, new TableField[] { SecurityApp.SECURITY_APP.ID }, true);
    public static final ForeignKey<SecurityAppAccessRecord, SecurityClientRecord> FK1_APP_ACCESS_CLIENT_ID = Internal.createForeignKey(SecurityAppAccess.SECURITY_APP_ACCESS, DSL.name("FK1_APP_ACCESS_CLIENT_ID"), new TableField[] { SecurityAppAccess.SECURITY_APP_ACCESS.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityAppDependencyRecord, SecurityAppRecord> FK1_APP_DEP_APP_ID = Internal.createForeignKey(SecurityAppDependency.SECURITY_APP_DEPENDENCY, DSL.name("FK1_APP_DEP_APP_ID"), new TableField[] { SecurityAppDependency.SECURITY_APP_DEPENDENCY.APP_ID }, Keys.KEY_SECURITY_APP_PRIMARY, new TableField[] { SecurityApp.SECURITY_APP.ID }, true);
    public static final ForeignKey<SecurityAppDependencyRecord, SecurityAppRecord> FK2_APP_DEP_DEP_APP_ID = Internal.createForeignKey(SecurityAppDependency.SECURITY_APP_DEPENDENCY, DSL.name("FK2_APP_DEP_DEP_APP_ID"), new TableField[] { SecurityAppDependency.SECURITY_APP_DEPENDENCY.DEP_APP_ID }, Keys.KEY_SECURITY_APP_PRIMARY, new TableField[] { SecurityApp.SECURITY_APP.ID }, true);
    public static final ForeignKey<SecurityAppPropertyRecord, SecurityAppRecord> FK1_APP_PROP_APP_ID = Internal.createForeignKey(SecurityAppProperty.SECURITY_APP_PROPERTY, DSL.name("FK1_APP_PROP_APP_ID"), new TableField[] { SecurityAppProperty.SECURITY_APP_PROPERTY.APP_ID }, Keys.KEY_SECURITY_APP_PRIMARY, new TableField[] { SecurityApp.SECURITY_APP.ID }, true);
    public static final ForeignKey<SecurityAppPropertyRecord, SecurityClientRecord> FK2_APP_PROP_CLNT_ID = Internal.createForeignKey(SecurityAppProperty.SECURITY_APP_PROPERTY, DSL.name("FK2_APP_PROP_CLNT_ID"), new TableField[] { SecurityAppProperty.SECURITY_APP_PROPERTY.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityAppRegAccessRecord, SecurityClientRecord> FK1_APP_REG_ACC_CLNT_ID = Internal.createForeignKey(SecurityAppRegAccess.SECURITY_APP_REG_ACCESS, DSL.name("FK1_APP_REG_ACC_CLNT_ID"), new TableField[] { SecurityAppRegAccess.SECURITY_APP_REG_ACCESS.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityAppRegAccessRecord, SecurityAppRecord> FK2_APP_REG_ACC_APP_ID = Internal.createForeignKey(SecurityAppRegAccess.SECURITY_APP_REG_ACCESS, DSL.name("FK2_APP_REG_ACC_APP_ID"), new TableField[] { SecurityAppRegAccess.SECURITY_APP_REG_ACCESS.APP_ID }, Keys.KEY_SECURITY_APP_PRIMARY, new TableField[] { SecurityApp.SECURITY_APP.ID }, true);
    public static final ForeignKey<SecurityAppRegAccessRecord, SecurityAppRecord> FK3_APP_REG_ACC_ALLOW_APP_ID = Internal.createForeignKey(SecurityAppRegAccess.SECURITY_APP_REG_ACCESS, DSL.name("FK3_APP_REG_ACC_ALLOW_APP_ID"), new TableField[] { SecurityAppRegAccess.SECURITY_APP_REG_ACCESS.ALLOW_APP_ID }, Keys.KEY_SECURITY_APP_PRIMARY, new TableField[] { SecurityApp.SECURITY_APP.ID }, true);
    public static final ForeignKey<SecurityAppRegAccessRecord, SecurityClientTypeRecord> FK4_APP_REG_ACC_CLIENT_TYPE = Internal.createForeignKey(SecurityAppRegAccess.SECURITY_APP_REG_ACCESS, DSL.name("FK4_APP_REG_ACC_CLIENT_TYPE"), new TableField[] { SecurityAppRegAccess.SECURITY_APP_REG_ACCESS.CLIENT_TYPE }, Keys.KEY_SECURITY_CLIENT_TYPE_UK1_CLIENT_TYPE_CODE, new TableField[] { SecurityClientType.SECURITY_CLIENT_TYPE.CODE }, true);
    public static final ForeignKey<SecurityAppRegFileAccessRecord, SecurityClientRecord> FK1_APP_REG_FILE_ACC_CLNT_ID = Internal.createForeignKey(SecurityAppRegFileAccess.SECURITY_APP_REG_FILE_ACCESS, DSL.name("FK1_APP_REG_FILE_ACC_CLNT_ID"), new TableField[] { SecurityAppRegFileAccess.SECURITY_APP_REG_FILE_ACCESS.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityAppRegFileAccessRecord, SecurityAppRecord> FK2_APP_REG_FILE_ACC_APP_ID = Internal.createForeignKey(SecurityAppRegFileAccess.SECURITY_APP_REG_FILE_ACCESS, DSL.name("FK2_APP_REG_FILE_ACC_APP_ID"), new TableField[] { SecurityAppRegFileAccess.SECURITY_APP_REG_FILE_ACCESS.APP_ID }, Keys.KEY_SECURITY_APP_PRIMARY, new TableField[] { SecurityApp.SECURITY_APP.ID }, true);
    public static final ForeignKey<SecurityAppRegFileAccessRecord, SecurityClientTypeRecord> FK4_APP_REG_FILE_ACC_CLIENT_TYPE = Internal.createForeignKey(SecurityAppRegFileAccess.SECURITY_APP_REG_FILE_ACCESS, DSL.name("FK4_APP_REG_FILE_ACC_CLIENT_TYPE"), new TableField[] { SecurityAppRegFileAccess.SECURITY_APP_REG_FILE_ACCESS.CLIENT_TYPE }, Keys.KEY_SECURITY_CLIENT_TYPE_UK1_CLIENT_TYPE_CODE, new TableField[] { SecurityClientType.SECURITY_CLIENT_TYPE.CODE }, true);
    public static final ForeignKey<SecurityAppRegIntegrationRecord, SecurityAppRecord> FK1_APP_REG_INTEGRATION_APP_ID = Internal.createForeignKey(SecurityAppRegIntegration.SECURITY_APP_REG_INTEGRATION, DSL.name("FK1_APP_REG_INTEGRATION_APP_ID"), new TableField[] { SecurityAppRegIntegration.SECURITY_APP_REG_INTEGRATION.APP_ID }, Keys.KEY_SECURITY_APP_PRIMARY, new TableField[] { SecurityApp.SECURITY_APP.ID }, true);
    public static final ForeignKey<SecurityAppRegIntegrationRecord, SecurityClientRecord> FK2_APP_REG_INTEGRATION_CLIENT_ID = Internal.createForeignKey(SecurityAppRegIntegration.SECURITY_APP_REG_INTEGRATION, DSL.name("FK2_APP_REG_INTEGRATION_CLIENT_ID"), new TableField[] { SecurityAppRegIntegration.SECURITY_APP_REG_INTEGRATION.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityAppRegIntegrationTokensRecord, SecurityAppRegIntegrationRecord> FK1_INTEGRATION_TOKEN_APP_REG_INTEGRATION_ID = Internal.createForeignKey(SecurityAppRegIntegrationTokens.SECURITY_APP_REG_INTEGRATION_TOKENS, DSL.name("FK1_INTEGRATION_TOKEN_APP_REG_INTEGRATION_ID"), new TableField[] { SecurityAppRegIntegrationTokens.SECURITY_APP_REG_INTEGRATION_TOKENS.INTEGRATION_ID }, Keys.KEY_SECURITY_APP_REG_INTEGRATION_PRIMARY, new TableField[] { SecurityAppRegIntegration.SECURITY_APP_REG_INTEGRATION.ID }, true);
    public static final ForeignKey<SecurityAppRegPackageRecord, SecurityClientRecord> FK1_APP_REG_PKG_CLNT_ID = Internal.createForeignKey(SecurityAppRegPackage.SECURITY_APP_REG_PACKAGE, DSL.name("FK1_APP_REG_PKG_CLNT_ID"), new TableField[] { SecurityAppRegPackage.SECURITY_APP_REG_PACKAGE.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityAppRegPackageRecord, SecurityAppRecord> FK2_APP_REG_PKG_APP_ID = Internal.createForeignKey(SecurityAppRegPackage.SECURITY_APP_REG_PACKAGE, DSL.name("FK2_APP_REG_PKG_APP_ID"), new TableField[] { SecurityAppRegPackage.SECURITY_APP_REG_PACKAGE.APP_ID }, Keys.KEY_SECURITY_APP_PRIMARY, new TableField[] { SecurityApp.SECURITY_APP.ID }, true);
    public static final ForeignKey<SecurityAppRegPackageRecord, SecurityPackageRecord> FK3_APP_REG_PKG_PKG_ID = Internal.createForeignKey(SecurityAppRegPackage.SECURITY_APP_REG_PACKAGE, DSL.name("FK3_APP_REG_PKG_PKG_ID"), new TableField[] { SecurityAppRegPackage.SECURITY_APP_REG_PACKAGE.PACKAGE_ID }, Keys.KEY_SECURITY_PACKAGE_PRIMARY, new TableField[] { SecurityPackage.SECURITY_PACKAGE.ID }, true);
    public static final ForeignKey<SecurityAppRegPackageRecord, SecurityClientTypeRecord> FK4_APP_REG_PKG_CLIENT_TYPE = Internal.createForeignKey(SecurityAppRegPackage.SECURITY_APP_REG_PACKAGE, DSL.name("FK4_APP_REG_PKG_CLIENT_TYPE"), new TableField[] { SecurityAppRegPackage.SECURITY_APP_REG_PACKAGE.CLIENT_TYPE }, Keys.KEY_SECURITY_CLIENT_TYPE_UK1_CLIENT_TYPE_CODE, new TableField[] { SecurityClientType.SECURITY_CLIENT_TYPE.CODE }, true);
    public static final ForeignKey<SecurityAppRegUserRoleRecord, SecurityClientRecord> FK1_APP_REG_ROLE_CLNT_ID = Internal.createForeignKey(SecurityAppRegUserRole.SECURITY_APP_REG_USER_ROLE, DSL.name("FK1_APP_REG_ROLE_CLNT_ID"), new TableField[] { SecurityAppRegUserRole.SECURITY_APP_REG_USER_ROLE.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityAppRegUserRoleRecord, SecurityAppRecord> FK2_APP_REG_ROLE_APP_ID = Internal.createForeignKey(SecurityAppRegUserRole.SECURITY_APP_REG_USER_ROLE, DSL.name("FK2_APP_REG_ROLE_APP_ID"), new TableField[] { SecurityAppRegUserRole.SECURITY_APP_REG_USER_ROLE.APP_ID }, Keys.KEY_SECURITY_APP_PRIMARY, new TableField[] { SecurityApp.SECURITY_APP.ID }, true);
    public static final ForeignKey<SecurityAppRegUserRoleRecord, SecurityRoleRecord> FK3_APP_REG_ROLE_ROLE_ID = Internal.createForeignKey(SecurityAppRegUserRole.SECURITY_APP_REG_USER_ROLE, DSL.name("FK3_APP_REG_ROLE_ROLE_ID"), new TableField[] { SecurityAppRegUserRole.SECURITY_APP_REG_USER_ROLE.ROLE_ID }, Keys.KEY_SECURITY_ROLE_PRIMARY, new TableField[] { SecurityRole.SECURITY_ROLE.ID }, true);
    public static final ForeignKey<SecurityAppRegUserRoleRecord, SecurityClientTypeRecord> FK4_APP_REG_ROLE_CLIENT_TYPE = Internal.createForeignKey(SecurityAppRegUserRole.SECURITY_APP_REG_USER_ROLE, DSL.name("FK4_APP_REG_ROLE_CLIENT_TYPE"), new TableField[] { SecurityAppRegUserRole.SECURITY_APP_REG_USER_ROLE.CLIENT_TYPE }, Keys.KEY_SECURITY_CLIENT_TYPE_UK1_CLIENT_TYPE_CODE, new TableField[] { SecurityClientType.SECURITY_CLIENT_TYPE.CODE }, true);
    public static final ForeignKey<SecurityClientRecord, SecurityClientTypeRecord> FK1_CLIENT_CLIENT_TYPE_CODE = Internal.createForeignKey(SecurityClient.SECURITY_CLIENT, DSL.name("FK1_CLIENT_CLIENT_TYPE_CODE"), new TableField[] { SecurityClient.SECURITY_CLIENT.TYPE_CODE }, Keys.KEY_SECURITY_CLIENT_TYPE_UK1_CLIENT_TYPE_CODE, new TableField[] { SecurityClientType.SECURITY_CLIENT_TYPE.CODE }, true);
    public static final ForeignKey<SecurityClientAddressRecord, SecurityClientRecord> FK1_CLIENT_ADDRESS_CLIENT_ID = Internal.createForeignKey(SecurityClientAddress.SECURITY_CLIENT_ADDRESS, DSL.name("FK1_CLIENT_ADDRESS_CLIENT_ID"), new TableField[] { SecurityClientAddress.SECURITY_CLIENT_ADDRESS.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityClientAddressRecord, SecurityAddressRecord> FK2_CLIENT_ADDRESS_ADDRESS_ID = Internal.createForeignKey(SecurityClientAddress.SECURITY_CLIENT_ADDRESS, DSL.name("FK2_CLIENT_ADDRESS_ADDRESS_ID"), new TableField[] { SecurityClientAddress.SECURITY_CLIENT_ADDRESS.ADDRESS_ID }, Keys.KEY_SECURITY_ADDRESS_PRIMARY, new TableField[] { SecurityAddress.SECURITY_ADDRESS.ID }, true);
    public static final ForeignKey<SecurityClientHierarchyRecord, SecurityClientRecord> FK1_CLIENT_HIERARCHY_CLIENT_ID = Internal.createForeignKey(SecurityClientHierarchy.SECURITY_CLIENT_HIERARCHY, DSL.name("FK1_CLIENT_HIERARCHY_CLIENT_ID"), new TableField[] { SecurityClientHierarchy.SECURITY_CLIENT_HIERARCHY.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityClientHierarchyRecord, SecurityClientRecord> FK1_CLIENT_HIERARCHY_LEVEL_0 = Internal.createForeignKey(SecurityClientHierarchy.SECURITY_CLIENT_HIERARCHY, DSL.name("FK1_CLIENT_HIERARCHY_LEVEL_0"), new TableField[] { SecurityClientHierarchy.SECURITY_CLIENT_HIERARCHY.MANAGE_CLIENT_LEVEL_0 }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityClientHierarchyRecord, SecurityClientRecord> FK1_CLIENT_HIERARCHY_LEVEL_1 = Internal.createForeignKey(SecurityClientHierarchy.SECURITY_CLIENT_HIERARCHY, DSL.name("FK1_CLIENT_HIERARCHY_LEVEL_1"), new TableField[] { SecurityClientHierarchy.SECURITY_CLIENT_HIERARCHY.MANAGE_CLIENT_LEVEL_1 }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityClientHierarchyRecord, SecurityClientRecord> FK1_CLIENT_HIERARCHY_LEVEL_2 = Internal.createForeignKey(SecurityClientHierarchy.SECURITY_CLIENT_HIERARCHY, DSL.name("FK1_CLIENT_HIERARCHY_LEVEL_2"), new TableField[] { SecurityClientHierarchy.SECURITY_CLIENT_HIERARCHY.MANAGE_CLIENT_LEVEL_2 }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityClientHierarchyRecord, SecurityClientRecord> FK1_CLIENT_HIERARCHY_LEVEL_3 = Internal.createForeignKey(SecurityClientHierarchy.SECURITY_CLIENT_HIERARCHY, DSL.name("FK1_CLIENT_HIERARCHY_LEVEL_3"), new TableField[] { SecurityClientHierarchy.SECURITY_CLIENT_HIERARCHY.MANAGE_CLIENT_LEVEL_3 }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityClientManageRecord, SecurityClientRecord> FK1_CLIENT_MANAGE_CLIENT_ID = Internal.createForeignKey(SecurityClientManage.SECURITY_CLIENT_MANAGE, DSL.name("FK1_CLIENT_MANAGE_CLIENT_ID"), new TableField[] { SecurityClientManage.SECURITY_CLIENT_MANAGE.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityClientManageRecord, SecurityClientRecord> FK1_CLIENT_MANAGE_MNG_CLIENT_ID = Internal.createForeignKey(SecurityClientManage.SECURITY_CLIENT_MANAGE, DSL.name("FK1_CLIENT_MANAGE_MNG_CLIENT_ID"), new TableField[] { SecurityClientManage.SECURITY_CLIENT_MANAGE.MANAGE_CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityClientOtpPolicyRecord, SecurityClientRecord> FK1_CLIENT_OTP_POL_CLIENT_ID = Internal.createForeignKey(SecurityClientOtpPolicy.SECURITY_CLIENT_OTP_POLICY, DSL.name("FK1_CLIENT_OTP_POL_CLIENT_ID"), new TableField[] { SecurityClientOtpPolicy.SECURITY_CLIENT_OTP_POLICY.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityClientOtpPolicyRecord, SecurityAppRecord> FK2_CLIENT_OTP_POL_APP_ID = Internal.createForeignKey(SecurityClientOtpPolicy.SECURITY_CLIENT_OTP_POLICY, DSL.name("FK2_CLIENT_OTP_POL_APP_ID"), new TableField[] { SecurityClientOtpPolicy.SECURITY_CLIENT_OTP_POLICY.APP_ID }, Keys.KEY_SECURITY_APP_PRIMARY, new TableField[] { SecurityApp.SECURITY_APP.ID }, true);
    public static final ForeignKey<SecurityClientPackageRecord, SecurityClientRecord> FK1_CLIENT_PACKAGE_CLIENT_ID = Internal.createForeignKey(SecurityClientPackage.SECURITY_CLIENT_PACKAGE, DSL.name("FK1_CLIENT_PACKAGE_CLIENT_ID"), new TableField[] { SecurityClientPackage.SECURITY_CLIENT_PACKAGE.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityClientPackageRecord, SecurityPackageRecord> FK2_CLIENT_PACKAGE_PACKAGE_ID = Internal.createForeignKey(SecurityClientPackage.SECURITY_CLIENT_PACKAGE, DSL.name("FK2_CLIENT_PACKAGE_PACKAGE_ID"), new TableField[] { SecurityClientPackage.SECURITY_CLIENT_PACKAGE.PACKAGE_ID }, Keys.KEY_SECURITY_PACKAGE_PRIMARY, new TableField[] { SecurityPackage.SECURITY_PACKAGE.ID }, true);
    public static final ForeignKey<SecurityClientPasswordPolicyRecord, SecurityClientRecord> FK1_CLIENT_PWD_POL_CLIENT_ID = Internal.createForeignKey(SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY, DSL.name("FK1_CLIENT_PWD_POL_CLIENT_ID"), new TableField[] { SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityClientPasswordPolicyRecord, SecurityAppRecord> FK2_CLIENT_PWD_POL_APP_ID = Internal.createForeignKey(SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY, DSL.name("FK2_CLIENT_PWD_POL_APP_ID"), new TableField[] { SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY.APP_ID }, Keys.KEY_SECURITY_APP_PRIMARY, new TableField[] { SecurityApp.SECURITY_APP.ID }, true);
    public static final ForeignKey<SecurityClientPinPolicyRecord, SecurityClientRecord> FK1_CLIENT_PIN_POL_CLIENT_ID = Internal.createForeignKey(SecurityClientPinPolicy.SECURITY_CLIENT_PIN_POLICY, DSL.name("FK1_CLIENT_PIN_POL_CLIENT_ID"), new TableField[] { SecurityClientPinPolicy.SECURITY_CLIENT_PIN_POLICY.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityClientPinPolicyRecord, SecurityAppRecord> FK2_CLIENT_PIN_POL_APP_ID = Internal.createForeignKey(SecurityClientPinPolicy.SECURITY_CLIENT_PIN_POLICY, DSL.name("FK2_CLIENT_PIN_POL_APP_ID"), new TableField[] { SecurityClientPinPolicy.SECURITY_CLIENT_PIN_POLICY.APP_ID }, Keys.KEY_SECURITY_APP_PRIMARY, new TableField[] { SecurityApp.SECURITY_APP.ID }, true);
    public static final ForeignKey<SecurityClientUrlRecord, SecurityAppRecord> FK1_CLIENT_URL_APP_CODE = Internal.createForeignKey(SecurityClientUrl.SECURITY_CLIENT_URL, DSL.name("FK1_CLIENT_URL_APP_CODE"), new TableField[] { SecurityClientUrl.SECURITY_CLIENT_URL.APP_CODE }, Keys.KEY_SECURITY_APP_UK1_APPCODE, new TableField[] { SecurityApp.SECURITY_APP.APP_CODE }, true);
    public static final ForeignKey<SecurityClientUrlRecord, SecurityClientRecord> FK1_CLIENT_URL_CLIENT_ID = Internal.createForeignKey(SecurityClientUrl.SECURITY_CLIENT_URL, DSL.name("FK1_CLIENT_URL_CLIENT_ID"), new TableField[] { SecurityClientUrl.SECURITY_CLIENT_URL.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityCodeAccessRecord, SecurityClientRecord> FK1_CODE_CLIENT_ID = Internal.createForeignKey(SecurityCodeAccess.SECURITY_CODE_ACCESS, DSL.name("FK1_CODE_CLIENT_ID"), new TableField[] { SecurityCodeAccess.SECURITY_CODE_ACCESS.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityCodeAccessRecord, SecurityAppRecord> FK2_CODE_APP_ID = Internal.createForeignKey(SecurityCodeAccess.SECURITY_CODE_ACCESS, DSL.name("FK2_CODE_APP_ID"), new TableField[] { SecurityCodeAccess.SECURITY_CODE_ACCESS.APP_ID }, Keys.KEY_SECURITY_APP_PRIMARY, new TableField[] { SecurityApp.SECURITY_APP.ID }, true);
    public static final ForeignKey<SecurityOrgStructureRecord, SecurityClientRecord> FK1_ORG_STRUCTURE_CLIENT_ID = Internal.createForeignKey(SecurityOrgStructure.SECURITY_ORG_STRUCTURE, DSL.name("FK1_ORG_STRUCTURE_CLIENT_ID"), new TableField[] { SecurityOrgStructure.SECURITY_ORG_STRUCTURE.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityOrgStructureRecord, SecurityUserRecord> FK2_ORG_STRUCTURE_USER_ID = Internal.createForeignKey(SecurityOrgStructure.SECURITY_ORG_STRUCTURE, DSL.name("FK2_ORG_STRUCTURE_USER_ID"), new TableField[] { SecurityOrgStructure.SECURITY_ORG_STRUCTURE.USER_ID }, Keys.KEY_SECURITY_USER_PRIMARY, new TableField[] { SecurityUser.SECURITY_USER.ID }, true);
    public static final ForeignKey<SecurityOrgStructureRecord, SecurityUserRecord> FK3_ORG_STRUCTURE_MANAGER_ID = Internal.createForeignKey(SecurityOrgStructure.SECURITY_ORG_STRUCTURE, DSL.name("FK3_ORG_STRUCTURE_MANAGER_ID"), new TableField[] { SecurityOrgStructure.SECURITY_ORG_STRUCTURE.MANAGER_ID }, Keys.KEY_SECURITY_USER_PRIMARY, new TableField[] { SecurityUser.SECURITY_USER.ID }, true);
    public static final ForeignKey<SecurityOtpRecord, SecurityAppRecord> FK1_OTP_APP_ID = Internal.createForeignKey(SecurityOtp.SECURITY_OTP, DSL.name("FK1_OTP_APP_ID"), new TableField[] { SecurityOtp.SECURITY_OTP.APP_ID }, Keys.KEY_SECURITY_APP_PRIMARY, new TableField[] { SecurityApp.SECURITY_APP.ID }, true);
    public static final ForeignKey<SecurityOtpRecord, SecurityUserRecord> FK2_OTP_USER_ID = Internal.createForeignKey(SecurityOtp.SECURITY_OTP, DSL.name("FK2_OTP_USER_ID"), new TableField[] { SecurityOtp.SECURITY_OTP.USER_ID }, Keys.KEY_SECURITY_USER_PRIMARY, new TableField[] { SecurityUser.SECURITY_USER.ID }, true);
    public static final ForeignKey<SecurityPackageRecord, SecurityClientRecord> FK1_PACKAGE_CLIENT_ID = Internal.createForeignKey(SecurityPackage.SECURITY_PACKAGE, DSL.name("FK1_PACKAGE_CLIENT_ID"), new TableField[] { SecurityPackage.SECURITY_PACKAGE.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityPackageRecord, SecurityAppRecord> FK2_PACKAGE_APP_ID = Internal.createForeignKey(SecurityPackage.SECURITY_PACKAGE, DSL.name("FK2_PACKAGE_APP_ID"), new TableField[] { SecurityPackage.SECURITY_PACKAGE.APP_ID }, Keys.KEY_SECURITY_APP_PRIMARY, new TableField[] { SecurityApp.SECURITY_APP.ID }, true);
    public static final ForeignKey<SecurityPackageRoleRecord, SecurityRoleRecord> FK1_PACKAGE_ROLE_ROLE_ID = Internal.createForeignKey(SecurityPackageRole.SECURITY_PACKAGE_ROLE, DSL.name("FK1_PACKAGE_ROLE_ROLE_ID"), new TableField[] { SecurityPackageRole.SECURITY_PACKAGE_ROLE.ROLE_ID }, Keys.KEY_SECURITY_ROLE_PRIMARY, new TableField[] { SecurityRole.SECURITY_ROLE.ID }, true);
    public static final ForeignKey<SecurityPackageRoleRecord, SecurityPackageRecord> FK2_PACKAGE_ROLE_PACKAGE_ID = Internal.createForeignKey(SecurityPackageRole.SECURITY_PACKAGE_ROLE, DSL.name("FK2_PACKAGE_ROLE_PACKAGE_ID"), new TableField[] { SecurityPackageRole.SECURITY_PACKAGE_ROLE.PACKAGE_ID }, Keys.KEY_SECURITY_PACKAGE_PRIMARY, new TableField[] { SecurityPackage.SECURITY_PACKAGE.ID }, true);
    public static final ForeignKey<SecurityPastPasswordsRecord, SecurityUserRecord> FK1_PAST_PASSWORD_USER_ID = Internal.createForeignKey(SecurityPastPasswords.SECURITY_PAST_PASSWORDS, DSL.name("FK1_PAST_PASSWORD_USER_ID"), new TableField[] { SecurityPastPasswords.SECURITY_PAST_PASSWORDS.USER_ID }, Keys.KEY_SECURITY_USER_PRIMARY, new TableField[] { SecurityUser.SECURITY_USER.ID }, true);
    public static final ForeignKey<SecurityPastPinsRecord, SecurityUserRecord> FK1_PAST_PIN_USER_ID = Internal.createForeignKey(SecurityPastPins.SECURITY_PAST_PINS, DSL.name("FK1_PAST_PIN_USER_ID"), new TableField[] { SecurityPastPins.SECURITY_PAST_PINS.USER_ID }, Keys.KEY_SECURITY_USER_PRIMARY, new TableField[] { SecurityUser.SECURITY_USER.ID }, true);
    public static final ForeignKey<SecurityPermissionRecord, SecurityClientRecord> FK1_PERMISSION_CLIENT_ID = Internal.createForeignKey(SecurityPermission.SECURITY_PERMISSION, DSL.name("FK1_PERMISSION_CLIENT_ID"), new TableField[] { SecurityPermission.SECURITY_PERMISSION.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityPermissionRecord, SecurityAppRecord> FK2_PERMISSION_APP_ID = Internal.createForeignKey(SecurityPermission.SECURITY_PERMISSION, DSL.name("FK2_PERMISSION_APP_ID"), new TableField[] { SecurityPermission.SECURITY_PERMISSION.APP_ID }, Keys.KEY_SECURITY_APP_PRIMARY, new TableField[] { SecurityApp.SECURITY_APP.ID }, true);
    public static final ForeignKey<SecurityRoleRecord, SecurityClientRecord> FK1_ROLE_CLIENT_ID = Internal.createForeignKey(SecurityRole.SECURITY_ROLE, DSL.name("FK1_ROLE_CLIENT_ID"), new TableField[] { SecurityRole.SECURITY_ROLE.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityRoleRecord, SecurityAppRecord> FK2_ROLE_APP_ID = Internal.createForeignKey(SecurityRole.SECURITY_ROLE, DSL.name("FK2_ROLE_APP_ID"), new TableField[] { SecurityRole.SECURITY_ROLE.APP_ID }, Keys.KEY_SECURITY_APP_PRIMARY, new TableField[] { SecurityApp.SECURITY_APP.ID }, true);
    public static final ForeignKey<SecurityRolePermissionRecord, SecurityRoleRecord> FK1_ROLE_PERM_ROLE_ID = Internal.createForeignKey(SecurityRolePermission.SECURITY_ROLE_PERMISSION, DSL.name("FK1_ROLE_PERM_ROLE_ID"), new TableField[] { SecurityRolePermission.SECURITY_ROLE_PERMISSION.ROLE_ID }, Keys.KEY_SECURITY_ROLE_PRIMARY, new TableField[] { SecurityRole.SECURITY_ROLE.ID }, true);
    public static final ForeignKey<SecurityRolePermissionRecord, SecurityPermissionRecord> FK2_ROLE_PERM_PERMISSION_ID = Internal.createForeignKey(SecurityRolePermission.SECURITY_ROLE_PERMISSION, DSL.name("FK2_ROLE_PERM_PERMISSION_ID"), new TableField[] { SecurityRolePermission.SECURITY_ROLE_PERMISSION.PERMISSION_ID }, Keys.KEY_SECURITY_PERMISSION_PRIMARY, new TableField[] { SecurityPermission.SECURITY_PERMISSION.ID }, true);
    public static final ForeignKey<SecuritySslCertificateRecord, SecurityClientUrlRecord> FK1_SSL_CRT_CLNT_URL_ID = Internal.createForeignKey(SecuritySslCertificate.SECURITY_SSL_CERTIFICATE, DSL.name("FK1_SSL_CRT_CLNT_URL_ID"), new TableField[] { SecuritySslCertificate.SECURITY_SSL_CERTIFICATE.URL_ID }, Keys.KEY_SECURITY_CLIENT_URL_PRIMARY, new TableField[] { SecurityClientUrl.SECURITY_CLIENT_URL.ID }, true);
    public static final ForeignKey<SecuritySslChallengeRecord, SecuritySslRequestRecord> FK1_SSL_CHLNG_REQ_ID = Internal.createForeignKey(SecuritySslChallenge.SECURITY_SSL_CHALLENGE, DSL.name("FK1_SSL_CHLNG_REQ_ID"), new TableField[] { SecuritySslChallenge.SECURITY_SSL_CHALLENGE.REQUEST_ID }, Keys.KEY_SECURITY_SSL_REQUEST_PRIMARY, new TableField[] { SecuritySslRequest.SECURITY_SSL_REQUEST.ID }, true);
    public static final ForeignKey<SecuritySslRequestRecord, SecurityClientUrlRecord> FK1_SSL_REQ_CLNT_URL_ID = Internal.createForeignKey(SecuritySslRequest.SECURITY_SSL_REQUEST, DSL.name("FK1_SSL_REQ_CLNT_URL_ID"), new TableField[] { SecuritySslRequest.SECURITY_SSL_REQUEST.URL_ID }, Keys.KEY_SECURITY_CLIENT_URL_PRIMARY, new TableField[] { SecurityClientUrl.SECURITY_CLIENT_URL.ID }, true);
    public static final ForeignKey<SecurityUserRecord, SecurityClientRecord> FK1_USER_CLIENT_ID = Internal.createForeignKey(SecurityUser.SECURITY_USER, DSL.name("FK1_USER_CLIENT_ID"), new TableField[] { SecurityUser.SECURITY_USER.CLIENT_ID }, Keys.KEY_SECURITY_CLIENT_PRIMARY, new TableField[] { SecurityClient.SECURITY_CLIENT.ID }, true);
    public static final ForeignKey<SecurityUserAddressRecord, SecurityUserRecord> FK1_USER_ADDRESS_USER_ID = Internal.createForeignKey(SecurityUserAddress.SECURITY_USER_ADDRESS, DSL.name("FK1_USER_ADDRESS_USER_ID"), new TableField[] { SecurityUserAddress.SECURITY_USER_ADDRESS.USER_ID }, Keys.KEY_SECURITY_USER_PRIMARY, new TableField[] { SecurityUser.SECURITY_USER.ID }, true);
    public static final ForeignKey<SecurityUserAddressRecord, SecurityAddressRecord> FK2_USER_ADDRESS_ADDRESS_ID = Internal.createForeignKey(SecurityUserAddress.SECURITY_USER_ADDRESS, DSL.name("FK2_USER_ADDRESS_ADDRESS_ID"), new TableField[] { SecurityUserAddress.SECURITY_USER_ADDRESS.ADDRESS_ID }, Keys.KEY_SECURITY_ADDRESS_PRIMARY, new TableField[] { SecurityAddress.SECURITY_ADDRESS.ID }, true);
    public static final ForeignKey<SecurityUserRolePermissionRecord, SecurityUserRecord> FK1_USER_ROLE_USER_ID = Internal.createForeignKey(SecurityUserRolePermission.SECURITY_USER_ROLE_PERMISSION, DSL.name("FK1_USER_ROLE_USER_ID"), new TableField[] { SecurityUserRolePermission.SECURITY_USER_ROLE_PERMISSION.USER_ID }, Keys.KEY_SECURITY_USER_PRIMARY, new TableField[] { SecurityUser.SECURITY_USER.ID }, true);
    public static final ForeignKey<SecurityUserRolePermissionRecord, SecurityRoleRecord> FK2_USER_ROLE_ROLE_ID = Internal.createForeignKey(SecurityUserRolePermission.SECURITY_USER_ROLE_PERMISSION, DSL.name("FK2_USER_ROLE_ROLE_ID"), new TableField[] { SecurityUserRolePermission.SECURITY_USER_ROLE_PERMISSION.ROLE_ID }, Keys.KEY_SECURITY_ROLE_PRIMARY, new TableField[] { SecurityRole.SECURITY_ROLE.ID }, true);
    public static final ForeignKey<SecurityUserRolePermissionRecord, SecurityPermissionRecord> FK3_USER_ROLE_PERMISSION_ID = Internal.createForeignKey(SecurityUserRolePermission.SECURITY_USER_ROLE_PERMISSION, DSL.name("FK3_USER_ROLE_PERMISSION_ID"), new TableField[] { SecurityUserRolePermission.SECURITY_USER_ROLE_PERMISSION.PERMISSION_ID }, Keys.KEY_SECURITY_PERMISSION_PRIMARY, new TableField[] { SecurityPermission.SECURITY_PERMISSION.ID }, true);
    public static final ForeignKey<SecurityUserTokenRecord, SecurityUserRecord> FK1_USER_TOKEN_USER_ID = Internal.createForeignKey(SecurityUserToken.SECURITY_USER_TOKEN, DSL.name("FK1_USER_TOKEN_USER_ID"), new TableField[] { SecurityUserToken.SECURITY_USER_TOKEN.USER_ID }, Keys.KEY_SECURITY_USER_PRIMARY, new TableField[] { SecurityUser.SECURITY_USER.ID }, true);
}
