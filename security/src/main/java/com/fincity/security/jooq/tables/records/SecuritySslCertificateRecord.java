/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables.records;


import com.fincity.security.jooq.tables.SecuritySslCertificate;

import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SecuritySslCertificateRecord extends UpdatableRecordImpl<SecuritySslCertificateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>security.security_ssl_certificate.ID</code>. Primary key
     */
    public SecuritySslCertificateRecord setId(ULong value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_certificate.ID</code>. Primary key
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>security.security_ssl_certificate.URL_ID</code>. URL ID
     * for which this SSL certificate belongs to
     */
    public SecuritySslCertificateRecord setUrlId(ULong value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_certificate.URL_ID</code>. URL ID
     * for which this SSL certificate belongs to
     */
    public ULong getUrlId() {
        return (ULong) get(1);
    }

    /**
     * Setter for <code>security.security_ssl_certificate.CRT</code>. SSL
     * certificate
     */
    public SecuritySslCertificateRecord setCrt(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_certificate.CRT</code>. SSL
     * certificate
     */
    public String getCrt() {
        return (String) get(2);
    }

    /**
     * Setter for <code>security.security_ssl_certificate.CRT_CHAIN</code>. SSL
     * certificate chain
     */
    public SecuritySslCertificateRecord setCrtChain(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_certificate.CRT_CHAIN</code>. SSL
     * certificate chain
     */
    public String getCrtChain() {
        return (String) get(3);
    }

    /**
     * Setter for <code>security.security_ssl_certificate.CRT_KEY</code>. SSL
     * certificate key
     */
    public SecuritySslCertificateRecord setCrtKey(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_certificate.CRT_KEY</code>. SSL
     * certificate key
     */
    public String getCrtKey() {
        return (String) get(4);
    }

    /**
     * Setter for <code>security.security_ssl_certificate.CSR</code>. SSL
     * certificate signing request
     */
    public SecuritySslCertificateRecord setCsr(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_certificate.CSR</code>. SSL
     * certificate signing request
     */
    public String getCsr() {
        return (String) get(5);
    }

    /**
     * Setter for <code>security.security_ssl_certificate.DOMAINS</code>.
     * Domains for which this SSL certificate is valid
     */
    public SecuritySslCertificateRecord setDomains(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_certificate.DOMAINS</code>.
     * Domains for which this SSL certificate is valid
     */
    public String getDomains() {
        return (String) get(6);
    }

    /**
     * Setter for <code>security.security_ssl_certificate.ORGANIZATION</code>.
     * Organization for which this SSL certificate is valid
     */
    public SecuritySslCertificateRecord setOrganization(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_certificate.ORGANIZATION</code>.
     * Organization for which this SSL certificate is valid
     */
    public String getOrganization() {
        return (String) get(7);
    }

    /**
     * Setter for <code>security.security_ssl_certificate.EXPIRY_DATE</code>.
     * Expiry date of this SSL certificate
     */
    public SecuritySslCertificateRecord setExpiryDate(LocalDateTime value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_certificate.EXPIRY_DATE</code>.
     * Expiry date of this SSL certificate
     */
    public LocalDateTime getExpiryDate() {
        return (LocalDateTime) get(8);
    }

    /**
     * Setter for <code>security.security_ssl_certificate.ISSUER</code>. Issuer
     * of this SSL certificate
     */
    public SecuritySslCertificateRecord setIssuer(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_certificate.ISSUER</code>. Issuer
     * of this SSL certificate
     */
    public String getIssuer() {
        return (String) get(9);
    }

    /**
     * Setter for <code>security.security_ssl_certificate.CURRENT</code>. Is
     * this the current SSL certificate for the URL
     */
    public SecuritySslCertificateRecord setCurrent(Byte value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_certificate.CURRENT</code>. Is
     * this the current SSL certificate for the URL
     */
    public Byte getCurrent() {
        return (Byte) get(10);
    }

    /**
     * Setter for
     * <code>security.security_ssl_certificate.AUTO_RENEW_TILL</code>. Time till
     * which this SSL certificate is auto renewed
     */
    public SecuritySslCertificateRecord setAutoRenewTill(LocalDateTime value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_ssl_certificate.AUTO_RENEW_TILL</code>. Time till
     * which this SSL certificate is auto renewed
     */
    public LocalDateTime getAutoRenewTill() {
        return (LocalDateTime) get(11);
    }

    /**
     * Setter for <code>security.security_ssl_certificate.CREATED_BY</code>. ID
     * of the user who created this row
     */
    public SecuritySslCertificateRecord setCreatedBy(ULong value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_certificate.CREATED_BY</code>. ID
     * of the user who created this row
     */
    public ULong getCreatedBy() {
        return (ULong) get(12);
    }

    /**
     * Setter for <code>security.security_ssl_certificate.CREATED_AT</code>.
     * Time when this row is created
     */
    public SecuritySslCertificateRecord setCreatedAt(LocalDateTime value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_certificate.CREATED_AT</code>.
     * Time when this row is created
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(13);
    }

    /**
     * Setter for <code>security.security_ssl_certificate.UPDATED_BY</code>. ID
     * of the user who updated this row
     */
    public SecuritySslCertificateRecord setUpdatedBy(ULong value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_certificate.UPDATED_BY</code>. ID
     * of the user who updated this row
     */
    public ULong getUpdatedBy() {
        return (ULong) get(14);
    }

    /**
     * Setter for <code>security.security_ssl_certificate.UPDATED_AT</code>.
     * Time when this row is updated
     */
    public SecuritySslCertificateRecord setUpdatedAt(LocalDateTime value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_certificate.UPDATED_AT</code>.
     * Time when this row is updated
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(15);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SecuritySslCertificateRecord
     */
    public SecuritySslCertificateRecord() {
        super(SecuritySslCertificate.SECURITY_SSL_CERTIFICATE);
    }

    /**
     * Create a detached, initialised SecuritySslCertificateRecord
     */
    public SecuritySslCertificateRecord(ULong id, ULong urlId, String crt, String crtChain, String crtKey, String csr, String domains, String organization, LocalDateTime expiryDate, String issuer, Byte current, LocalDateTime autoRenewTill, ULong createdBy, LocalDateTime createdAt, ULong updatedBy, LocalDateTime updatedAt) {
        super(SecuritySslCertificate.SECURITY_SSL_CERTIFICATE);

        setId(id);
        setUrlId(urlId);
        setCrt(crt);
        setCrtChain(crtChain);
        setCrtKey(crtKey);
        setCsr(csr);
        setDomains(domains);
        setOrganization(organization);
        setExpiryDate(expiryDate);
        setIssuer(issuer);
        setCurrent(current);
        setAutoRenewTill(autoRenewTill);
        setCreatedBy(createdBy);
        setCreatedAt(createdAt);
        setUpdatedBy(updatedBy);
        setUpdatedAt(updatedAt);
        resetTouchedOnNotNull();
    }
}
