/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables;


import com.fincity.security.jooq.Keys;
import com.fincity.security.jooq.Security;
import com.fincity.security.jooq.tables.SecurityProfile.SecurityProfilePath;
import com.fincity.security.jooq.tables.SecurityV2Role.SecurityV2RolePath;
import com.fincity.security.jooq.tables.records.SecurityProfileArrangementRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SecurityProfileArrangement extends TableImpl<SecurityProfileArrangementRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>security.security_profile_arrangement</code>
     */
    public static final SecurityProfileArrangement SECURITY_PROFILE_ARRANGEMENT = new SecurityProfileArrangement();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityProfileArrangementRecord> getRecordType() {
        return SecurityProfileArrangementRecord.class;
    }

    /**
     * The column <code>security.security_profile_arrangement.ID</code>. Primary
     * key
     */
    public final TableField<SecurityProfileArrangementRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>security.security_profile_arrangement.PROFILE_ID</code>.
     * Profile ID for which this arrangement belongs to
     */
    public final TableField<SecurityProfileArrangementRecord, ULong> PROFILE_ID = createField(DSL.name("PROFILE_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Profile ID for which this arrangement belongs to");

    /**
     * The column <code>security.security_profile_arrangement.ROLE_ID</code>.
     * Role ID for which this arrangement belongs to
     */
    public final TableField<SecurityProfileArrangementRecord, ULong> ROLE_ID = createField(DSL.name("ROLE_ID"), SQLDataType.BIGINTUNSIGNED, this, "Role ID for which this arrangement belongs to");

    /**
     * The column <code>security.security_profile_arrangement.NAME</code>. Name
     * of the arrangement
     */
    public final TableField<SecurityProfileArrangementRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(256).nullable(false), this, "Name of the arrangement");

    /**
     * The column <code>security.security_profile_arrangement.SHORT_NAME</code>.
     * Short name of the arrangement
     */
    public final TableField<SecurityProfileArrangementRecord, String> SHORT_NAME = createField(DSL.name("SHORT_NAME"), SQLDataType.VARCHAR(256), this, "Short name of the arrangement");

    /**
     * The column
     * <code>security.security_profile_arrangement.DESCRIPTION</code>.
     * Description of the arrangement
     */
    public final TableField<SecurityProfileArrangementRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "Description of the arrangement");

    /**
     * The column <code>security.security_profile_arrangement.ASSIGNABLE</code>.
     * Whether the arrangement is assignable
     */
    public final TableField<SecurityProfileArrangementRecord, Byte> ASSIGNABLE = createField(DSL.name("ASSIGNABLE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "Whether the arrangement is assignable");

    /**
     * The column
     * <code>security.security_profile_arrangement.PARENT_ARRANGEMENT_ID</code>.
     * Parent arrangement for hierarchical structure
     */
    public final TableField<SecurityProfileArrangementRecord, ULong> PARENT_ARRANGEMENT_ID = createField(DSL.name("PARENT_ARRANGEMENT_ID"), SQLDataType.BIGINTUNSIGNED, this, "Parent arrangement for hierarchical structure");

    /**
     * The column <code>security.security_profile_arrangement.ORDER</code>.
     * Order of the arrangement
     */
    public final TableField<SecurityProfileArrangementRecord, Integer> ORDER = createField(DSL.name("ORDER"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "Order of the arrangement");

    private SecurityProfileArrangement(Name alias, Table<SecurityProfileArrangementRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SecurityProfileArrangement(Name alias, Table<SecurityProfileArrangementRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>security.security_profile_arrangement</code>
     * table reference
     */
    public SecurityProfileArrangement(String alias) {
        this(DSL.name(alias), SECURITY_PROFILE_ARRANGEMENT);
    }

    /**
     * Create an aliased <code>security.security_profile_arrangement</code>
     * table reference
     */
    public SecurityProfileArrangement(Name alias) {
        this(alias, SECURITY_PROFILE_ARRANGEMENT);
    }

    /**
     * Create a <code>security.security_profile_arrangement</code> table
     * reference
     */
    public SecurityProfileArrangement() {
        this(DSL.name("security_profile_arrangement"), null);
    }

    public <O extends Record> SecurityProfileArrangement(Table<O> path, ForeignKey<O, SecurityProfileArrangementRecord> childPath, InverseForeignKey<O, SecurityProfileArrangementRecord> parentPath) {
        super(path, childPath, parentPath, SECURITY_PROFILE_ARRANGEMENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SecurityProfileArrangementPath extends SecurityProfileArrangement implements Path<SecurityProfileArrangementRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SecurityProfileArrangementPath(Table<O> path, ForeignKey<O, SecurityProfileArrangementRecord> childPath, InverseForeignKey<O, SecurityProfileArrangementRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SecurityProfileArrangementPath(Name alias, Table<SecurityProfileArrangementRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SecurityProfileArrangementPath as(String alias) {
            return new SecurityProfileArrangementPath(DSL.name(alias), this);
        }

        @Override
        public SecurityProfileArrangementPath as(Name alias) {
            return new SecurityProfileArrangementPath(alias, this);
        }

        @Override
        public SecurityProfileArrangementPath as(Table<?> alias) {
            return new SecurityProfileArrangementPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public Identity<SecurityProfileArrangementRecord, ULong> getIdentity() {
        return (Identity<SecurityProfileArrangementRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecurityProfileArrangementRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_PROFILE_ARRANGEMENT_PRIMARY;
    }

    @Override
    public List<ForeignKey<SecurityProfileArrangementRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_PROFILE_ARRANGEMENT_PROFILE_ID, Keys.FK2_PROFILE_ARRANGEMENT_ROLE_ID);
    }

    private transient SecurityProfilePath _securityProfile;

    /**
     * Get the implicit join path to the <code>security.security_profile</code>
     * table.
     */
    public SecurityProfilePath securityProfile() {
        if (_securityProfile == null)
            _securityProfile = new SecurityProfilePath(this, Keys.FK1_PROFILE_ARRANGEMENT_PROFILE_ID, null);

        return _securityProfile;
    }

    private transient SecurityV2RolePath _securityV2Role;

    /**
     * Get the implicit join path to the <code>security.security_v2_role</code>
     * table.
     */
    public SecurityV2RolePath securityV2Role() {
        if (_securityV2Role == null)
            _securityV2Role = new SecurityV2RolePath(this, Keys.FK2_PROFILE_ARRANGEMENT_ROLE_ID, null);

        return _securityV2Role;
    }

    @Override
    public SecurityProfileArrangement as(String alias) {
        return new SecurityProfileArrangement(DSL.name(alias), this);
    }

    @Override
    public SecurityProfileArrangement as(Name alias) {
        return new SecurityProfileArrangement(alias, this);
    }

    @Override
    public SecurityProfileArrangement as(Table<?> alias) {
        return new SecurityProfileArrangement(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityProfileArrangement rename(String name) {
        return new SecurityProfileArrangement(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityProfileArrangement rename(Name name) {
        return new SecurityProfileArrangement(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityProfileArrangement rename(Table<?> name) {
        return new SecurityProfileArrangement(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityProfileArrangement where(Condition condition) {
        return new SecurityProfileArrangement(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityProfileArrangement where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityProfileArrangement where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityProfileArrangement where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityProfileArrangement where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityProfileArrangement where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityProfileArrangement where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityProfileArrangement where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityProfileArrangement whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityProfileArrangement whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
