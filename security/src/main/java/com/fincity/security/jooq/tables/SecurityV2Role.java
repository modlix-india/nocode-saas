/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables;


import com.fincity.security.jooq.Keys;
import com.fincity.security.jooq.Security;
import com.fincity.security.jooq.tables.SecurityApp.SecurityAppPath;
import com.fincity.security.jooq.tables.SecurityClient.SecurityClientPath;
import com.fincity.security.jooq.tables.SecurityPermission.SecurityPermissionPath;
import com.fincity.security.jooq.tables.SecurityProfileArrangement.SecurityProfileArrangementPath;
import com.fincity.security.jooq.tables.SecurityUser.SecurityUserPath;
import com.fincity.security.jooq.tables.SecurityV2RolePermission.SecurityV2RolePermissionPath;
import com.fincity.security.jooq.tables.SecurityV2RoleRole.SecurityV2RoleRolePath;
import com.fincity.security.jooq.tables.SecurityV2UserRole.SecurityV2UserRolePath;
import com.fincity.security.jooq.tables.records.SecurityV2RoleRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SecurityV2Role extends TableImpl<SecurityV2RoleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>security.security_v2_role</code>
     */
    public static final SecurityV2Role SECURITY_V2_ROLE = new SecurityV2Role();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityV2RoleRecord> getRecordType() {
        return SecurityV2RoleRecord.class;
    }

    /**
     * The column <code>security.security_v2_role.ID</code>. Primary key
     */
    public final TableField<SecurityV2RoleRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>security.security_v2_role.CLIENT_ID</code>. Client ID
     * for which this role belongs to
     */
    public final TableField<SecurityV2RoleRecord, ULong> CLIENT_ID = createField(DSL.name("CLIENT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Client ID for which this role belongs to");

    /**
     * The column <code>security.security_v2_role.NAME</code>. Name of the role
     */
    public final TableField<SecurityV2RoleRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(256).nullable(false), this, "Name of the role");

    /**
     * The column <code>security.security_v2_role.SHORT_NAME</code>. Short name
     * of the role
     */
    public final TableField<SecurityV2RoleRecord, String> SHORT_NAME = createField(DSL.name("SHORT_NAME"), SQLDataType.VARCHAR(256), this, "Short name of the role");

    /**
     * The column <code>security.security_v2_role.DESCRIPTION</code>.
     * Description of the role
     */
    public final TableField<SecurityV2RoleRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "Description of the role");

    /**
     * The column <code>security.security_v2_role.APP_ID</code>. App ID for
     * which this role belongs to
     */
    public final TableField<SecurityV2RoleRecord, ULong> APP_ID = createField(DSL.name("APP_ID"), SQLDataType.BIGINTUNSIGNED, this, "App ID for which this role belongs to");

    /**
     * The column <code>security.security_v2_role.CREATED_BY</code>. ID of the
     * user who created this row
     */
    public final TableField<SecurityV2RoleRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row");

    /**
     * The column <code>security.security_v2_role.CREATED_AT</code>. Time when
     * this row is created
     */
    public final TableField<SecurityV2RoleRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created");

    /**
     * The column <code>security.security_v2_role.UPDATED_BY</code>. ID of the
     * user who updated this row
     */
    public final TableField<SecurityV2RoleRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row");

    /**
     * The column <code>security.security_v2_role.UPDATED_AT</code>. Time when
     * this row is updated
     */
    public final TableField<SecurityV2RoleRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated");

    private SecurityV2Role(Name alias, Table<SecurityV2RoleRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SecurityV2Role(Name alias, Table<SecurityV2RoleRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>security.security_v2_role</code> table reference
     */
    public SecurityV2Role(String alias) {
        this(DSL.name(alias), SECURITY_V2_ROLE);
    }

    /**
     * Create an aliased <code>security.security_v2_role</code> table reference
     */
    public SecurityV2Role(Name alias) {
        this(alias, SECURITY_V2_ROLE);
    }

    /**
     * Create a <code>security.security_v2_role</code> table reference
     */
    public SecurityV2Role() {
        this(DSL.name("security_v2_role"), null);
    }

    public <O extends Record> SecurityV2Role(Table<O> path, ForeignKey<O, SecurityV2RoleRecord> childPath, InverseForeignKey<O, SecurityV2RoleRecord> parentPath) {
        super(path, childPath, parentPath, SECURITY_V2_ROLE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SecurityV2RolePath extends SecurityV2Role implements Path<SecurityV2RoleRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SecurityV2RolePath(Table<O> path, ForeignKey<O, SecurityV2RoleRecord> childPath, InverseForeignKey<O, SecurityV2RoleRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SecurityV2RolePath(Name alias, Table<SecurityV2RoleRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SecurityV2RolePath as(String alias) {
            return new SecurityV2RolePath(DSL.name(alias), this);
        }

        @Override
        public SecurityV2RolePath as(Name alias) {
            return new SecurityV2RolePath(alias, this);
        }

        @Override
        public SecurityV2RolePath as(Table<?> alias) {
            return new SecurityV2RolePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public Identity<SecurityV2RoleRecord, ULong> getIdentity() {
        return (Identity<SecurityV2RoleRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecurityV2RoleRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_V2_ROLE_PRIMARY;
    }

    @Override
    public List<ForeignKey<SecurityV2RoleRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_V2_ROLE_CLIENT_ID, Keys.FK2_V2_ROLE_APP_ID);
    }

    private transient SecurityClientPath _securityClient;

    /**
     * Get the implicit join path to the <code>security.security_client</code>
     * table.
     */
    public SecurityClientPath securityClient() {
        if (_securityClient == null)
            _securityClient = new SecurityClientPath(this, Keys.FK1_V2_ROLE_CLIENT_ID, null);

        return _securityClient;
    }

    private transient SecurityAppPath _securityApp;

    /**
     * Get the implicit join path to the <code>security.security_app</code>
     * table.
     */
    public SecurityAppPath securityApp() {
        if (_securityApp == null)
            _securityApp = new SecurityAppPath(this, Keys.FK2_V2_ROLE_APP_ID, null);

        return _securityApp;
    }

    private transient SecurityV2RolePermissionPath _securityV2RolePermission;

    /**
     * Get the implicit to-many join path to the
     * <code>security.security_v2_role_permission</code> table
     */
    public SecurityV2RolePermissionPath securityV2RolePermission() {
        if (_securityV2RolePermission == null)
            _securityV2RolePermission = new SecurityV2RolePermissionPath(this, null, Keys.FK1_ROLE_PERMISSION_ROLE_ID.getInverseKey());

        return _securityV2RolePermission;
    }

    private transient SecurityV2RoleRolePath _fk1RoleRoleRoleId;

    /**
     * Get the implicit to-many join path to the
     * <code>security.security_v2_role_role</code> table, via the
     * <code>FK1_ROLE_ROLE_ROLE_ID</code> key
     */
    public SecurityV2RoleRolePath fk1RoleRoleRoleId() {
        if (_fk1RoleRoleRoleId == null)
            _fk1RoleRoleRoleId = new SecurityV2RoleRolePath(this, null, Keys.FK1_ROLE_ROLE_ROLE_ID.getInverseKey());

        return _fk1RoleRoleRoleId;
    }

    private transient SecurityProfileArrangementPath _securityProfileArrangement;

    /**
     * Get the implicit to-many join path to the
     * <code>security.security_profile_arrangement</code> table
     */
    public SecurityProfileArrangementPath securityProfileArrangement() {
        if (_securityProfileArrangement == null)
            _securityProfileArrangement = new SecurityProfileArrangementPath(this, null, Keys.FK2_PROFILE_ARRANGEMENT_ROLE_ID.getInverseKey());

        return _securityProfileArrangement;
    }

    private transient SecurityV2RoleRolePath _fk2RoleRoleSubRoleId;

    /**
     * Get the implicit to-many join path to the
     * <code>security.security_v2_role_role</code> table, via the
     * <code>FK2_ROLE_ROLE_SUB_ROLE_ID</code> key
     */
    public SecurityV2RoleRolePath fk2RoleRoleSubRoleId() {
        if (_fk2RoleRoleSubRoleId == null)
            _fk2RoleRoleSubRoleId = new SecurityV2RoleRolePath(this, null, Keys.FK2_ROLE_ROLE_SUB_ROLE_ID.getInverseKey());

        return _fk2RoleRoleSubRoleId;
    }

    private transient SecurityV2UserRolePath _securityV2UserRole;

    /**
     * Get the implicit to-many join path to the
     * <code>security.security_v2_user_role</code> table
     */
    public SecurityV2UserRolePath securityV2UserRole() {
        if (_securityV2UserRole == null)
            _securityV2UserRole = new SecurityV2UserRolePath(this, null, Keys.FK2_USER_ROLE_V2_ROLE_ID.getInverseKey());

        return _securityV2UserRole;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>security.security_permission</code> table
     */
    public SecurityPermissionPath securityPermission() {
        return securityV2RolePermission().securityPermission();
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>security.security_user</code> table
     */
    public SecurityUserPath securityUser() {
        return securityV2UserRole().securityUser();
    }

    @Override
    public SecurityV2Role as(String alias) {
        return new SecurityV2Role(DSL.name(alias), this);
    }

    @Override
    public SecurityV2Role as(Name alias) {
        return new SecurityV2Role(alias, this);
    }

    @Override
    public SecurityV2Role as(Table<?> alias) {
        return new SecurityV2Role(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityV2Role rename(String name) {
        return new SecurityV2Role(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityV2Role rename(Name name) {
        return new SecurityV2Role(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityV2Role rename(Table<?> name) {
        return new SecurityV2Role(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityV2Role where(Condition condition) {
        return new SecurityV2Role(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityV2Role where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityV2Role where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityV2Role where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityV2Role where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityV2Role where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityV2Role where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityV2Role where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityV2Role whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityV2Role whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
