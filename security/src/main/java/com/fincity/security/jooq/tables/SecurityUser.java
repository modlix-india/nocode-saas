/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables;


import com.fincity.security.jooq.Indexes;
import com.fincity.security.jooq.Keys;
import com.fincity.security.jooq.Security;
import com.fincity.security.jooq.enums.SecurityUserStatusCode;
import com.fincity.security.jooq.tables.SecurityClient.SecurityClientPath;
import com.fincity.security.jooq.tables.SecurityDesignation.SecurityDesignationPath;
import com.fincity.security.jooq.tables.SecurityOneTimeToken.SecurityOneTimeTokenPath;
import com.fincity.security.jooq.tables.SecurityOtp.SecurityOtpPath;
import com.fincity.security.jooq.tables.SecurityPastPasswords.SecurityPastPasswordsPath;
import com.fincity.security.jooq.tables.SecurityPastPins.SecurityPastPinsPath;
import com.fincity.security.jooq.tables.SecurityProfile.SecurityProfilePath;
import com.fincity.security.jooq.tables.SecurityProfileUser.SecurityProfileUserPath;
import com.fincity.security.jooq.tables.SecurityUser.SecurityUserPath;
import com.fincity.security.jooq.tables.SecurityUserAddress.SecurityUserAddressPath;
import com.fincity.security.jooq.tables.SecurityUserToken.SecurityUserTokenPath;
import com.fincity.security.jooq.tables.SecurityV2Role.SecurityV2RolePath;
import com.fincity.security.jooq.tables.SecurityV2UserRole.SecurityV2UserRolePath;
import com.fincity.security.jooq.tables.records.SecurityUserRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SecurityUser extends TableImpl<SecurityUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>security.security_user</code>
     */
    public static final SecurityUser SECURITY_USER = new SecurityUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityUserRecord> getRecordType() {
        return SecurityUserRecord.class;
    }

    /**
     * The column <code>security.security_user.ID</code>. Primary key
     */
    public final TableField<SecurityUserRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>security.security_user.DESIGNATION_ID</code>.
     * Designation ID for which this user belongs to
     */
    public final TableField<SecurityUserRecord, ULong> DESIGNATION_ID = createField(DSL.name("DESIGNATION_ID"), SQLDataType.BIGINTUNSIGNED, this, "Designation ID for which this user belongs to");

    /**
     * The column <code>security.security_user.REPORTING_TO</code>. Reporting to
     * ID for which this user belongs to
     */
    public final TableField<SecurityUserRecord, ULong> REPORTING_TO = createField(DSL.name("REPORTING_TO"), SQLDataType.BIGINTUNSIGNED, this, "Reporting to ID for which this user belongs to");

    /**
     * The column <code>security.security_user.CLIENT_ID</code>. Client ID for
     * which this user belongs to
     */
    public final TableField<SecurityUserRecord, ULong> CLIENT_ID = createField(DSL.name("CLIENT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Client ID for which this user belongs to");

    /**
     * The column <code>security.security_user.USER_NAME</code>. User Name to
     * login
     */
    public final TableField<SecurityUserRecord, String> USER_NAME = createField(DSL.name("USER_NAME"), SQLDataType.CHAR(32).nullable(false).defaultValue(DSL.inline("NONE", SQLDataType.CHAR)), this, "User Name to login");

    /**
     * The column <code>security.security_user.EMAIL_ID</code>. Email ID to
     * login
     */
    public final TableField<SecurityUserRecord, String> EMAIL_ID = createField(DSL.name("EMAIL_ID"), SQLDataType.VARCHAR(320).nullable(false).defaultValue(DSL.inline("NONE", SQLDataType.VARCHAR)), this, "Email ID to login");

    /**
     * The column <code>security.security_user.PHONE_NUMBER</code>. Phone Number
     * to login
     */
    public final TableField<SecurityUserRecord, String> PHONE_NUMBER = createField(DSL.name("PHONE_NUMBER"), SQLDataType.CHAR(32).nullable(false).defaultValue(DSL.inline("NONE", SQLDataType.CHAR)), this, "Phone Number to login");

    /**
     * The column <code>security.security_user.FIRST_NAME</code>. First name
     */
    public final TableField<SecurityUserRecord, String> FIRST_NAME = createField(DSL.name("FIRST_NAME"), SQLDataType.VARCHAR(128), this, "First name");

    /**
     * The column <code>security.security_user.LAST_NAME</code>. Last name
     */
    public final TableField<SecurityUserRecord, String> LAST_NAME = createField(DSL.name("LAST_NAME"), SQLDataType.VARCHAR(128), this, "Last name");

    /**
     * The column <code>security.security_user.DESIGNATION</code>. Designation
     */
    public final TableField<SecurityUserRecord, String> DESIGNATION = createField(DSL.name("DESIGNATION"), SQLDataType.VARCHAR(256), this, "Designation");

    /**
     * The column <code>security.security_user.MIDDLE_NAME</code>. Middle name
     */
    public final TableField<SecurityUserRecord, String> MIDDLE_NAME = createField(DSL.name("MIDDLE_NAME"), SQLDataType.VARCHAR(128), this, "Middle name");

    /**
     * The column <code>security.security_user.LOCALE_CODE</code>. User's Locale
     */
    public final TableField<SecurityUserRecord, String> LOCALE_CODE = createField(DSL.name("LOCALE_CODE"), SQLDataType.VARCHAR(10).defaultValue(DSL.inline("en-US", SQLDataType.VARCHAR)), this, "User's Locale");

    /**
     * The column <code>security.security_user.PASSWORD</code>. Password message
     * digested string
     */
    public final TableField<SecurityUserRecord, String> PASSWORD = createField(DSL.name("PASSWORD"), SQLDataType.VARCHAR(512), this, "Password message digested string");

    /**
     * The column <code>security.security_user.PASSWORD_HASHED</code>. Password
     * stored is hashed or not
     */
    public final TableField<SecurityUserRecord, Byte> PASSWORD_HASHED = createField(DSL.name("PASSWORD_HASHED"), SQLDataType.TINYINT.defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "Password stored is hashed or not");

    /**
     * The column <code>security.security_user.PIN</code>. PIN message digested
     * string
     */
    public final TableField<SecurityUserRecord, String> PIN = createField(DSL.name("PIN"), SQLDataType.VARCHAR(512), this, "PIN message digested string");

    /**
     * The column <code>security.security_user.PIN_HASHED</code>. PIN stored is
     * hashed or not
     */
    public final TableField<SecurityUserRecord, Byte> PIN_HASHED = createField(DSL.name("PIN_HASHED"), SQLDataType.TINYINT.defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "PIN stored is hashed or not");

    /**
     * The column <code>security.security_user.ACCOUNT_NON_EXPIRED</code>. If
     * false, means user is expired
     */
    public final TableField<SecurityUserRecord, Byte> ACCOUNT_NON_EXPIRED = createField(DSL.name("ACCOUNT_NON_EXPIRED"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "If false, means user is expired");

    /**
     * The column <code>security.security_user.ACCOUNT_NON_LOCKED</code>. If
     * false, means user is locked
     */
    public final TableField<SecurityUserRecord, Byte> ACCOUNT_NON_LOCKED = createField(DSL.name("ACCOUNT_NON_LOCKED"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "If false, means user is locked");

    /**
     * The column <code>security.security_user.CREDENTIALS_NON_EXPIRED</code>.
     * If flase, password is expired
     */
    public final TableField<SecurityUserRecord, Byte> CREDENTIALS_NON_EXPIRED = createField(DSL.name("CREDENTIALS_NON_EXPIRED"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "If flase, password is expired");

    /**
     * The column <code>security.security_user.NO_FAILED_ATTEMPT</code>. No of
     * failed attempts
     */
    public final TableField<SecurityUserRecord, Short> NO_FAILED_ATTEMPT = createField(DSL.name("NO_FAILED_ATTEMPT"), SQLDataType.SMALLINT.defaultValue(DSL.inline("0", SQLDataType.SMALLINT)), this, "No of failed attempts");

    /**
     * The column <code>security.security_user.NO_PIN_FAILED_ATTEMPT</code>. No
     * of failed attempts for PIN
     */
    public final TableField<SecurityUserRecord, Short> NO_PIN_FAILED_ATTEMPT = createField(DSL.name("NO_PIN_FAILED_ATTEMPT"), SQLDataType.SMALLINT.defaultValue(DSL.inline("0", SQLDataType.SMALLINT)), this, "No of failed attempts for PIN");

    /**
     * The column <code>security.security_user.NO_OTP_RESEND_ATTEMPT</code>. No
     * of Resend attempts for OTP
     */
    public final TableField<SecurityUserRecord, Short> NO_OTP_RESEND_ATTEMPT = createField(DSL.name("NO_OTP_RESEND_ATTEMPT"), SQLDataType.SMALLINT.defaultValue(DSL.inline("0", SQLDataType.SMALLINT)), this, "No of Resend attempts for OTP");

    /**
     * The column <code>security.security_user.NO_OTP_FAILED_ATTEMPT</code>. No
     * of failed attempts for OTP
     */
    public final TableField<SecurityUserRecord, Short> NO_OTP_FAILED_ATTEMPT = createField(DSL.name("NO_OTP_FAILED_ATTEMPT"), SQLDataType.SMALLINT.defaultValue(DSL.inline("0", SQLDataType.SMALLINT)), this, "No of failed attempts for OTP");

    /**
     * The column <code>security.security_user.STATUS_CODE</code>. Status of the
     * user
     */
    public final TableField<SecurityUserRecord, SecurityUserStatusCode> STATUS_CODE = createField(DSL.name("STATUS_CODE"), SQLDataType.VARCHAR(16).defaultValue(DSL.inline("ACTIVE", SQLDataType.VARCHAR)).asEnumDataType(SecurityUserStatusCode.class), this, "Status of the user");

    /**
     * The column <code>security.security_user.LOCKED_UNTIL</code>. If user is
     * blocked based on STATUS_CODE, until when this will indicate
     */
    public final TableField<SecurityUserRecord, LocalDateTime> LOCKED_UNTIL = createField(DSL.name("LOCKED_UNTIL"), SQLDataType.LOCALDATETIME(0), this, "If user is blocked based on STATUS_CODE, until when this will indicate");

    /**
     * The column <code>security.security_user.LOCKED_DUE_TO</code>. Reason for
     * the user blocking action
     */
    public final TableField<SecurityUserRecord, String> LOCKED_DUE_TO = createField(DSL.name("LOCKED_DUE_TO"), SQLDataType.VARCHAR(512), this, "Reason for the user blocking action");

    /**
     * The column <code>security.security_user.CREATED_BY</code>. ID of the user
     * who created this row
     */
    public final TableField<SecurityUserRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row");

    /**
     * The column <code>security.security_user.CREATED_AT</code>. Time when this
     * row is created
     */
    public final TableField<SecurityUserRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created");

    /**
     * The column <code>security.security_user.UPDATED_BY</code>. ID of the user
     * who updated this row
     */
    public final TableField<SecurityUserRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row");

    /**
     * The column <code>security.security_user.UPDATED_AT</code>. Time when this
     * row is updated
     */
    public final TableField<SecurityUserRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated");

    private SecurityUser(Name alias, Table<SecurityUserRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SecurityUser(Name alias, Table<SecurityUserRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>security.security_user</code> table reference
     */
    public SecurityUser(String alias) {
        this(DSL.name(alias), SECURITY_USER);
    }

    /**
     * Create an aliased <code>security.security_user</code> table reference
     */
    public SecurityUser(Name alias) {
        this(alias, SECURITY_USER);
    }

    /**
     * Create a <code>security.security_user</code> table reference
     */
    public SecurityUser() {
        this(DSL.name("security_user"), null);
    }

    public <O extends Record> SecurityUser(Table<O> path, ForeignKey<O, SecurityUserRecord> childPath, InverseForeignKey<O, SecurityUserRecord> parentPath) {
        super(path, childPath, parentPath, SECURITY_USER);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SecurityUserPath extends SecurityUser implements Path<SecurityUserRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SecurityUserPath(Table<O> path, ForeignKey<O, SecurityUserRecord> childPath, InverseForeignKey<O, SecurityUserRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SecurityUserPath(Name alias, Table<SecurityUserRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SecurityUserPath as(String alias) {
            return new SecurityUserPath(DSL.name(alias), this);
        }

        @Override
        public SecurityUserPath as(Name alias) {
            return new SecurityUserPath(alias, this);
        }

        @Override
        public SecurityUserPath as(Table<?> alias) {
            return new SecurityUserPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.SECURITY_USER_K1_USER_NAME, Indexes.SECURITY_USER_K2_EMAIL_ID, Indexes.SECURITY_USER_K3_PHONE_NUMBER);
    }

    @Override
    public Identity<SecurityUserRecord, ULong> getIdentity() {
        return (Identity<SecurityUserRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecurityUserRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_USER_PRIMARY;
    }

    @Override
    public List<UniqueKey<SecurityUserRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SECURITY_USER_UK1_USER_NAME);
    }

    @Override
    public List<ForeignKey<SecurityUserRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_USER_CLIENT_ID, Keys.FK1_USER_DESIGNATION_ID, Keys.FK2_USER_REPORTING_TO_ID);
    }

    private transient SecurityClientPath _securityClient;

    /**
     * Get the implicit join path to the <code>security.security_client</code>
     * table.
     */
    public SecurityClientPath securityClient() {
        if (_securityClient == null)
            _securityClient = new SecurityClientPath(this, Keys.FK1_USER_CLIENT_ID, null);

        return _securityClient;
    }

    private transient SecurityDesignationPath _securityDesignation;

    /**
     * Get the implicit join path to the
     * <code>security.security_designation</code> table.
     */
    public SecurityDesignationPath securityDesignation() {
        if (_securityDesignation == null)
            _securityDesignation = new SecurityDesignationPath(this, Keys.FK1_USER_DESIGNATION_ID, null);

        return _securityDesignation;
    }

    private transient SecurityUserPath _securityUser;

    /**
     * Get the implicit join path to the <code>security.security_user</code>
     * table.
     */
    public SecurityUserPath securityUser() {
        if (_securityUser == null)
            _securityUser = new SecurityUserPath(this, Keys.FK2_USER_REPORTING_TO_ID, null);

        return _securityUser;
    }

    private transient SecurityPastPasswordsPath _securityPastPasswords;

    /**
     * Get the implicit to-many join path to the
     * <code>security.security_past_passwords</code> table
     */
    public SecurityPastPasswordsPath securityPastPasswords() {
        if (_securityPastPasswords == null)
            _securityPastPasswords = new SecurityPastPasswordsPath(this, null, Keys.FK1_PAST_PASSWORD_USER_ID.getInverseKey());

        return _securityPastPasswords;
    }

    private transient SecurityPastPinsPath _securityPastPins;

    /**
     * Get the implicit to-many join path to the
     * <code>security.security_past_pins</code> table
     */
    public SecurityPastPinsPath securityPastPins() {
        if (_securityPastPins == null)
            _securityPastPins = new SecurityPastPinsPath(this, null, Keys.FK1_PAST_PIN_USER_ID.getInverseKey());

        return _securityPastPins;
    }

    private transient SecurityUserAddressPath _securityUserAddress;

    /**
     * Get the implicit to-many join path to the
     * <code>security.security_user_address</code> table
     */
    public SecurityUserAddressPath securityUserAddress() {
        if (_securityUserAddress == null)
            _securityUserAddress = new SecurityUserAddressPath(this, null, Keys.FK1_USER_ADDRESS_USER_ID.getInverseKey());

        return _securityUserAddress;
    }

    private transient SecurityV2UserRolePath _securityV2UserRole;

    /**
     * Get the implicit to-many join path to the
     * <code>security.security_v2_user_role</code> table
     */
    public SecurityV2UserRolePath securityV2UserRole() {
        if (_securityV2UserRole == null)
            _securityV2UserRole = new SecurityV2UserRolePath(this, null, Keys.FK1_USER_ROLE_V2_USER_ID.getInverseKey());

        return _securityV2UserRole;
    }

    private transient SecurityUserTokenPath _securityUserToken;

    /**
     * Get the implicit to-many join path to the
     * <code>security.security_user_token</code> table
     */
    public SecurityUserTokenPath securityUserToken() {
        if (_securityUserToken == null)
            _securityUserToken = new SecurityUserTokenPath(this, null, Keys.FK1_USER_TOKEN_USER_ID.getInverseKey());

        return _securityUserToken;
    }

    private transient SecurityOneTimeTokenPath _securityOneTimeToken;

    /**
     * Get the implicit to-many join path to the
     * <code>security.security_one_time_token</code> table
     */
    public SecurityOneTimeTokenPath securityOneTimeToken() {
        if (_securityOneTimeToken == null)
            _securityOneTimeToken = new SecurityOneTimeTokenPath(this, null, Keys.FK2_ONE_TIME_TOKEN_USER_ID.getInverseKey());

        return _securityOneTimeToken;
    }

    private transient SecurityOtpPath _securityOtp;

    /**
     * Get the implicit to-many join path to the
     * <code>security.security_otp</code> table
     */
    public SecurityOtpPath securityOtp() {
        if (_securityOtp == null)
            _securityOtp = new SecurityOtpPath(this, null, Keys.FK2_OTP_USER_ID.getInverseKey());

        return _securityOtp;
    }

    private transient SecurityProfileUserPath _securityProfileUser;

    /**
     * Get the implicit to-many join path to the
     * <code>security.security_profile_user</code> table
     */
    public SecurityProfileUserPath securityProfileUser() {
        if (_securityProfileUser == null)
            _securityProfileUser = new SecurityProfileUserPath(this, null, Keys.FK2_PROFILE_USER_USER_ID.getInverseKey());

        return _securityProfileUser;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>security.security_profile</code> table
     */
    public SecurityProfilePath securityProfile() {
        return securityProfileUser().securityProfile();
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>security.security_v2_role</code> table
     */
    public SecurityV2RolePath securityV2Role() {
        return securityV2UserRole().securityV2Role();
    }

    @Override
    public SecurityUser as(String alias) {
        return new SecurityUser(DSL.name(alias), this);
    }

    @Override
    public SecurityUser as(Name alias) {
        return new SecurityUser(alias, this);
    }

    @Override
    public SecurityUser as(Table<?> alias) {
        return new SecurityUser(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityUser rename(String name) {
        return new SecurityUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityUser rename(Name name) {
        return new SecurityUser(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityUser rename(Table<?> name) {
        return new SecurityUser(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityUser where(Condition condition) {
        return new SecurityUser(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityUser where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityUser where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityUser where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityUser where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityUser where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityUser where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityUser where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityUser whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityUser whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
