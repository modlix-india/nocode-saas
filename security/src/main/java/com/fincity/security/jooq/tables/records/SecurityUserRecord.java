/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables.records;


import com.fincity.security.jooq.enums.SecurityUserStatusCode;
import com.fincity.security.jooq.tables.SecurityUser;

import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SecurityUserRecord extends UpdatableRecordImpl<SecurityUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>security.security_user.ID</code>. Primary key
     */
    public SecurityUserRecord setId(ULong value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>security.security_user.ID</code>. Primary key
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>security.security_user.CLIENT_ID</code>. Client ID for
     * which this user belongs to
     */
    public SecurityUserRecord setClientId(ULong value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>security.security_user.CLIENT_ID</code>. Client ID for
     * which this user belongs to
     */
    public ULong getClientId() {
        return (ULong) get(1);
    }

    /**
     * Setter for <code>security.security_user.USER_NAME</code>. User Name to
     * login
     */
    public SecurityUserRecord setUserName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>security.security_user.USER_NAME</code>. User Name to
     * login
     */
    public String getUserName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>security.security_user.EMAIL_ID</code>. Email ID to
     * login
     */
    public SecurityUserRecord setEmailId(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>security.security_user.EMAIL_ID</code>. Email ID to
     * login
     */
    public String getEmailId() {
        return (String) get(3);
    }

    /**
     * Setter for <code>security.security_user.PHONE_NUMBER</code>. Phone Number
     * to login
     */
    public SecurityUserRecord setPhoneNumber(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>security.security_user.PHONE_NUMBER</code>. Phone Number
     * to login
     */
    public String getPhoneNumber() {
        return (String) get(4);
    }

    /**
     * Setter for <code>security.security_user.FIRST_NAME</code>. First name
     */
    public SecurityUserRecord setFirstName(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>security.security_user.FIRST_NAME</code>. First name
     */
    public String getFirstName() {
        return (String) get(5);
    }

    /**
     * Setter for <code>security.security_user.LAST_NAME</code>. Last name
     */
    public SecurityUserRecord setLastName(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>security.security_user.LAST_NAME</code>. Last name
     */
    public String getLastName() {
        return (String) get(6);
    }

    /**
     * Setter for <code>security.security_user.DESIGNATION</code>. Designation
     */
    public SecurityUserRecord setDesignation(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>security.security_user.DESIGNATION</code>. Designation
     */
    public String getDesignation() {
        return (String) get(7);
    }

    /**
     * Setter for <code>security.security_user.MIDDLE_NAME</code>. Middle name
     */
    public SecurityUserRecord setMiddleName(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>security.security_user.MIDDLE_NAME</code>. Middle name
     */
    public String getMiddleName() {
        return (String) get(8);
    }

    /**
     * Setter for <code>security.security_user.LOCALE_CODE</code>. User's Locale
     */
    public SecurityUserRecord setLocaleCode(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>security.security_user.LOCALE_CODE</code>. User's Locale
     */
    public String getLocaleCode() {
        return (String) get(9);
    }

    /**
     * Setter for <code>security.security_user.PASSWORD</code>. Password message
     * digested string
     */
    public SecurityUserRecord setPassword(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>security.security_user.PASSWORD</code>. Password message
     * digested string
     */
    public String getPassword() {
        return (String) get(10);
    }

    /**
     * Setter for <code>security.security_user.PASSWORD_HASHED</code>. Password
     * stored is hashed or not
     */
    public SecurityUserRecord setPasswordHashed(Byte value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>security.security_user.PASSWORD_HASHED</code>. Password
     * stored is hashed or not
     */
    public Byte getPasswordHashed() {
        return (Byte) get(11);
    }

    /**
     * Setter for <code>security.security_user.PIN</code>. PIN message digested
     * string
     */
    public SecurityUserRecord setPin(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>security.security_user.PIN</code>. PIN message digested
     * string
     */
    public String getPin() {
        return (String) get(12);
    }

    /**
     * Setter for <code>security.security_user.PIN_HASHED</code>. PIN stored is
     * hashed or not
     */
    public SecurityUserRecord setPinHashed(Byte value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>security.security_user.PIN_HASHED</code>. PIN stored is
     * hashed or not
     */
    public Byte getPinHashed() {
        return (Byte) get(13);
    }

    /**
     * Setter for <code>security.security_user.ACCOUNT_NON_EXPIRED</code>. If
     * false, means user is expired
     */
    public SecurityUserRecord setAccountNonExpired(Byte value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>security.security_user.ACCOUNT_NON_EXPIRED</code>. If
     * false, means user is expired
     */
    public Byte getAccountNonExpired() {
        return (Byte) get(14);
    }

    /**
     * Setter for <code>security.security_user.ACCOUNT_NON_LOCKED</code>. If
     * false, means user is locked
     */
    public SecurityUserRecord setAccountNonLocked(Byte value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>security.security_user.ACCOUNT_NON_LOCKED</code>. If
     * false, means user is locked
     */
    public Byte getAccountNonLocked() {
        return (Byte) get(15);
    }

    /**
     * Setter for <code>security.security_user.CREDENTIALS_NON_EXPIRED</code>.
     * If flase, password is expired
     */
    public SecurityUserRecord setCredentialsNonExpired(Byte value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>security.security_user.CREDENTIALS_NON_EXPIRED</code>.
     * If flase, password is expired
     */
    public Byte getCredentialsNonExpired() {
        return (Byte) get(16);
    }

    /**
     * Setter for <code>security.security_user.NO_FAILED_ATTEMPT</code>. No of
     * failed attempts
     */
    public SecurityUserRecord setNoFailedAttempt(Short value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>security.security_user.NO_FAILED_ATTEMPT</code>. No of
     * failed attempts
     */
    public Short getNoFailedAttempt() {
        return (Short) get(17);
    }

    /**
     * Setter for <code>security.security_user.NO_PIN_FAILED_ATTEMPT</code>. No
     * of failed attempts for PIN
     */
    public SecurityUserRecord setNoPinFailedAttempt(Short value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for <code>security.security_user.NO_PIN_FAILED_ATTEMPT</code>. No
     * of failed attempts for PIN
     */
    public Short getNoPinFailedAttempt() {
        return (Short) get(18);
    }

    /**
     * Setter for <code>security.security_user.NO_OTP_RESEND_ATTEMPT</code>. No
     * of Resend attempts for OTP
     */
    public SecurityUserRecord setNoOtpResendAttempt(Short value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for <code>security.security_user.NO_OTP_RESEND_ATTEMPT</code>. No
     * of Resend attempts for OTP
     */
    public Short getNoOtpResendAttempt() {
        return (Short) get(19);
    }

    /**
     * Setter for <code>security.security_user.NO_OTP_FAILED_ATTEMPT</code>. No
     * of failed attempts for OTP
     */
    public SecurityUserRecord setNoOtpFailedAttempt(Short value) {
        set(20, value);
        return this;
    }

    /**
     * Getter for <code>security.security_user.NO_OTP_FAILED_ATTEMPT</code>. No
     * of failed attempts for OTP
     */
    public Short getNoOtpFailedAttempt() {
        return (Short) get(20);
    }

    /**
     * Setter for <code>security.security_user.STATUS_CODE</code>. Status of the
     * user
     */
    public SecurityUserRecord setStatusCode(SecurityUserStatusCode value) {
        set(21, value);
        return this;
    }

    /**
     * Getter for <code>security.security_user.STATUS_CODE</code>. Status of the
     * user
     */
    public SecurityUserStatusCode getStatusCode() {
        return (SecurityUserStatusCode) get(21);
    }

    /**
     * Setter for <code>security.security_user.LOCKED_UNTIL</code>. If user is
     * blocked based on STATUS_CODE, until when this will indicate
     */
    public SecurityUserRecord setLockedUntil(LocalDateTime value) {
        set(22, value);
        return this;
    }

    /**
     * Getter for <code>security.security_user.LOCKED_UNTIL</code>. If user is
     * blocked based on STATUS_CODE, until when this will indicate
     */
    public LocalDateTime getLockedUntil() {
        return (LocalDateTime) get(22);
    }

    /**
     * Setter for <code>security.security_user.LOCKED_DUE_TO</code>. Reason for
     * the user blocking action
     */
    public SecurityUserRecord setLockedDueTo(String value) {
        set(23, value);
        return this;
    }

    /**
     * Getter for <code>security.security_user.LOCKED_DUE_TO</code>. Reason for
     * the user blocking action
     */
    public String getLockedDueTo() {
        return (String) get(23);
    }

    /**
     * Setter for <code>security.security_user.CREATED_BY</code>. ID of the user
     * who created this row
     */
    public SecurityUserRecord setCreatedBy(ULong value) {
        set(24, value);
        return this;
    }

    /**
     * Getter for <code>security.security_user.CREATED_BY</code>. ID of the user
     * who created this row
     */
    public ULong getCreatedBy() {
        return (ULong) get(24);
    }

    /**
     * Setter for <code>security.security_user.CREATED_AT</code>. Time when this
     * row is created
     */
    public SecurityUserRecord setCreatedAt(LocalDateTime value) {
        set(25, value);
        return this;
    }

    /**
     * Getter for <code>security.security_user.CREATED_AT</code>. Time when this
     * row is created
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(25);
    }

    /**
     * Setter for <code>security.security_user.UPDATED_BY</code>. ID of the user
     * who updated this row
     */
    public SecurityUserRecord setUpdatedBy(ULong value) {
        set(26, value);
        return this;
    }

    /**
     * Getter for <code>security.security_user.UPDATED_BY</code>. ID of the user
     * who updated this row
     */
    public ULong getUpdatedBy() {
        return (ULong) get(26);
    }

    /**
     * Setter for <code>security.security_user.UPDATED_AT</code>. Time when this
     * row is updated
     */
    public SecurityUserRecord setUpdatedAt(LocalDateTime value) {
        set(27, value);
        return this;
    }

    /**
     * Getter for <code>security.security_user.UPDATED_AT</code>. Time when this
     * row is updated
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(27);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SecurityUserRecord
     */
    public SecurityUserRecord() {
        super(SecurityUser.SECURITY_USER);
    }

    /**
     * Create a detached, initialised SecurityUserRecord
     */
    public SecurityUserRecord(ULong id, ULong clientId, String userName, String emailId, String phoneNumber, String firstName, String lastName, String designation, String middleName, String localeCode, String password, Byte passwordHashed, String pin, Byte pinHashed, Byte accountNonExpired, Byte accountNonLocked, Byte credentialsNonExpired, Short noFailedAttempt, Short noPinFailedAttempt, Short noOtpResendAttempt, Short noOtpFailedAttempt, SecurityUserStatusCode statusCode, LocalDateTime lockedUntil, String lockedDueTo, ULong createdBy, LocalDateTime createdAt, ULong updatedBy, LocalDateTime updatedAt) {
        super(SecurityUser.SECURITY_USER);

        setId(id);
        setClientId(clientId);
        setUserName(userName);
        setEmailId(emailId);
        setPhoneNumber(phoneNumber);
        setFirstName(firstName);
        setLastName(lastName);
        setDesignation(designation);
        setMiddleName(middleName);
        setLocaleCode(localeCode);
        setPassword(password);
        setPasswordHashed(passwordHashed);
        setPin(pin);
        setPinHashed(pinHashed);
        setAccountNonExpired(accountNonExpired);
        setAccountNonLocked(accountNonLocked);
        setCredentialsNonExpired(credentialsNonExpired);
        setNoFailedAttempt(noFailedAttempt);
        setNoPinFailedAttempt(noPinFailedAttempt);
        setNoOtpResendAttempt(noOtpResendAttempt);
        setNoOtpFailedAttempt(noOtpFailedAttempt);
        setStatusCode(statusCode);
        setLockedUntil(lockedUntil);
        setLockedDueTo(lockedDueTo);
        setCreatedBy(createdBy);
        setCreatedAt(createdAt);
        setUpdatedBy(updatedBy);
        setUpdatedAt(updatedAt);
        resetChangedOnNotNull();
    }
}
