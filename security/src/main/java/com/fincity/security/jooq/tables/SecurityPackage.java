/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables;


import com.fincity.security.jooq.Keys;
import com.fincity.security.jooq.Security;
import com.fincity.security.jooq.tables.SecurityApp.SecurityAppPath;
import com.fincity.security.jooq.tables.SecurityAppRegPackage.SecurityAppRegPackagePath;
import com.fincity.security.jooq.tables.SecurityClient.SecurityClientPath;
import com.fincity.security.jooq.tables.SecurityClientPackage.SecurityClientPackagePath;
import com.fincity.security.jooq.tables.SecurityPackageRole.SecurityPackageRolePath;
import com.fincity.security.jooq.tables.SecurityRole.SecurityRolePath;
import com.fincity.security.jooq.tables.records.SecurityPackageRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SecurityPackage extends TableImpl<SecurityPackageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>security.security_package</code>
     */
    public static final SecurityPackage SECURITY_PACKAGE = new SecurityPackage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityPackageRecord> getRecordType() {
        return SecurityPackageRecord.class;
    }

    /**
     * The column <code>security.security_package.ID</code>. Primary key
     */
    public final TableField<SecurityPackageRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>security.security_package.CLIENT_ID</code>. Client ID
     * for which this permission belongs to
     */
    public final TableField<SecurityPackageRecord, ULong> CLIENT_ID = createField(DSL.name("CLIENT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Client ID for which this permission belongs to");

    /**
     * The column <code>security.security_package.APP_ID</code>.
     */
    public final TableField<SecurityPackageRecord, ULong> APP_ID = createField(DSL.name("APP_ID"), SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column <code>security.security_package.CODE</code>. Package code
     */
    public final TableField<SecurityPackageRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.CHAR(8).nullable(false), this, "Package code");

    /**
     * The column <code>security.security_package.NAME</code>. Name of the
     * package
     */
    public final TableField<SecurityPackageRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(256).nullable(false), this, "Name of the package");

    /**
     * The column <code>security.security_package.DESCRIPTION</code>.
     * Description of the package
     */
    public final TableField<SecurityPackageRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "Description of the package");

    /**
     * The column <code>security.security_package.BASE</code>. Indicator if this
     * package is for every client
     */
    public final TableField<SecurityPackageRecord, Byte> BASE = createField(DSL.name("BASE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Indicator if this package is for every client");

    /**
     * The column <code>security.security_package.CREATED_BY</code>. ID of the
     * user who created this row
     */
    public final TableField<SecurityPackageRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row");

    /**
     * The column <code>security.security_package.CREATED_AT</code>. Time when
     * this row is created
     */
    public final TableField<SecurityPackageRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created");

    /**
     * The column <code>security.security_package.UPDATED_BY</code>. ID of the
     * user who updated this row
     */
    public final TableField<SecurityPackageRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row");

    /**
     * The column <code>security.security_package.UPDATED_AT</code>. Time when
     * this row is updated
     */
    public final TableField<SecurityPackageRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated");

    private SecurityPackage(Name alias, Table<SecurityPackageRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SecurityPackage(Name alias, Table<SecurityPackageRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>security.security_package</code> table reference
     */
    public SecurityPackage(String alias) {
        this(DSL.name(alias), SECURITY_PACKAGE);
    }

    /**
     * Create an aliased <code>security.security_package</code> table reference
     */
    public SecurityPackage(Name alias) {
        this(alias, SECURITY_PACKAGE);
    }

    /**
     * Create a <code>security.security_package</code> table reference
     */
    public SecurityPackage() {
        this(DSL.name("security_package"), null);
    }

    public <O extends Record> SecurityPackage(Table<O> path, ForeignKey<O, SecurityPackageRecord> childPath, InverseForeignKey<O, SecurityPackageRecord> parentPath) {
        super(path, childPath, parentPath, SECURITY_PACKAGE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SecurityPackagePath extends SecurityPackage implements Path<SecurityPackageRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SecurityPackagePath(Table<O> path, ForeignKey<O, SecurityPackageRecord> childPath, InverseForeignKey<O, SecurityPackageRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SecurityPackagePath(Name alias, Table<SecurityPackageRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SecurityPackagePath as(String alias) {
            return new SecurityPackagePath(DSL.name(alias), this);
        }

        @Override
        public SecurityPackagePath as(Name alias) {
            return new SecurityPackagePath(alias, this);
        }

        @Override
        public SecurityPackagePath as(Table<?> alias) {
            return new SecurityPackagePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public Identity<SecurityPackageRecord, ULong> getIdentity() {
        return (Identity<SecurityPackageRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecurityPackageRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_PACKAGE_PRIMARY;
    }

    @Override
    public List<UniqueKey<SecurityPackageRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SECURITY_PACKAGE_UK1_PACKAGE_CODE, Keys.KEY_SECURITY_PACKAGE_UK2_PACKAGE_NAME_APP_ID);
    }

    @Override
    public List<ForeignKey<SecurityPackageRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_PACKAGE_CLIENT_ID, Keys.FK2_PACKAGE_APP_ID);
    }

    private transient SecurityClientPath _securityClient;

    /**
     * Get the implicit join path to the <code>security.security_client</code>
     * table.
     */
    public SecurityClientPath securityClient() {
        if (_securityClient == null)
            _securityClient = new SecurityClientPath(this, Keys.FK1_PACKAGE_CLIENT_ID, null);

        return _securityClient;
    }

    private transient SecurityAppPath _securityApp;

    /**
     * Get the implicit join path to the <code>security.security_app</code>
     * table.
     */
    public SecurityAppPath securityApp() {
        if (_securityApp == null)
            _securityApp = new SecurityAppPath(this, Keys.FK2_PACKAGE_APP_ID, null);

        return _securityApp;
    }

    private transient SecurityClientPackagePath _securityClientPackage;

    /**
     * Get the implicit to-many join path to the
     * <code>security.security_client_package</code> table
     */
    public SecurityClientPackagePath securityClientPackage() {
        if (_securityClientPackage == null)
            _securityClientPackage = new SecurityClientPackagePath(this, null, Keys.FK2_CLIENT_PACKAGE_PACKAGE_ID.getInverseKey());

        return _securityClientPackage;
    }

    private transient SecurityPackageRolePath _securityPackageRole;

    /**
     * Get the implicit to-many join path to the
     * <code>security.security_package_role</code> table
     */
    public SecurityPackageRolePath securityPackageRole() {
        if (_securityPackageRole == null)
            _securityPackageRole = new SecurityPackageRolePath(this, null, Keys.FK2_PACKAGE_ROLE_PACKAGE_ID.getInverseKey());

        return _securityPackageRole;
    }

    private transient SecurityAppRegPackagePath _securityAppRegPackage;

    /**
     * Get the implicit to-many join path to the
     * <code>security.security_app_reg_package</code> table
     */
    public SecurityAppRegPackagePath securityAppRegPackage() {
        if (_securityAppRegPackage == null)
            _securityAppRegPackage = new SecurityAppRegPackagePath(this, null, Keys.FK3_APP_REG_PKG_PKG_ID.getInverseKey());

        return _securityAppRegPackage;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>security.security_role</code> table
     */
    public SecurityRolePath securityRole() {
        return securityPackageRole().securityRole();
    }

    @Override
    public SecurityPackage as(String alias) {
        return new SecurityPackage(DSL.name(alias), this);
    }

    @Override
    public SecurityPackage as(Name alias) {
        return new SecurityPackage(alias, this);
    }

    @Override
    public SecurityPackage as(Table<?> alias) {
        return new SecurityPackage(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityPackage rename(String name) {
        return new SecurityPackage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityPackage rename(Name name) {
        return new SecurityPackage(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityPackage rename(Table<?> name) {
        return new SecurityPackage(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPackage where(Condition condition) {
        return new SecurityPackage(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPackage where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPackage where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPackage where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityPackage where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityPackage where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityPackage where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityPackage where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPackage whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPackage whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
