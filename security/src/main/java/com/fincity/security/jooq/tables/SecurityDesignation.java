/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables;


import com.fincity.security.jooq.Keys;
import com.fincity.security.jooq.Security;
import com.fincity.security.jooq.tables.SecurityClient.SecurityClientPath;
import com.fincity.security.jooq.tables.SecurityDepartment.SecurityDepartmentPath;
import com.fincity.security.jooq.tables.SecurityDesignation.SecurityDesignationPath;
import com.fincity.security.jooq.tables.SecurityUser.SecurityUserPath;
import com.fincity.security.jooq.tables.records.SecurityDesignationRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SecurityDesignation extends TableImpl<SecurityDesignationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>security.security_designation</code>
     */
    public static final SecurityDesignation SECURITY_DESIGNATION = new SecurityDesignation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityDesignationRecord> getRecordType() {
        return SecurityDesignationRecord.class;
    }

    /**
     * The column <code>security.security_designation.ID</code>. Primary key
     */
    public final TableField<SecurityDesignationRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>security.security_designation.CLIENT_ID</code>. Client
     * ID for which this designation belongs to
     */
    public final TableField<SecurityDesignationRecord, ULong> CLIENT_ID = createField(DSL.name("CLIENT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Client ID for which this designation belongs to");

    /**
     * The column <code>security.security_designation.NAME</code>. Name of the
     * designation
     */
    public final TableField<SecurityDesignationRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(256).nullable(false), this, "Name of the designation");

    /**
     * The column <code>security.security_designation.DESCRIPTION</code>.
     * Description of the designation
     */
    public final TableField<SecurityDesignationRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "Description of the designation");

    /**
     * The column <code>security.security_designation.DEPARTMENT_ID</code>.
     * Department ID for which this designation belongs to
     */
    public final TableField<SecurityDesignationRecord, ULong> DEPARTMENT_ID = createField(DSL.name("DEPARTMENT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Department ID for which this designation belongs to");

    /**
     * The column
     * <code>security.security_designation.PARENT_DESIGNATION_ID</code>. Parent
     * designation for hierarchy
     */
    public final TableField<SecurityDesignationRecord, ULong> PARENT_DESIGNATION_ID = createField(DSL.name("PARENT_DESIGNATION_ID"), SQLDataType.BIGINTUNSIGNED, this, "Parent designation for hierarchy");

    /**
     * The column
     * <code>security.security_designation.NEXT_DESIGNATION_ID</code>. Next
     * designation in the hierarchy
     */
    public final TableField<SecurityDesignationRecord, ULong> NEXT_DESIGNATION_ID = createField(DSL.name("NEXT_DESIGNATION_ID"), SQLDataType.BIGINTUNSIGNED, this, "Next designation in the hierarchy");

    /**
     * The column <code>security.security_designation.CREATED_BY</code>. ID of
     * the user who created this row
     */
    public final TableField<SecurityDesignationRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row");

    /**
     * The column <code>security.security_designation.CREATED_AT</code>. Time
     * when this row is created
     */
    public final TableField<SecurityDesignationRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created");

    /**
     * The column <code>security.security_designation.UPDATED_BY</code>. ID of
     * the user who updated this row
     */
    public final TableField<SecurityDesignationRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row");

    /**
     * The column <code>security.security_designation.UPDATED_AT</code>. Time
     * when this row is updated
     */
    public final TableField<SecurityDesignationRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated");

    private SecurityDesignation(Name alias, Table<SecurityDesignationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SecurityDesignation(Name alias, Table<SecurityDesignationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>security.security_designation</code> table
     * reference
     */
    public SecurityDesignation(String alias) {
        this(DSL.name(alias), SECURITY_DESIGNATION);
    }

    /**
     * Create an aliased <code>security.security_designation</code> table
     * reference
     */
    public SecurityDesignation(Name alias) {
        this(alias, SECURITY_DESIGNATION);
    }

    /**
     * Create a <code>security.security_designation</code> table reference
     */
    public SecurityDesignation() {
        this(DSL.name("security_designation"), null);
    }

    public <O extends Record> SecurityDesignation(Table<O> path, ForeignKey<O, SecurityDesignationRecord> childPath, InverseForeignKey<O, SecurityDesignationRecord> parentPath) {
        super(path, childPath, parentPath, SECURITY_DESIGNATION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SecurityDesignationPath extends SecurityDesignation implements Path<SecurityDesignationRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SecurityDesignationPath(Table<O> path, ForeignKey<O, SecurityDesignationRecord> childPath, InverseForeignKey<O, SecurityDesignationRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SecurityDesignationPath(Name alias, Table<SecurityDesignationRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SecurityDesignationPath as(String alias) {
            return new SecurityDesignationPath(DSL.name(alias), this);
        }

        @Override
        public SecurityDesignationPath as(Name alias) {
            return new SecurityDesignationPath(alias, this);
        }

        @Override
        public SecurityDesignationPath as(Table<?> alias) {
            return new SecurityDesignationPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public Identity<SecurityDesignationRecord, ULong> getIdentity() {
        return (Identity<SecurityDesignationRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecurityDesignationRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_DESIGNATION_PRIMARY;
    }

    @Override
    public List<ForeignKey<SecurityDesignationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_DESIGNATION_CLIENT_ID, Keys.FK2_DESIGNATION_DEPARTMENT_ID, Keys.FK3_DESIGNATION_PARENT_ID, Keys.FK4_DESIGNATION_NEXT_DESIGNATION_ID);
    }

    private transient SecurityClientPath _securityClient;

    /**
     * Get the implicit join path to the <code>security.security_client</code>
     * table.
     */
    public SecurityClientPath securityClient() {
        if (_securityClient == null)
            _securityClient = new SecurityClientPath(this, Keys.FK1_DESIGNATION_CLIENT_ID, null);

        return _securityClient;
    }

    private transient SecurityDepartmentPath _securityDepartment;

    /**
     * Get the implicit join path to the
     * <code>security.security_department</code> table.
     */
    public SecurityDepartmentPath securityDepartment() {
        if (_securityDepartment == null)
            _securityDepartment = new SecurityDepartmentPath(this, Keys.FK2_DESIGNATION_DEPARTMENT_ID, null);

        return _securityDepartment;
    }

    private transient SecurityDesignationPath _fk3DesignationParentId;

    /**
     * Get the implicit join path to the
     * <code>security.security_designation</code> table, via the
     * <code>FK3_DESIGNATION_PARENT_ID</code> key.
     */
    public SecurityDesignationPath fk3DesignationParentId() {
        if (_fk3DesignationParentId == null)
            _fk3DesignationParentId = new SecurityDesignationPath(this, Keys.FK3_DESIGNATION_PARENT_ID, null);

        return _fk3DesignationParentId;
    }

    private transient SecurityDesignationPath _fk4DesignationNextDesignationId;

    /**
     * Get the implicit join path to the
     * <code>security.security_designation</code> table, via the
     * <code>FK4_DESIGNATION_NEXT_DESIGNATION_ID</code> key.
     */
    public SecurityDesignationPath fk4DesignationNextDesignationId() {
        if (_fk4DesignationNextDesignationId == null)
            _fk4DesignationNextDesignationId = new SecurityDesignationPath(this, Keys.FK4_DESIGNATION_NEXT_DESIGNATION_ID, null);

        return _fk4DesignationNextDesignationId;
    }

    private transient SecurityUserPath _securityUser;

    /**
     * Get the implicit to-many join path to the
     * <code>security.security_user</code> table
     */
    public SecurityUserPath securityUser() {
        if (_securityUser == null)
            _securityUser = new SecurityUserPath(this, null, Keys.FK1_USER_DESIGNATION_ID.getInverseKey());

        return _securityUser;
    }

    @Override
    public SecurityDesignation as(String alias) {
        return new SecurityDesignation(DSL.name(alias), this);
    }

    @Override
    public SecurityDesignation as(Name alias) {
        return new SecurityDesignation(alias, this);
    }

    @Override
    public SecurityDesignation as(Table<?> alias) {
        return new SecurityDesignation(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityDesignation rename(String name) {
        return new SecurityDesignation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityDesignation rename(Name name) {
        return new SecurityDesignation(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityDesignation rename(Table<?> name) {
        return new SecurityDesignation(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityDesignation where(Condition condition) {
        return new SecurityDesignation(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityDesignation where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityDesignation where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityDesignation where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityDesignation where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityDesignation where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityDesignation where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityDesignation where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityDesignation whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityDesignation whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
