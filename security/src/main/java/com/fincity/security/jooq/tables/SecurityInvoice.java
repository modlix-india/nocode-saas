/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables;


import com.fincity.security.jooq.Keys;
import com.fincity.security.jooq.Security;
import com.fincity.security.jooq.enums.SecurityInvoiceInvoiceStatus;
import com.fincity.security.jooq.tables.SecurityClient.SecurityClientPath;
import com.fincity.security.jooq.tables.SecurityInvoiceItem.SecurityInvoiceItemPath;
import com.fincity.security.jooq.tables.SecurityPayment.SecurityPaymentPath;
import com.fincity.security.jooq.tables.SecurityPlan.SecurityPlanPath;
import com.fincity.security.jooq.tables.SecurityPlanCycle.SecurityPlanCyclePath;
import com.fincity.security.jooq.tables.records.SecurityInvoiceRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SecurityInvoice extends TableImpl<SecurityInvoiceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>security.security_invoice</code>
     */
    public static final SecurityInvoice SECURITY_INVOICE = new SecurityInvoice();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityInvoiceRecord> getRecordType() {
        return SecurityInvoiceRecord.class;
    }

    /**
     * The column <code>security.security_invoice.ID</code>. Primary key
     */
    public final TableField<SecurityInvoiceRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>security.security_invoice.CLIENT_ID</code>. Client ID
     */
    public final TableField<SecurityInvoiceRecord, ULong> CLIENT_ID = createField(DSL.name("CLIENT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Client ID");

    /**
     * The column <code>security.security_invoice.PLAN_ID</code>. Plan ID
     */
    public final TableField<SecurityInvoiceRecord, ULong> PLAN_ID = createField(DSL.name("PLAN_ID"), SQLDataType.BIGINTUNSIGNED, this, "Plan ID");

    /**
     * The column <code>security.security_invoice.CYCLE_ID</code>. Cycle ID
     */
    public final TableField<SecurityInvoiceRecord, ULong> CYCLE_ID = createField(DSL.name("CYCLE_ID"), SQLDataType.BIGINTUNSIGNED, this, "Cycle ID");

    /**
     * The column <code>security.security_invoice.INVOICE_NUMBER</code>. Invoice
     * number
     */
    public final TableField<SecurityInvoiceRecord, String> INVOICE_NUMBER = createField(DSL.name("INVOICE_NUMBER"), SQLDataType.VARCHAR(256).nullable(false), this, "Invoice number");

    /**
     * The column <code>security.security_invoice.INVOICE_DATE</code>. Invoice
     * date
     */
    public final TableField<SecurityInvoiceRecord, LocalDateTime> INVOICE_DATE = createField(DSL.name("INVOICE_DATE"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "Invoice date");

    /**
     * The column <code>security.security_invoice.INVOICE_DUE_DATE</code>.
     * Invoice due date
     */
    public final TableField<SecurityInvoiceRecord, LocalDateTime> INVOICE_DUE_DATE = createField(DSL.name("INVOICE_DUE_DATE"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "Invoice due date");

    /**
     * The column <code>security.security_invoice.INVOICE_AMOUNT</code>. Invoice
     * amount
     */
    public final TableField<SecurityInvoiceRecord, BigDecimal> INVOICE_AMOUNT = createField(DSL.name("INVOICE_AMOUNT"), SQLDataType.DECIMAL(10, 2).nullable(false), this, "Invoice amount");

    /**
     * The column <code>security.security_invoice.INVOICE_STATUS</code>. Invoice
     * status
     */
    public final TableField<SecurityInvoiceRecord, SecurityInvoiceInvoiceStatus> INVOICE_STATUS = createField(DSL.name("INVOICE_STATUS"), SQLDataType.VARCHAR(9).nullable(false).defaultValue(DSL.inline("PENDING", SQLDataType.VARCHAR)).asEnumDataType(SecurityInvoiceInvoiceStatus.class), this, "Invoice status");

    /**
     * The column <code>security.security_invoice.CREATED_BY</code>. ID of the
     * user who created this row
     */
    public final TableField<SecurityInvoiceRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row");

    /**
     * The column <code>security.security_invoice.CREATED_AT</code>. Time when
     * this row is created
     */
    public final TableField<SecurityInvoiceRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created");

    /**
     * The column <code>security.security_invoice.UPDATED_BY</code>. ID of the
     * user who updated this row
     */
    public final TableField<SecurityInvoiceRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row");

    /**
     * The column <code>security.security_invoice.UPDATED_AT</code>. Time when
     * this row is updated
     */
    public final TableField<SecurityInvoiceRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated");

    /**
     * The column <code>security.security_invoice.INVOICE_REASON</code>. Invoice
     * reason
     */
    public final TableField<SecurityInvoiceRecord, String> INVOICE_REASON = createField(DSL.name("INVOICE_REASON"), SQLDataType.VARCHAR(256), this, "Invoice reason");

    private SecurityInvoice(Name alias, Table<SecurityInvoiceRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SecurityInvoice(Name alias, Table<SecurityInvoiceRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>security.security_invoice</code> table reference
     */
    public SecurityInvoice(String alias) {
        this(DSL.name(alias), SECURITY_INVOICE);
    }

    /**
     * Create an aliased <code>security.security_invoice</code> table reference
     */
    public SecurityInvoice(Name alias) {
        this(alias, SECURITY_INVOICE);
    }

    /**
     * Create a <code>security.security_invoice</code> table reference
     */
    public SecurityInvoice() {
        this(DSL.name("security_invoice"), null);
    }

    public <O extends Record> SecurityInvoice(Table<O> path, ForeignKey<O, SecurityInvoiceRecord> childPath, InverseForeignKey<O, SecurityInvoiceRecord> parentPath) {
        super(path, childPath, parentPath, SECURITY_INVOICE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SecurityInvoicePath extends SecurityInvoice implements Path<SecurityInvoiceRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SecurityInvoicePath(Table<O> path, ForeignKey<O, SecurityInvoiceRecord> childPath, InverseForeignKey<O, SecurityInvoiceRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SecurityInvoicePath(Name alias, Table<SecurityInvoiceRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SecurityInvoicePath as(String alias) {
            return new SecurityInvoicePath(DSL.name(alias), this);
        }

        @Override
        public SecurityInvoicePath as(Name alias) {
            return new SecurityInvoicePath(alias, this);
        }

        @Override
        public SecurityInvoicePath as(Table<?> alias) {
            return new SecurityInvoicePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public Identity<SecurityInvoiceRecord, ULong> getIdentity() {
        return (Identity<SecurityInvoiceRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecurityInvoiceRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_INVOICE_PRIMARY;
    }

    @Override
    public List<UniqueKey<SecurityInvoiceRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SECURITY_INVOICE_UK1_INVOICE_CLIENT_ID_INVOICE_NUMBER);
    }

    @Override
    public List<ForeignKey<SecurityInvoiceRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_INVOICE_CLIENT_ID, Keys.FK2_INVOICE_PLAN_ID, Keys.FK3_INVOICE_CYCLE_ID);
    }

    private transient SecurityClientPath _securityClient;

    /**
     * Get the implicit join path to the <code>security.security_client</code>
     * table.
     */
    public SecurityClientPath securityClient() {
        if (_securityClient == null)
            _securityClient = new SecurityClientPath(this, Keys.FK1_INVOICE_CLIENT_ID, null);

        return _securityClient;
    }

    private transient SecurityPlanPath _securityPlan;

    /**
     * Get the implicit join path to the <code>security.security_plan</code>
     * table.
     */
    public SecurityPlanPath securityPlan() {
        if (_securityPlan == null)
            _securityPlan = new SecurityPlanPath(this, Keys.FK2_INVOICE_PLAN_ID, null);

        return _securityPlan;
    }

    private transient SecurityPlanCyclePath _securityPlanCycle;

    /**
     * Get the implicit join path to the
     * <code>security.security_plan_cycle</code> table.
     */
    public SecurityPlanCyclePath securityPlanCycle() {
        if (_securityPlanCycle == null)
            _securityPlanCycle = new SecurityPlanCyclePath(this, Keys.FK3_INVOICE_CYCLE_ID, null);

        return _securityPlanCycle;
    }

    private transient SecurityInvoiceItemPath _securityInvoiceItem;

    /**
     * Get the implicit to-many join path to the
     * <code>security.security_invoice_item</code> table
     */
    public SecurityInvoiceItemPath securityInvoiceItem() {
        if (_securityInvoiceItem == null)
            _securityInvoiceItem = new SecurityInvoiceItemPath(this, null, Keys.FK1_INVOICE_ITEM_INVOICE_ID.getInverseKey());

        return _securityInvoiceItem;
    }

    private transient SecurityPaymentPath _securityPayment;

    /**
     * Get the implicit to-many join path to the
     * <code>security.security_payment</code> table
     */
    public SecurityPaymentPath securityPayment() {
        if (_securityPayment == null)
            _securityPayment = new SecurityPaymentPath(this, null, Keys.FK1_PAYMENT_INVOICE_ID.getInverseKey());

        return _securityPayment;
    }

    @Override
    public SecurityInvoice as(String alias) {
        return new SecurityInvoice(DSL.name(alias), this);
    }

    @Override
    public SecurityInvoice as(Name alias) {
        return new SecurityInvoice(alias, this);
    }

    @Override
    public SecurityInvoice as(Table<?> alias) {
        return new SecurityInvoice(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityInvoice rename(String name) {
        return new SecurityInvoice(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityInvoice rename(Name name) {
        return new SecurityInvoice(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityInvoice rename(Table<?> name) {
        return new SecurityInvoice(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityInvoice where(Condition condition) {
        return new SecurityInvoice(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityInvoice where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityInvoice where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityInvoice where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityInvoice where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityInvoice where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityInvoice where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityInvoice where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityInvoice whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityInvoice whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
