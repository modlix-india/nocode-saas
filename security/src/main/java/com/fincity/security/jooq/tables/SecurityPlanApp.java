/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables;


import com.fincity.security.jooq.Keys;
import com.fincity.security.jooq.Security;
import com.fincity.security.jooq.tables.SecurityApp.SecurityAppPath;
import com.fincity.security.jooq.tables.SecurityPlan.SecurityPlanPath;
import com.fincity.security.jooq.tables.records.SecurityPlanAppRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SecurityPlanApp extends TableImpl<SecurityPlanAppRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>security.security_plan_app</code>
     */
    public static final SecurityPlanApp SECURITY_PLAN_APP = new SecurityPlanApp();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityPlanAppRecord> getRecordType() {
        return SecurityPlanAppRecord.class;
    }

    /**
     * The column <code>security.security_plan_app.ID</code>. Primary key
     */
    public final TableField<SecurityPlanAppRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>security.security_plan_app.PLAN_ID</code>. Plan ID
     */
    public final TableField<SecurityPlanAppRecord, ULong> PLAN_ID = createField(DSL.name("PLAN_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Plan ID");

    /**
     * The column <code>security.security_plan_app.APP_ID</code>. App ID
     */
    public final TableField<SecurityPlanAppRecord, ULong> APP_ID = createField(DSL.name("APP_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "App ID");

    private SecurityPlanApp(Name alias, Table<SecurityPlanAppRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SecurityPlanApp(Name alias, Table<SecurityPlanAppRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>security.security_plan_app</code> table reference
     */
    public SecurityPlanApp(String alias) {
        this(DSL.name(alias), SECURITY_PLAN_APP);
    }

    /**
     * Create an aliased <code>security.security_plan_app</code> table reference
     */
    public SecurityPlanApp(Name alias) {
        this(alias, SECURITY_PLAN_APP);
    }

    /**
     * Create a <code>security.security_plan_app</code> table reference
     */
    public SecurityPlanApp() {
        this(DSL.name("security_plan_app"), null);
    }

    public <O extends Record> SecurityPlanApp(Table<O> path, ForeignKey<O, SecurityPlanAppRecord> childPath, InverseForeignKey<O, SecurityPlanAppRecord> parentPath) {
        super(path, childPath, parentPath, SECURITY_PLAN_APP);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SecurityPlanAppPath extends SecurityPlanApp implements Path<SecurityPlanAppRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SecurityPlanAppPath(Table<O> path, ForeignKey<O, SecurityPlanAppRecord> childPath, InverseForeignKey<O, SecurityPlanAppRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SecurityPlanAppPath(Name alias, Table<SecurityPlanAppRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SecurityPlanAppPath as(String alias) {
            return new SecurityPlanAppPath(DSL.name(alias), this);
        }

        @Override
        public SecurityPlanAppPath as(Name alias) {
            return new SecurityPlanAppPath(alias, this);
        }

        @Override
        public SecurityPlanAppPath as(Table<?> alias) {
            return new SecurityPlanAppPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public Identity<SecurityPlanAppRecord, ULong> getIdentity() {
        return (Identity<SecurityPlanAppRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecurityPlanAppRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_PLAN_APP_PRIMARY;
    }

    @Override
    public List<UniqueKey<SecurityPlanAppRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SECURITY_PLAN_APP_UK1_PLAN_APP_PLAN_ID_APP_ID);
    }

    @Override
    public List<ForeignKey<SecurityPlanAppRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_PLAN_APP_PLAN_ID, Keys.FK2_PLAN_APP_APP_ID);
    }

    private transient SecurityPlanPath _securityPlan;

    /**
     * Get the implicit join path to the <code>security.security_plan</code>
     * table.
     */
    public SecurityPlanPath securityPlan() {
        if (_securityPlan == null)
            _securityPlan = new SecurityPlanPath(this, Keys.FK1_PLAN_APP_PLAN_ID, null);

        return _securityPlan;
    }

    private transient SecurityAppPath _securityApp;

    /**
     * Get the implicit join path to the <code>security.security_app</code>
     * table.
     */
    public SecurityAppPath securityApp() {
        if (_securityApp == null)
            _securityApp = new SecurityAppPath(this, Keys.FK2_PLAN_APP_APP_ID, null);

        return _securityApp;
    }

    @Override
    public SecurityPlanApp as(String alias) {
        return new SecurityPlanApp(DSL.name(alias), this);
    }

    @Override
    public SecurityPlanApp as(Name alias) {
        return new SecurityPlanApp(alias, this);
    }

    @Override
    public SecurityPlanApp as(Table<?> alias) {
        return new SecurityPlanApp(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityPlanApp rename(String name) {
        return new SecurityPlanApp(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityPlanApp rename(Name name) {
        return new SecurityPlanApp(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityPlanApp rename(Table<?> name) {
        return new SecurityPlanApp(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPlanApp where(Condition condition) {
        return new SecurityPlanApp(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPlanApp where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPlanApp where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPlanApp where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityPlanApp where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityPlanApp where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityPlanApp where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityPlanApp where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPlanApp whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityPlanApp whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
