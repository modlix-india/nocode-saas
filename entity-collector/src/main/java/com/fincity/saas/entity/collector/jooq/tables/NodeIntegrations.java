/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.entity.collector.jooq.tables;


import com.fincity.saas.entity.collector.jooq.EntityCollector;
import com.fincity.saas.entity.collector.jooq.Keys;
import com.fincity.saas.entity.collector.jooq.tables.records.NodeIntegrationsRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class NodeIntegrations extends TableImpl<NodeIntegrationsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>entity_collector.node_integrations</code>
     */
    public static final NodeIntegrations NODE_INTEGRATIONS = new NodeIntegrations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NodeIntegrationsRecord> getRecordType() {
        return NodeIntegrationsRecord.class;
    }

    /**
     * The column <code>entity_collector.node_integrations.id</code>.
     */
    public final TableField<NodeIntegrationsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>entity_collector.node_integrations.app_code</code>.
     */
    public final TableField<NodeIntegrationsRecord, String> APP_CODE = createField(DSL.name("app_code"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>entity_collector.node_integrations.client_code</code>.
     */
    public final TableField<NodeIntegrationsRecord, String> CLIENT_CODE = createField(DSL.name("client_code"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>entity_collector.node_integrations.target</code>.
     */
    public final TableField<NodeIntegrationsRecord, String> TARGET = createField(DSL.name("target"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column
     * <code>entity_collector.node_integrations.secondary_target</code>.
     */
    public final TableField<NodeIntegrationsRecord, String> SECONDARY_TARGET = createField(DSL.name("secondary_target"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>entity_collector.node_integrations.in_source</code>.
     */
    public final TableField<NodeIntegrationsRecord, String> IN_SOURCE = createField(DSL.name("in_source"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>entity_collector.node_integrations.in_source_type</code>.
     */
    public final TableField<NodeIntegrationsRecord, String> IN_SOURCE_TYPE = createField(DSL.name("in_source_type"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>entity_collector.node_integrations.created_at</code>.
     */
    public final TableField<NodeIntegrationsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>entity_collector.node_integrations.created_by</code>.
     */
    public final TableField<NodeIntegrationsRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>entity_collector.node_integrations.updated_at</code>.
     */
    public final TableField<NodeIntegrationsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>entity_collector.node_integrations.updated_by</code>.
     */
    public final TableField<NodeIntegrationsRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(64), this, "");

    private NodeIntegrations(Name alias, Table<NodeIntegrationsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private NodeIntegrations(Name alias, Table<NodeIntegrationsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>entity_collector.node_integrations</code> table
     * reference
     */
    public NodeIntegrations(String alias) {
        this(DSL.name(alias), NODE_INTEGRATIONS);
    }

    /**
     * Create an aliased <code>entity_collector.node_integrations</code> table
     * reference
     */
    public NodeIntegrations(Name alias) {
        this(alias, NODE_INTEGRATIONS);
    }

    /**
     * Create a <code>entity_collector.node_integrations</code> table reference
     */
    public NodeIntegrations() {
        this(DSL.name("node_integrations"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : EntityCollector.ENTITY_COLLECTOR;
    }

    @Override
    public Identity<NodeIntegrationsRecord, Long> getIdentity() {
        return (Identity<NodeIntegrationsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<NodeIntegrationsRecord> getPrimaryKey() {
        return Keys.KEY_NODE_INTEGRATIONS_PRIMARY;
    }

    @Override
    public NodeIntegrations as(String alias) {
        return new NodeIntegrations(DSL.name(alias), this);
    }

    @Override
    public NodeIntegrations as(Name alias) {
        return new NodeIntegrations(alias, this);
    }

    @Override
    public NodeIntegrations as(Table<?> alias) {
        return new NodeIntegrations(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NodeIntegrations rename(String name) {
        return new NodeIntegrations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NodeIntegrations rename(Name name) {
        return new NodeIntegrations(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NodeIntegrations rename(Table<?> name) {
        return new NodeIntegrations(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NodeIntegrations where(Condition condition) {
        return new NodeIntegrations(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NodeIntegrations where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NodeIntegrations where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NodeIntegrations where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NodeIntegrations where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NodeIntegrations where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NodeIntegrations where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NodeIntegrations where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NodeIntegrations whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NodeIntegrations whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
