/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.entity.collector.jooq.tables;


import com.fincity.saas.entity.collector.jooq.EntityCollector;
import com.fincity.saas.entity.collector.jooq.Keys;
import com.fincity.saas.entity.collector.jooq.enums.CollectionLogsStatus;
import com.fincity.saas.entity.collector.jooq.tables.EntityIntegrations.EntityIntegrationsPath;
import com.fincity.saas.entity.collector.jooq.tables.records.CollectionLogsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class CollectionLogs extends TableImpl<CollectionLogsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>entity_collector.collection_logs</code>
     */
    public static final CollectionLogs COLLECTION_LOGS = new CollectionLogs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CollectionLogsRecord> getRecordType() {
        return CollectionLogsRecord.class;
    }

    /**
     * The column <code>entity_collector.collection_logs.id</code>. Primary key
     */
    public final TableField<CollectionLogsRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column
     * <code>entity_collector.collection_logs.entity_integration_id</code>.
     * Entity integration ID
     */
    public final TableField<CollectionLogsRecord, ULong> ENTITY_INTEGRATION_ID = createField(DSL.name("entity_integration_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Entity integration ID");

    /**
     * The column
     * <code>entity_collector.collection_logs.incoming_lead_data</code>. Lead
     * Data
     */
    public final TableField<CollectionLogsRecord, JSON> INCOMING_LEAD_DATA = createField(DSL.name("incoming_lead_data"), SQLDataType.JSON.nullable(false), this, "Lead Data");

    /**
     * The column <code>entity_collector.collection_logs.ip_address</code>. Ip
     * Address
     */
    public final TableField<CollectionLogsRecord, String> IP_ADDRESS = createField(DSL.name("ip_address"), SQLDataType.VARCHAR(320), this, "Ip Address");

    /**
     * The column
     * <code>entity_collector.collection_logs.outgoing_lead_data</code>. Lead
     * Data Forwarded to CRM
     */
    public final TableField<CollectionLogsRecord, JSON> OUTGOING_LEAD_DATA = createField(DSL.name("outgoing_lead_data"), SQLDataType.JSON.nullable(false), this, "Lead Data Forwarded to CRM");

    /**
     * The column <code>entity_collector.collection_logs.status</code>. Status
     * of the Lead Transfer
     */
    public final TableField<CollectionLogsRecord, CollectionLogsStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(11).nullable(false).asEnumDataType(CollectionLogsStatus.class), this, "Status of the Lead Transfer");

    /**
     * The column <code>entity_collector.collection_logs.status_message</code>.
     * Message given for the status
     */
    public final TableField<CollectionLogsRecord, String> STATUS_MESSAGE = createField(DSL.name("status_message"), SQLDataType.CLOB, this, "Message given for the status");

    /**
     * The column <code>entity_collector.collection_logs.created_at</code>. Time
     * when this row is created
     */
    public final TableField<CollectionLogsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created");

    private CollectionLogs(Name alias, Table<CollectionLogsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private CollectionLogs(Name alias, Table<CollectionLogsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>entity_collector.collection_logs</code> table
     * reference
     */
    public CollectionLogs(String alias) {
        this(DSL.name(alias), COLLECTION_LOGS);
    }

    /**
     * Create an aliased <code>entity_collector.collection_logs</code> table
     * reference
     */
    public CollectionLogs(Name alias) {
        this(alias, COLLECTION_LOGS);
    }

    /**
     * Create a <code>entity_collector.collection_logs</code> table reference
     */
    public CollectionLogs() {
        this(DSL.name("collection_logs"), null);
    }

    public <O extends Record> CollectionLogs(Table<O> path, ForeignKey<O, CollectionLogsRecord> childPath, InverseForeignKey<O, CollectionLogsRecord> parentPath) {
        super(path, childPath, parentPath, COLLECTION_LOGS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CollectionLogsPath extends CollectionLogs implements Path<CollectionLogsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CollectionLogsPath(Table<O> path, ForeignKey<O, CollectionLogsRecord> childPath, InverseForeignKey<O, CollectionLogsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CollectionLogsPath(Name alias, Table<CollectionLogsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CollectionLogsPath as(String alias) {
            return new CollectionLogsPath(DSL.name(alias), this);
        }

        @Override
        public CollectionLogsPath as(Name alias) {
            return new CollectionLogsPath(alias, this);
        }

        @Override
        public CollectionLogsPath as(Table<?> alias) {
            return new CollectionLogsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : EntityCollector.ENTITY_COLLECTOR;
    }

    @Override
    public Identity<CollectionLogsRecord, ULong> getIdentity() {
        return (Identity<CollectionLogsRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CollectionLogsRecord> getPrimaryKey() {
        return Keys.KEY_COLLECTION_LOGS_PRIMARY;
    }

    @Override
    public List<ForeignKey<CollectionLogsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_COLLECTION_ENTITY_INTEGRATION_ID);
    }

    private transient EntityIntegrationsPath _entityIntegrations;

    /**
     * Get the implicit join path to the
     * <code>entity_collector.entity_integrations</code> table.
     */
    public EntityIntegrationsPath entityIntegrations() {
        if (_entityIntegrations == null)
            _entityIntegrations = new EntityIntegrationsPath(this, Keys.FK1_COLLECTION_ENTITY_INTEGRATION_ID, null);

        return _entityIntegrations;
    }

    @Override
    public CollectionLogs as(String alias) {
        return new CollectionLogs(DSL.name(alias), this);
    }

    @Override
    public CollectionLogs as(Name alias) {
        return new CollectionLogs(alias, this);
    }

    @Override
    public CollectionLogs as(Table<?> alias) {
        return new CollectionLogs(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CollectionLogs rename(String name) {
        return new CollectionLogs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CollectionLogs rename(Name name) {
        return new CollectionLogs(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CollectionLogs rename(Table<?> name) {
        return new CollectionLogs(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CollectionLogs where(Condition condition) {
        return new CollectionLogs(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CollectionLogs where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CollectionLogs where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CollectionLogs where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CollectionLogs where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CollectionLogs where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CollectionLogs where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CollectionLogs where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CollectionLogs whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CollectionLogs whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
