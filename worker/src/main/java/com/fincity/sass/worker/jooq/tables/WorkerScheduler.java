/*
 * This file is generated by jOOQ.
 */
package com.fincity.sass.worker.jooq.tables;


import com.fincity.sass.worker.jooq.Keys;
import com.fincity.sass.worker.jooq.Worker;
import com.fincity.sass.worker.jooq.tables.WorkerTask.WorkerTaskPath;
import com.fincity.sass.worker.jooq.tables.records.WorkerSchedulerRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class WorkerScheduler extends TableImpl<WorkerSchedulerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>worker.worker_scheduler</code>
     */
    public static final WorkerScheduler WORKER_SCHEDULER = new WorkerScheduler();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkerSchedulerRecord> getRecordType() {
        return WorkerSchedulerRecord.class;
    }

    /**
     * The column <code>worker.worker_scheduler.id</code>. Primary key, unique
     * identifier for each Task
     */
    public final TableField<WorkerSchedulerRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key, unique identifier for each Task");

    /**
     * The column <code>worker.worker_scheduler.name</code>.
     */
    public final TableField<WorkerSchedulerRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>worker.worker_scheduler.status</code>.
     */
    public final TableField<WorkerSchedulerRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>worker.worker_scheduler.is_running</code>.
     */
    public final TableField<WorkerSchedulerRecord, Byte> IS_RUNNING = createField(DSL.name("is_running"), SQLDataType.TINYINT.defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>worker.worker_scheduler.is_standby_mode</code>.
     */
    public final TableField<WorkerSchedulerRecord, Byte> IS_STANDBY_MODE = createField(DSL.name("is_standby_mode"), SQLDataType.TINYINT.defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>worker.worker_scheduler.is_shutdown</code>.
     */
    public final TableField<WorkerSchedulerRecord, Byte> IS_SHUTDOWN = createField(DSL.name("is_shutdown"), SQLDataType.TINYINT.defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>worker.worker_scheduler.start_time</code>.
     */
    public final TableField<WorkerSchedulerRecord, LocalDateTime> START_TIME = createField(DSL.name("start_time"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>worker.worker_scheduler.CREATED_BY</code>. ID of the
     * user who created this row
     */
    public final TableField<WorkerSchedulerRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row");

    /**
     * The column <code>worker.worker_scheduler.CREATED_AT</code>. Time when
     * this row is created
     */
    public final TableField<WorkerSchedulerRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created");

    /**
     * The column <code>worker.worker_scheduler.UPDATED_BY</code>. ID of the
     * user who last updated this row
     */
    public final TableField<WorkerSchedulerRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who last updated this row");

    /**
     * The column <code>worker.worker_scheduler.UPDATED_AT</code>. Time when
     * this row is last updated
     */
    public final TableField<WorkerSchedulerRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is last updated");

    private WorkerScheduler(Name alias, Table<WorkerSchedulerRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private WorkerScheduler(Name alias, Table<WorkerSchedulerRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>worker.worker_scheduler</code> table reference
     */
    public WorkerScheduler(String alias) {
        this(DSL.name(alias), WORKER_SCHEDULER);
    }

    /**
     * Create an aliased <code>worker.worker_scheduler</code> table reference
     */
    public WorkerScheduler(Name alias) {
        this(alias, WORKER_SCHEDULER);
    }

    /**
     * Create a <code>worker.worker_scheduler</code> table reference
     */
    public WorkerScheduler() {
        this(DSL.name("worker_scheduler"), null);
    }

    public <O extends Record> WorkerScheduler(Table<O> path, ForeignKey<O, WorkerSchedulerRecord> childPath, InverseForeignKey<O, WorkerSchedulerRecord> parentPath) {
        super(path, childPath, parentPath, WORKER_SCHEDULER);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class WorkerSchedulerPath extends WorkerScheduler implements Path<WorkerSchedulerRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> WorkerSchedulerPath(Table<O> path, ForeignKey<O, WorkerSchedulerRecord> childPath, InverseForeignKey<O, WorkerSchedulerRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private WorkerSchedulerPath(Name alias, Table<WorkerSchedulerRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public WorkerSchedulerPath as(String alias) {
            return new WorkerSchedulerPath(DSL.name(alias), this);
        }

        @Override
        public WorkerSchedulerPath as(Name alias) {
            return new WorkerSchedulerPath(alias, this);
        }

        @Override
        public WorkerSchedulerPath as(Table<?> alias) {
            return new WorkerSchedulerPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Worker.WORKER;
    }

    @Override
    public Identity<WorkerSchedulerRecord, ULong> getIdentity() {
        return (Identity<WorkerSchedulerRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<WorkerSchedulerRecord> getPrimaryKey() {
        return Keys.KEY_WORKER_SCHEDULER_PRIMARY;
    }

    @Override
    public List<UniqueKey<WorkerSchedulerRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_WORKER_SCHEDULER_UK_SCHEDULER_NAME);
    }

    private transient WorkerTaskPath _workerTask;

    /**
     * Get the implicit to-many join path to the <code>worker.worker_task</code>
     * table
     */
    public WorkerTaskPath workerTask() {
        if (_workerTask == null)
            _workerTask = new WorkerTaskPath(this, null, Keys.FK_WORKER_TASK_SCHEDULER.getInverseKey());

        return _workerTask;
    }

    @Override
    public WorkerScheduler as(String alias) {
        return new WorkerScheduler(DSL.name(alias), this);
    }

    @Override
    public WorkerScheduler as(Name alias) {
        return new WorkerScheduler(alias, this);
    }

    @Override
    public WorkerScheduler as(Table<?> alias) {
        return new WorkerScheduler(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkerScheduler rename(String name) {
        return new WorkerScheduler(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkerScheduler rename(Name name) {
        return new WorkerScheduler(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkerScheduler rename(Table<?> name) {
        return new WorkerScheduler(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WorkerScheduler where(Condition condition) {
        return new WorkerScheduler(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WorkerScheduler where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WorkerScheduler where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WorkerScheduler where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public WorkerScheduler where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public WorkerScheduler where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public WorkerScheduler where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public WorkerScheduler where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WorkerScheduler whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WorkerScheduler whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
