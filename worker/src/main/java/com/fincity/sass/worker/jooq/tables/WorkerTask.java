/*
 * This file is generated by jOOQ.
 */
package com.fincity.sass.worker.jooq.tables;


import com.fincity.sass.worker.jooq.Indexes;
import com.fincity.sass.worker.jooq.Keys;
import com.fincity.sass.worker.jooq.Worker;
import com.fincity.sass.worker.jooq.enums.WorkerTaskJobType;
import com.fincity.sass.worker.jooq.enums.WorkerTaskLastFireStatus;
import com.fincity.sass.worker.jooq.enums.WorkerTaskState;
import com.fincity.sass.worker.jooq.tables.WorkerScheduler.WorkerSchedulerPath;
import com.fincity.sass.worker.jooq.tables.records.WorkerTaskRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class WorkerTask extends TableImpl<WorkerTaskRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>worker.worker_task</code>
     */
    public static final WorkerTask WORKER_TASK = new WorkerTask();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkerTaskRecord> getRecordType() {
        return WorkerTaskRecord.class;
    }

    /**
     * The column <code>worker.worker_task.ID</code>. Primary key, unique
     * identifier for each Task
     */
    public final TableField<WorkerTaskRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key, unique identifier for each Task");

    /**
     * The column <code>worker.worker_task.NAME</code>. name of job
     */
    public final TableField<WorkerTaskRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "name of job");

    /**
     * The column <code>worker.worker_task.CLIENT_ID</code>. Identifier for the
     * client to which this job belongs. References security_client table
     */
    public final TableField<WorkerTaskRecord, ULong> CLIENT_ID = createField(DSL.name("CLIENT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Identifier for the client to which this job belongs. References security_client table");

    /**
     * The column <code>worker.worker_task.APP_ID</code>. Identifier for the
     * application to which this job belongs. References security_app table
     */
    public final TableField<WorkerTaskRecord, ULong> APP_ID = createField(DSL.name("APP_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Identifier for the application to which this job belongs. References security_app table");

    /**
     * The column <code>worker.worker_task.SCHEDULER_ID</code>. Identifier for
     * the scheduler to which this job belongs. References worker_scheduler
     * table
     */
    public final TableField<WorkerTaskRecord, ULong> SCHEDULER_ID = createField(DSL.name("SCHEDULER_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Identifier for the scheduler to which this job belongs. References worker_scheduler table");

    /**
     * The column <code>worker.worker_task.GROUP_NAME</code>. job group name
     */
    public final TableField<WorkerTaskRecord, String> GROUP_NAME = createField(DSL.name("GROUP_NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "job group name");

    /**
     * The column <code>worker.worker_task.DESCRIPTION</code>. description about
     * the job
     */
    public final TableField<WorkerTaskRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.VARCHAR(255), this, "description about the job");

    /**
     * The column <code>worker.worker_task.STATE</code>. task triggering state
     */
    public final TableField<WorkerTaskRecord, WorkerTaskState> STATE = createField(DSL.name("STATE"), SQLDataType.VARCHAR(8).nullable(false).defaultValue(DSL.inline("NORMAL", SQLDataType.VARCHAR)).asEnumDataType(WorkerTaskState.class), this, "task triggering state");

    /**
     * The column <code>worker.worker_task.JOB_TYPE</code>. job type
     */
    public final TableField<WorkerTaskRecord, WorkerTaskJobType> JOB_TYPE = createField(DSL.name("JOB_TYPE"), SQLDataType.VARCHAR(6).nullable(false).defaultValue(DSL.inline("SIMPLE", SQLDataType.VARCHAR)).asEnumDataType(WorkerTaskJobType.class), this, "job type");

    /**
     * The column <code>worker.worker_task.JOB_DATA</code>. job data
     */
    public final TableField<WorkerTaskRecord, JSON> JOB_DATA = createField(DSL.name("JOB_DATA"), SQLDataType.JSON, this, "job data");

    /**
     * The column <code>worker.worker_task.DURABLE</code>. if we want to keep
     * job even if it does not have any trigger
     */
    public final TableField<WorkerTaskRecord, Byte> DURABLE = createField(DSL.name("DURABLE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "if we want to keep job even if it does not have any trigger");

    /**
     * The column <code>worker.worker_task.START_TIME</code>. task start
     * datetime
     */
    public final TableField<WorkerTaskRecord, LocalDateTime> START_TIME = createField(DSL.name("START_TIME"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "task start datetime");

    /**
     * The column <code>worker.worker_task.END_TIME</code>. task end datetime
     */
    public final TableField<WorkerTaskRecord, LocalDateTime> END_TIME = createField(DSL.name("END_TIME"), SQLDataType.LOCALDATETIME(0), this, "task end datetime");

    /**
     * The column <code>worker.worker_task.SCHEDULE</code>. job schedule
     * expression for simple/cron job
     */
    public final TableField<WorkerTaskRecord, String> SCHEDULE = createField(DSL.name("SCHEDULE"), SQLDataType.VARCHAR(255).nullable(false), this, "job schedule expression for simple/cron job");

    /**
     * The column <code>worker.worker_task.REPEAT_INTERVAL</code>. total times
     * this job will repeat, only applicable for simple jobs
     */
    public final TableField<WorkerTaskRecord, Integer> REPEAT_INTERVAL = createField(DSL.name("REPEAT_INTERVAL"), SQLDataType.INTEGER, this, "total times this job will repeat, only applicable for simple jobs");

    /**
     * The column <code>worker.worker_task.RECOVERABLE</code>. re-run the job if
     * the scheduler crashed before finishing
     */
    public final TableField<WorkerTaskRecord, Byte> RECOVERABLE = createField(DSL.name("RECOVERABLE"), SQLDataType.TINYINT.defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "re-run the job if the scheduler crashed before finishing");

    /**
     * The column <code>worker.worker_task.NEXT_FIRE_TIME</code>. upcoming
     * execution at
     */
    public final TableField<WorkerTaskRecord, LocalDateTime> NEXT_FIRE_TIME = createField(DSL.name("NEXT_FIRE_TIME"), SQLDataType.LOCALDATETIME(0), this, "upcoming execution at");

    /**
     * The column <code>worker.worker_task.LAST_FIRE_TIME</code>. last execution
     * at
     */
    public final TableField<WorkerTaskRecord, LocalDateTime> LAST_FIRE_TIME = createField(DSL.name("LAST_FIRE_TIME"), SQLDataType.LOCALDATETIME(0), this, "last execution at");

    /**
     * The column <code>worker.worker_task.LAST_FIRE_STATUS</code>. last task
     * execution status
     */
    public final TableField<WorkerTaskRecord, WorkerTaskLastFireStatus> LAST_FIRE_STATUS = createField(DSL.name("LAST_FIRE_STATUS"), SQLDataType.VARCHAR(7).asEnumDataType(WorkerTaskLastFireStatus.class), this, "last task execution status");

    /**
     * The column <code>worker.worker_task.LAST_FIRE_RESULT</code>. last
     * execution log
     */
    public final TableField<WorkerTaskRecord, String> LAST_FIRE_RESULT = createField(DSL.name("LAST_FIRE_RESULT"), SQLDataType.CLOB, this, "last execution log");

    /**
     * The column <code>worker.worker_task.CREATED_BY</code>. ID of the user who
     * created this row
     */
    public final TableField<WorkerTaskRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row");

    /**
     * The column <code>worker.worker_task.CREATED_AT</code>. Time when this row
     * is created
     */
    public final TableField<WorkerTaskRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created");

    /**
     * The column <code>worker.worker_task.UPDATED_BY</code>. ID of the user who
     * last updated this row
     */
    public final TableField<WorkerTaskRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who last updated this row");

    /**
     * The column <code>worker.worker_task.UPDATED_AT</code>. Time when this row
     * is last updated
     */
    public final TableField<WorkerTaskRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is last updated");

    private WorkerTask(Name alias, Table<WorkerTaskRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private WorkerTask(Name alias, Table<WorkerTaskRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>worker.worker_task</code> table reference
     */
    public WorkerTask(String alias) {
        this(DSL.name(alias), WORKER_TASK);
    }

    /**
     * Create an aliased <code>worker.worker_task</code> table reference
     */
    public WorkerTask(Name alias) {
        this(alias, WORKER_TASK);
    }

    /**
     * Create a <code>worker.worker_task</code> table reference
     */
    public WorkerTask() {
        this(DSL.name("worker_task"), null);
    }

    public <O extends Record> WorkerTask(Table<O> path, ForeignKey<O, WorkerTaskRecord> childPath, InverseForeignKey<O, WorkerTaskRecord> parentPath) {
        super(path, childPath, parentPath, WORKER_TASK);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class WorkerTaskPath extends WorkerTask implements Path<WorkerTaskRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> WorkerTaskPath(Table<O> path, ForeignKey<O, WorkerTaskRecord> childPath, InverseForeignKey<O, WorkerTaskRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private WorkerTaskPath(Name alias, Table<WorkerTaskRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public WorkerTaskPath as(String alias) {
            return new WorkerTaskPath(DSL.name(alias), this);
        }

        @Override
        public WorkerTaskPath as(Name alias) {
            return new WorkerTaskPath(alias, this);
        }

        @Override
        public WorkerTaskPath as(Table<?> alias) {
            return new WorkerTaskPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Worker.WORKER;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.WORKER_TASK_IDX_WORKER_TASK_NAME);
    }

    @Override
    public Identity<WorkerTaskRecord, ULong> getIdentity() {
        return (Identity<WorkerTaskRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<WorkerTaskRecord> getPrimaryKey() {
        return Keys.KEY_WORKER_TASK_PRIMARY;
    }

    @Override
    public List<UniqueKey<WorkerTaskRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_WORKER_TASK_UNQ_WORKER_TASK_NAME_GROUP);
    }

    @Override
    public List<ForeignKey<WorkerTaskRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_WORKER_TASK_SCHEDULER);
    }

    private transient WorkerSchedulerPath _workerScheduler;

    /**
     * Get the implicit join path to the <code>worker.worker_scheduler</code>
     * table.
     */
    public WorkerSchedulerPath workerScheduler() {
        if (_workerScheduler == null)
            _workerScheduler = new WorkerSchedulerPath(this, Keys.FK_WORKER_TASK_SCHEDULER, null);

        return _workerScheduler;
    }

    @Override
    public WorkerTask as(String alias) {
        return new WorkerTask(DSL.name(alias), this);
    }

    @Override
    public WorkerTask as(Name alias) {
        return new WorkerTask(alias, this);
    }

    @Override
    public WorkerTask as(Table<?> alias) {
        return new WorkerTask(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkerTask rename(String name) {
        return new WorkerTask(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkerTask rename(Name name) {
        return new WorkerTask(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkerTask rename(Table<?> name) {
        return new WorkerTask(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WorkerTask where(Condition condition) {
        return new WorkerTask(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WorkerTask where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WorkerTask where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WorkerTask where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public WorkerTask where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public WorkerTask where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public WorkerTask where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public WorkerTask where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WorkerTask whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WorkerTask whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
