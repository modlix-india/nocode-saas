/*
 * This file is generated by jOOQ.
 */
package com.fincity.sass.worker.jooq.tables;


import com.fincity.sass.worker.jooq.Indexes;
import com.fincity.sass.worker.jooq.Keys;
import com.fincity.sass.worker.jooq.Worker;
import com.fincity.sass.worker.jooq.enums.WorkerTaskStatus;
import com.fincity.sass.worker.jooq.tables.records.WorkerTaskRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class WorkerTask extends TableImpl<WorkerTaskRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>worker.worker_task</code>
     */
    public static final WorkerTask WORKER_TASK = new WorkerTask();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkerTaskRecord> getRecordType() {
        return WorkerTaskRecord.class;
    }

    /**
     * The column <code>worker.worker_task.id</code>. Primary key, unique
     * identifier for each Task
     */
    public final TableField<WorkerTaskRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key, unique identifier for each Task");

    /**
     * The column <code>worker.worker_task.job_name</code>. name of job
     */
    public final TableField<WorkerTaskRecord, String> JOB_NAME = createField(DSL.name("job_name"), SQLDataType.VARCHAR(255).nullable(false), this, "name of job");

    /**
     * The column <code>worker.worker_task.cron_expression</code>. job schedule
     * expression
     */
    public final TableField<WorkerTaskRecord, String> CRON_EXPRESSION = createField(DSL.name("cron_expression"), SQLDataType.VARCHAR(100).nullable(false), this, "job schedule expression");

    /**
     * The column <code>worker.worker_task.next_execution_time</code>. upcoming
     * execution at
     */
    public final TableField<WorkerTaskRecord, LocalDateTime> NEXT_EXECUTION_TIME = createField(DSL.name("next_execution_time"), SQLDataType.LOCALDATETIME(0), this, "upcoming execution at");

    /**
     * The column <code>worker.worker_task.last_execution_time</code>. last
     * execution at
     */
    public final TableField<WorkerTaskRecord, LocalDateTime> LAST_EXECUTION_TIME = createField(DSL.name("last_execution_time"), SQLDataType.LOCALDATETIME(0), this, "last execution at");

    /**
     * The column <code>worker.worker_task.status</code>. JOB Status
     */
    public final TableField<WorkerTaskRecord, WorkerTaskStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(8).nullable(false).asEnumDataType(WorkerTaskStatus.class), this, "JOB Status");

    /**
     * The column <code>worker.worker_task.last_execution_result</code>.
     */
    public final TableField<WorkerTaskRecord, String> LAST_EXECUTION_RESULT = createField(DSL.name("last_execution_result"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>worker.worker_task.CREATED_BY</code>. ID of the user who
     * created this row
     */
    public final TableField<WorkerTaskRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row");

    /**
     * The column <code>worker.worker_task.CREATED_AT</code>. Time when this row
     * is created
     */
    public final TableField<WorkerTaskRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created");

    /**
     * The column <code>worker.worker_task.UPDATED_BY</code>. ID of the user who
     * last updated this row
     */
    public final TableField<WorkerTaskRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who last updated this row");

    /**
     * The column <code>worker.worker_task.UPDATED_AT</code>. Time when this row
     * is last updated
     */
    public final TableField<WorkerTaskRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is last updated");

    private WorkerTask(Name alias, Table<WorkerTaskRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private WorkerTask(Name alias, Table<WorkerTaskRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>worker.worker_task</code> table reference
     */
    public WorkerTask(String alias) {
        this(DSL.name(alias), WORKER_TASK);
    }

    /**
     * Create an aliased <code>worker.worker_task</code> table reference
     */
    public WorkerTask(Name alias) {
        this(alias, WORKER_TASK);
    }

    /**
     * Create a <code>worker.worker_task</code> table reference
     */
    public WorkerTask() {
        this(DSL.name("worker_task"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Worker.WORKER;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.WORKER_TASK_IDX_SCHEDULED_TASKS_JOB_NAME, Indexes.WORKER_TASK_IDX_SCHEDULED_TASKS_STATUS);
    }

    @Override
    public Identity<WorkerTaskRecord, ULong> getIdentity() {
        return (Identity<WorkerTaskRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<WorkerTaskRecord> getPrimaryKey() {
        return Keys.KEY_WORKER_TASK_PRIMARY;
    }

    @Override
    public WorkerTask as(String alias) {
        return new WorkerTask(DSL.name(alias), this);
    }

    @Override
    public WorkerTask as(Name alias) {
        return new WorkerTask(alias, this);
    }

    @Override
    public WorkerTask as(Table<?> alias) {
        return new WorkerTask(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkerTask rename(String name) {
        return new WorkerTask(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkerTask rename(Name name) {
        return new WorkerTask(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkerTask rename(Table<?> name) {
        return new WorkerTask(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WorkerTask where(Condition condition) {
        return new WorkerTask(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WorkerTask where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WorkerTask where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WorkerTask where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public WorkerTask where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public WorkerTask where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public WorkerTask where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public WorkerTask where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WorkerTask whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WorkerTask whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
