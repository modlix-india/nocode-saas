/*
 * This file is generated by jOOQ.
 */
package com.fincity.sass.worker.jooq.tables.records;


import com.fincity.sass.worker.jooq.enums.WorkerTaskStatus;
import com.fincity.sass.worker.jooq.tables.WorkerTask;

import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class WorkerTaskRecord extends UpdatableRecordImpl<WorkerTaskRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>worker.worker_task.id</code>. Primary key, unique
     * identifier for each Task
     */
    public WorkerTaskRecord setId(ULong value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>worker.worker_task.id</code>. Primary key, unique
     * identifier for each Task
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>worker.worker_task.job_name</code>. name of job
     */
    public WorkerTaskRecord setJobName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>worker.worker_task.job_name</code>. name of job
     */
    public String getJobName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>worker.worker_task.cron_expression</code>. job schedule
     * expression
     */
    public WorkerTaskRecord setCronExpression(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>worker.worker_task.cron_expression</code>. job schedule
     * expression
     */
    public String getCronExpression() {
        return (String) get(2);
    }

    /**
     * Setter for <code>worker.worker_task.next_execution_time</code>. upcoming
     * execution at
     */
    public WorkerTaskRecord setNextExecutionTime(LocalDateTime value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>worker.worker_task.next_execution_time</code>. upcoming
     * execution at
     */
    public LocalDateTime getNextExecutionTime() {
        return (LocalDateTime) get(3);
    }

    /**
     * Setter for <code>worker.worker_task.last_execution_time</code>. last
     * execution at
     */
    public WorkerTaskRecord setLastExecutionTime(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>worker.worker_task.last_execution_time</code>. last
     * execution at
     */
    public LocalDateTime getLastExecutionTime() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>worker.worker_task.status</code>. JOB Status
     */
    public WorkerTaskRecord setStatus(WorkerTaskStatus value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>worker.worker_task.status</code>. JOB Status
     */
    public WorkerTaskStatus getStatus() {
        return (WorkerTaskStatus) get(5);
    }

    /**
     * Setter for <code>worker.worker_task.last_execution_result</code>.
     */
    public WorkerTaskRecord setLastExecutionResult(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>worker.worker_task.last_execution_result</code>.
     */
    public String getLastExecutionResult() {
        return (String) get(6);
    }

    /**
     * Setter for <code>worker.worker_task.created_at</code>.
     */
    public WorkerTaskRecord setCreatedAt(LocalDateTime value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>worker.worker_task.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(7);
    }

    /**
     * Setter for <code>worker.worker_task.updated_at</code>.
     */
    public WorkerTaskRecord setUpdatedAt(LocalDateTime value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>worker.worker_task.updated_at</code>.
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(8);
    }

    /**
     * Setter for <code>worker.worker_task.created_by</code>.
     */
    public WorkerTaskRecord setCreatedBy(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>worker.worker_task.created_by</code>.
     */
    public String getCreatedBy() {
        return (String) get(9);
    }

    /**
     * Setter for <code>worker.worker_task.updated_by</code>.
     */
    public WorkerTaskRecord setUpdatedBy(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>worker.worker_task.updated_by</code>.
     */
    public String getUpdatedBy() {
        return (String) get(10);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached WorkerTaskRecord
     */
    public WorkerTaskRecord() {
        super(WorkerTask.WORKER_TASK);
    }

    /**
     * Create a detached, initialised WorkerTaskRecord
     */
    public WorkerTaskRecord(ULong id, String jobName, String cronExpression, LocalDateTime nextExecutionTime, LocalDateTime lastExecutionTime, WorkerTaskStatus status, String lastExecutionResult, LocalDateTime createdAt, LocalDateTime updatedAt, String createdBy, String updatedBy) {
        super(WorkerTask.WORKER_TASK);

        setId(id);
        setJobName(jobName);
        setCronExpression(cronExpression);
        setNextExecutionTime(nextExecutionTime);
        setLastExecutionTime(lastExecutionTime);
        setStatus(status);
        setLastExecutionResult(lastExecutionResult);
        setCreatedAt(createdAt);
        setUpdatedAt(updatedAt);
        setCreatedBy(createdBy);
        setUpdatedBy(updatedBy);
        resetChangedOnNotNull();
    }
}
