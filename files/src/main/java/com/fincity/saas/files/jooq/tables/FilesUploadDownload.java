/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.files.jooq.tables;


import com.fincity.saas.files.jooq.Files;
import com.fincity.saas.files.jooq.Keys;
import com.fincity.saas.files.jooq.enums.FilesUploadDownloadResourceType;
import com.fincity.saas.files.jooq.enums.FilesUploadDownloadStatus;
import com.fincity.saas.files.jooq.enums.FilesUploadDownloadType;
import com.fincity.saas.files.jooq.tables.records.FilesUploadDownloadRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class FilesUploadDownload extends TableImpl<FilesUploadDownloadRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>files.files_upload_download</code>
     */
    public static final FilesUploadDownload FILES_UPLOAD_DOWNLOAD = new FilesUploadDownload();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FilesUploadDownloadRecord> getRecordType() {
        return FilesUploadDownloadRecord.class;
    }

    /**
     * The column <code>files.files_upload_download.ID</code>. Primary key
     */
    public final TableField<FilesUploadDownloadRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>files.files_upload_download.TYPE</code>. Type of the ZIP
     */
    public final TableField<FilesUploadDownloadRecord, FilesUploadDownloadType> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(8).nullable(false).asEnumDataType(FilesUploadDownloadType.class), this, "Type of the ZIP");

    /**
     * The column <code>files.files_upload_download.RESOURCE_TYPE</code>.
     * Resource type
     */
    public final TableField<FilesUploadDownloadRecord, FilesUploadDownloadResourceType> RESOURCE_TYPE = createField(DSL.name("RESOURCE_TYPE"), SQLDataType.VARCHAR(7).nullable(false).asEnumDataType(FilesUploadDownloadResourceType.class), this, "Resource type");

    /**
     * The column <code>files.files_upload_download.CLIENT_CODE</code>. Client
     * Code to whom the folder belongs to
     */
    public final TableField<FilesUploadDownloadRecord, String> CLIENT_CODE = createField(DSL.name("CLIENT_CODE"), SQLDataType.CHAR(8).nullable(false), this, "Client Code to whom the folder belongs to");

    /**
     * The column <code>files.files_upload_download.PATH</code>. Path of the
     * folder
     */
    public final TableField<FilesUploadDownloadRecord, String> PATH = createField(DSL.name("PATH"), SQLDataType.VARCHAR(1024).nullable(false), this, "Path of the folder");

    /**
     * The column <code>files.files_upload_download.CDN_URL</code>. URL in the
     * CDN
     */
    public final TableField<FilesUploadDownloadRecord, String> CDN_URL = createField(DSL.name("CDN_URL"), SQLDataType.VARCHAR(1024), this, "URL in the CDN");

    /**
     * The column <code>files.files_upload_download.STATUS</code>. Status of the
     * process
     */
    public final TableField<FilesUploadDownloadRecord, FilesUploadDownloadStatus> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(7).nullable(false).defaultValue(DSL.inline("PENDING", SQLDataType.VARCHAR)).asEnumDataType(FilesUploadDownloadStatus.class), this, "Status of the process");

    /**
     * The column <code>files.files_upload_download.EXCEPTION</code>. Exception
     * message if any
     */
    public final TableField<FilesUploadDownloadRecord, String> EXCEPTION = createField(DSL.name("EXCEPTION"), SQLDataType.CLOB, this, "Exception message if any");

    /**
     * The column <code>files.files_upload_download.CREATED_BY</code>. ID of the
     * user who created this row
     */
    public final TableField<FilesUploadDownloadRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row");

    /**
     * The column <code>files.files_upload_download.CREATED_AT</code>. Time when
     * this row is created
     */
    public final TableField<FilesUploadDownloadRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created");

    /**
     * The column <code>files.files_upload_download.UPDATED_BY</code>. ID of the
     * user who updated this row
     */
    public final TableField<FilesUploadDownloadRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row");

    /**
     * The column <code>files.files_upload_download.UPDATED_AT</code>. Time when
     * this row is updated
     */
    public final TableField<FilesUploadDownloadRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated");

    private FilesUploadDownload(Name alias, Table<FilesUploadDownloadRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private FilesUploadDownload(Name alias, Table<FilesUploadDownloadRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>files.files_upload_download</code> table
     * reference
     */
    public FilesUploadDownload(String alias) {
        this(DSL.name(alias), FILES_UPLOAD_DOWNLOAD);
    }

    /**
     * Create an aliased <code>files.files_upload_download</code> table
     * reference
     */
    public FilesUploadDownload(Name alias) {
        this(alias, FILES_UPLOAD_DOWNLOAD);
    }

    /**
     * Create a <code>files.files_upload_download</code> table reference
     */
    public FilesUploadDownload() {
        this(DSL.name("files_upload_download"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Files.FILES;
    }

    @Override
    public Identity<FilesUploadDownloadRecord, ULong> getIdentity() {
        return (Identity<FilesUploadDownloadRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<FilesUploadDownloadRecord> getPrimaryKey() {
        return Keys.KEY_FILES_UPLOAD_DOWNLOAD_PRIMARY;
    }

    @Override
    public FilesUploadDownload as(String alias) {
        return new FilesUploadDownload(DSL.name(alias), this);
    }

    @Override
    public FilesUploadDownload as(Name alias) {
        return new FilesUploadDownload(alias, this);
    }

    @Override
    public FilesUploadDownload as(Table<?> alias) {
        return new FilesUploadDownload(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FilesUploadDownload rename(String name) {
        return new FilesUploadDownload(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FilesUploadDownload rename(Name name) {
        return new FilesUploadDownload(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FilesUploadDownload rename(Table<?> name) {
        return new FilesUploadDownload(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FilesUploadDownload where(Condition condition) {
        return new FilesUploadDownload(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FilesUploadDownload where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FilesUploadDownload where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FilesUploadDownload where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FilesUploadDownload where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FilesUploadDownload where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FilesUploadDownload where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FilesUploadDownload where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FilesUploadDownload whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FilesUploadDownload whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
