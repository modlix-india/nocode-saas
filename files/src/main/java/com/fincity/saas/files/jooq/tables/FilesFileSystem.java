/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.files.jooq.tables;


import com.fincity.saas.files.jooq.Files;
import com.fincity.saas.files.jooq.Indexes;
import com.fincity.saas.files.jooq.Keys;
import com.fincity.saas.files.jooq.enums.FilesFileSystemFileType;
import com.fincity.saas.files.jooq.enums.FilesFileSystemType;
import com.fincity.saas.files.jooq.tables.FilesFileSystem.FilesFileSystemPath;
import com.fincity.saas.files.jooq.tables.records.FilesFileSystemRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class FilesFileSystem extends TableImpl<FilesFileSystemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>files.files_file_system</code>
     */
    public static final FilesFileSystem FILES_FILE_SYSTEM = new FilesFileSystem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FilesFileSystemRecord> getRecordType() {
        return FilesFileSystemRecord.class;
    }

    /**
     * The column <code>files.files_file_system.ID</code>. Primary key
     */
    public final TableField<FilesFileSystemRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>files.files_file_system.TYPE</code>. Type of the file
     * system
     */
    public final TableField<FilesFileSystemRecord, FilesFileSystemType> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(7).nullable(false).defaultValue(DSL.inline("STATIC", SQLDataType.VARCHAR)).asEnumDataType(FilesFileSystemType.class), this, "Type of the file system");

    /**
     * The column <code>files.files_file_system.CODE</code>. Client code
     */
    public final TableField<FilesFileSystemRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.CHAR(8).nullable(false), this, "Client code");

    /**
     * The column <code>files.files_file_system.NAME</code>. Name of the file
     */
    public final TableField<FilesFileSystemRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(512).nullable(false), this, "Name of the file");

    /**
     * The column <code>files.files_file_system.FILE_TYPE</code>. Type of the
     * file
     */
    public final TableField<FilesFileSystemRecord, FilesFileSystemFileType> FILE_TYPE = createField(DSL.name("FILE_TYPE"), SQLDataType.VARCHAR(9).nullable(false).defaultValue(DSL.inline("FILE", SQLDataType.VARCHAR)).asEnumDataType(FilesFileSystemFileType.class), this, "Type of the file");

    /**
     * The column <code>files.files_file_system.SIZE</code>. Size of the file
     */
    public final TableField<FilesFileSystemRecord, ULong> SIZE = createField(DSL.name("SIZE"), SQLDataType.BIGINTUNSIGNED, this, "Size of the file");

    /**
     * The column <code>files.files_file_system.PARENT_ID</code>. Parent ID of
     * the file
     */
    public final TableField<FilesFileSystemRecord, ULong> PARENT_ID = createField(DSL.name("PARENT_ID"), SQLDataType.BIGINTUNSIGNED, this, "Parent ID of the file");

    /**
     * The column <code>files.files_file_system.CREATED_BY</code>. ID of the
     * user who created this row
     */
    public final TableField<FilesFileSystemRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row");

    /**
     * The column <code>files.files_file_system.CREATED_AT</code>. Time when
     * this row is created
     */
    public final TableField<FilesFileSystemRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created");

    /**
     * The column <code>files.files_file_system.UPDATED_BY</code>. ID of the
     * user who updated this row
     */
    public final TableField<FilesFileSystemRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row");

    /**
     * The column <code>files.files_file_system.UPDATED_AT</code>. Time when
     * this row is updated
     */
    public final TableField<FilesFileSystemRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated");

    private FilesFileSystem(Name alias, Table<FilesFileSystemRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private FilesFileSystem(Name alias, Table<FilesFileSystemRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>files.files_file_system</code> table reference
     */
    public FilesFileSystem(String alias) {
        this(DSL.name(alias), FILES_FILE_SYSTEM);
    }

    /**
     * Create an aliased <code>files.files_file_system</code> table reference
     */
    public FilesFileSystem(Name alias) {
        this(alias, FILES_FILE_SYSTEM);
    }

    /**
     * Create a <code>files.files_file_system</code> table reference
     */
    public FilesFileSystem() {
        this(DSL.name("files_file_system"), null);
    }

    public <O extends Record> FilesFileSystem(Table<O> path, ForeignKey<O, FilesFileSystemRecord> childPath, InverseForeignKey<O, FilesFileSystemRecord> parentPath) {
        super(path, childPath, parentPath, FILES_FILE_SYSTEM);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class FilesFileSystemPath extends FilesFileSystem implements Path<FilesFileSystemRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> FilesFileSystemPath(Table<O> path, ForeignKey<O, FilesFileSystemRecord> childPath, InverseForeignKey<O, FilesFileSystemRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private FilesFileSystemPath(Name alias, Table<FilesFileSystemRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public FilesFileSystemPath as(String alias) {
            return new FilesFileSystemPath(DSL.name(alias), this);
        }

        @Override
        public FilesFileSystemPath as(Name alias) {
            return new FilesFileSystemPath(alias, this);
        }

        @Override
        public FilesFileSystemPath as(Table<?> alias) {
            return new FilesFileSystemPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Files.FILES;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.FILES_FILE_SYSTEM_KEY_FILE_SYSTEM_CODE_NAME, Indexes.FILES_FILE_SYSTEM_KEY_FILE_SYSTEM_CODE_TYPE_FILE_TYPE, Indexes.FILES_FILE_SYSTEM_KEY_FILE_SYSTEM_TYPE_FILE_TYPE_PARENT_ID, Indexes.FILES_FILE_SYSTEM_PARENT_ID);
    }

    @Override
    public Identity<FilesFileSystemRecord, ULong> getIdentity() {
        return (Identity<FilesFileSystemRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<FilesFileSystemRecord> getPrimaryKey() {
        return Keys.KEY_FILES_FILE_SYSTEM_PRIMARY;
    }

    @Override
    public List<ForeignKey<FilesFileSystemRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FILES_FILE_SYSTEM_IBFK_1);
    }

    private transient FilesFileSystemPath _filesFileSystem;

    /**
     * Get the implicit join path to the <code>files.files_file_system</code>
     * table.
     */
    public FilesFileSystemPath filesFileSystem() {
        if (_filesFileSystem == null)
            _filesFileSystem = new FilesFileSystemPath(this, Keys.FILES_FILE_SYSTEM_IBFK_1, null);

        return _filesFileSystem;
    }

    @Override
    public FilesFileSystem as(String alias) {
        return new FilesFileSystem(DSL.name(alias), this);
    }

    @Override
    public FilesFileSystem as(Name alias) {
        return new FilesFileSystem(alias, this);
    }

    @Override
    public FilesFileSystem as(Table<?> alias) {
        return new FilesFileSystem(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FilesFileSystem rename(String name) {
        return new FilesFileSystem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FilesFileSystem rename(Name name) {
        return new FilesFileSystem(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FilesFileSystem rename(Table<?> name) {
        return new FilesFileSystem(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FilesFileSystem where(Condition condition) {
        return new FilesFileSystem(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FilesFileSystem where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FilesFileSystem where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FilesFileSystem where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FilesFileSystem where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FilesFileSystem where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FilesFileSystem where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FilesFileSystem where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FilesFileSystem whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FilesFileSystem whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
