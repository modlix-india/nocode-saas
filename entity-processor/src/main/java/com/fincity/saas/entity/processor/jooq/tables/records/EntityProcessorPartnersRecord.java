/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.entity.processor.jooq.tables.records;


import com.fincity.saas.entity.processor.enums.PartnerVerificationStatus;
import com.fincity.saas.entity.processor.jooq.tables.EntityProcessorPartners;

import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EntityProcessorPartnersRecord extends UpdatableRecordImpl<EntityProcessorPartnersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>entity_processor.entity_processor_partners.ID</code>.
     * Primary key.
     */
    public EntityProcessorPartnersRecord setId(ULong value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>entity_processor.entity_processor_partners.ID</code>.
     * Primary key.
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_partners.APP_CODE</code>. App
     * Code on which this Partner was created.
     */
    public EntityProcessorPartnersRecord setAppCode(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_partners.APP_CODE</code>. App
     * Code on which this Partner was created.
     */
    public String getAppCode() {
        return (String) get(1);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_partners.CLIENT_CODE</code>.
     * Client Code who added this partner.
     */
    public EntityProcessorPartnersRecord setClientCode(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_partners.CLIENT_CODE</code>.
     * Client Code who added this partner.
     */
    public String getClientCode() {
        return (String) get(2);
    }

    /**
     * Setter for <code>entity_processor.entity_processor_partners.CODE</code>.
     * Unique Code to identify this row.
     */
    public EntityProcessorPartnersRecord setCode(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>entity_processor.entity_processor_partners.CODE</code>.
     * Unique Code to identify this row.
     */
    public String getCode() {
        return (String) get(3);
    }

    /**
     * Setter for <code>entity_processor.entity_processor_partners.NAME</code>.
     * Name of the Partner.
     */
    public EntityProcessorPartnersRecord setName(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>entity_processor.entity_processor_partners.NAME</code>.
     * Name of the Partner.
     */
    public String getName() {
        return (String) get(4);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_partners.DESCRIPTION</code>.
     * Description for the Partner.
     */
    public EntityProcessorPartnersRecord setDescription(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_partners.DESCRIPTION</code>.
     * Description for the Partner.
     */
    public String getDescription() {
        return (String) get(5);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_partners.CLIENT_ID</code>.
     * Partner client Id.
     */
    public EntityProcessorPartnersRecord setClientId(ULong value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_partners.CLIENT_ID</code>.
     * Partner client Id.
     */
    public ULong getClientId() {
        return (ULong) get(6);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_partners.MANAGER_ID</code>.
     * Partner manager user Id.
     */
    public EntityProcessorPartnersRecord setManagerId(ULong value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_partners.MANAGER_ID</code>.
     * Partner manager user Id.
     */
    public ULong getManagerId() {
        return (ULong) get(7);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_partners.PARTNER_VERIFICATION_STATUS</code>.
     * Partner verification status.
     */
    public EntityProcessorPartnersRecord setPartnerVerificationStatus(PartnerVerificationStatus value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_partners.PARTNER_VERIFICATION_STATUS</code>.
     * Partner verification status.
     */
    public PartnerVerificationStatus getPartnerVerificationStatus() {
        return (PartnerVerificationStatus) get(8);
    }

    /**
     * Setter for <code>entity_processor.entity_processor_partners.DNC</code>.
     * Do Not Call flag for this partner.
     */
    public EntityProcessorPartnersRecord setDnc(Boolean value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>entity_processor.entity_processor_partners.DNC</code>.
     * Do Not Call flag for this partner.
     */
    public Boolean getDnc() {
        return (Boolean) get(9);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_partners.TEMP_ACTIVE</code>.
     * Temporary active flag for this partner.
     */
    public EntityProcessorPartnersRecord setTempActive(Boolean value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_partners.TEMP_ACTIVE</code>.
     * Temporary active flag for this partner.
     */
    public Boolean getTempActive() {
        return (Boolean) get(10);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_partners.IS_ACTIVE</code>. Flag
     * to check if this partner is active or not.
     */
    public EntityProcessorPartnersRecord setIsActive(Boolean value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_partners.IS_ACTIVE</code>. Flag
     * to check if this partner is active or not.
     */
    public Boolean getIsActive() {
        return (Boolean) get(11);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_partners.CREATED_BY</code>. ID of
     * the user who created this row.
     */
    public EntityProcessorPartnersRecord setCreatedBy(ULong value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_partners.CREATED_BY</code>. ID of
     * the user who created this row.
     */
    public ULong getCreatedBy() {
        return (ULong) get(12);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_partners.CREATED_AT</code>. Time
     * when this row is created.
     */
    public EntityProcessorPartnersRecord setCreatedAt(LocalDateTime value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_partners.CREATED_AT</code>. Time
     * when this row is created.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(13);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_partners.UPDATED_BY</code>. ID of
     * the user who updated this row.
     */
    public EntityProcessorPartnersRecord setUpdatedBy(ULong value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_partners.UPDATED_BY</code>. ID of
     * the user who updated this row.
     */
    public ULong getUpdatedBy() {
        return (ULong) get(14);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_partners.UPDATED_AT</code>. Time
     * when this row is updated.
     */
    public EntityProcessorPartnersRecord setUpdatedAt(LocalDateTime value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_partners.UPDATED_AT</code>. Time
     * when this row is updated.
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(15);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached EntityProcessorPartnersRecord
     */
    public EntityProcessorPartnersRecord() {
        super(EntityProcessorPartners.ENTITY_PROCESSOR_PARTNERS);
    }

    /**
     * Create a detached, initialised EntityProcessorPartnersRecord
     */
    public EntityProcessorPartnersRecord(ULong id, String appCode, String clientCode, String code, String name, String description, ULong clientId, ULong managerId, PartnerVerificationStatus partnerVerificationStatus, Boolean dnc, Boolean tempActive, Boolean isActive, ULong createdBy, LocalDateTime createdAt, ULong updatedBy, LocalDateTime updatedAt) {
        super(EntityProcessorPartners.ENTITY_PROCESSOR_PARTNERS);

        setId(id);
        setAppCode(appCode);
        setClientCode(clientCode);
        setCode(code);
        setName(name);
        setDescription(description);
        setClientId(clientId);
        setManagerId(managerId);
        setPartnerVerificationStatus(partnerVerificationStatus);
        setDnc(dnc);
        setTempActive(tempActive);
        setIsActive(isActive);
        setCreatedBy(createdBy);
        setCreatedAt(createdAt);
        setUpdatedBy(updatedBy);
        setUpdatedAt(updatedAt);
        resetChangedOnNotNull();
    }
}
