/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.entity.processor.jooq.tables.records;


import com.fincity.saas.entity.processor.enums.ActivityAction;
import com.fincity.saas.entity.processor.enums.EntitySeries;
import com.fincity.saas.entity.processor.jooq.tables.EntityProcessorActivities;

import java.time.LocalDateTime;
import java.util.Map;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EntityProcessorActivitiesRecord extends UpdatableRecordImpl<EntityProcessorActivitiesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>entity_processor.entity_processor_activities.ID</code>.
     * Primary key.
     */
    public EntityProcessorActivitiesRecord setId(ULong value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>entity_processor.entity_processor_activities.ID</code>.
     * Primary key.
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_activities.APP_CODE</code>. App
     * Code on which this Activity was created.
     */
    public EntityProcessorActivitiesRecord setAppCode(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_activities.APP_CODE</code>. App
     * Code on which this Activity was created.
     */
    public String getAppCode() {
        return (String) get(1);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_activities.CLIENT_CODE</code>.
     * Client Code who created this Activity.
     */
    public EntityProcessorActivitiesRecord setClientCode(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_activities.CLIENT_CODE</code>.
     * Client Code who created this Activity.
     */
    public String getClientCode() {
        return (String) get(2);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_activities.CODE</code>. Unique
     * Code to identify this row.
     */
    public EntityProcessorActivitiesRecord setCode(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_activities.CODE</code>. Unique
     * Code to identify this row.
     */
    public String getCode() {
        return (String) get(3);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_activities.NAME</code>. Name of
     * the Activity.
     */
    public EntityProcessorActivitiesRecord setName(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_activities.NAME</code>. Name of
     * the Activity.
     */
    public String getName() {
        return (String) get(4);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_activities.DESCRIPTION</code>.
     * Description for the Activity.
     */
    public EntityProcessorActivitiesRecord setDescription(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_activities.DESCRIPTION</code>.
     * Description for the Activity.
     */
    public String getDescription() {
        return (String) get(5);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_activities.TICKET_ID</code>.
     * Ticket related to this Activity.
     */
    public EntityProcessorActivitiesRecord setTicketId(ULong value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_activities.TICKET_ID</code>.
     * Ticket related to this Activity.
     */
    public ULong getTicketId() {
        return (ULong) get(6);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_activities.TASK_ID</code>. Task
     * related to this Activity.
     */
    public EntityProcessorActivitiesRecord setTaskId(ULong value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_activities.TASK_ID</code>. Task
     * related to this Activity.
     */
    public ULong getTaskId() {
        return (ULong) get(7);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_activities.NOTE_ID</code>. Note
     * related to this Activity.
     */
    public EntityProcessorActivitiesRecord setNoteId(ULong value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_activities.NOTE_ID</code>. Note
     * related to this Activity.
     */
    public ULong getNoteId() {
        return (ULong) get(8);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_activities.COMMENT</code>.
     * Comment on this Activity.
     */
    public EntityProcessorActivitiesRecord setComment(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_activities.COMMENT</code>.
     * Comment on this Activity.
     */
    public String getComment() {
        return (String) get(9);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_activities.ACTIVITY_DATE</code>.
     * Date of the Activity.
     */
    public EntityProcessorActivitiesRecord setActivityDate(LocalDateTime value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_activities.ACTIVITY_DATE</code>.
     * Date of the Activity.
     */
    public LocalDateTime getActivityDate() {
        return (LocalDateTime) get(10);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_activities.ACTIVITY_ACTION</code>.
     * Activity Action categories for this Activity.
     */
    public EntityProcessorActivitiesRecord setActivityAction(ActivityAction value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_activities.ACTIVITY_ACTION</code>.
     * Activity Action categories for this Activity.
     */
    public ActivityAction getActivityAction() {
        return (ActivityAction) get(11);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_activities.ACTOR_ID</code>. ID of
     * the user who performed this activity.
     */
    public EntityProcessorActivitiesRecord setActorId(ULong value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_activities.ACTOR_ID</code>. ID of
     * the user who performed this activity.
     */
    public ULong getActorId() {
        return (ULong) get(12);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_activities.OBJECT_ENTITY_SERIES</code>.
     * Entity Series of the object associated with this Activity. 
     */
    public EntityProcessorActivitiesRecord setObjectEntitySeries(EntitySeries value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_activities.OBJECT_ENTITY_SERIES</code>.
     * Entity Series of the object associated with this Activity. 
     */
    public EntitySeries getObjectEntitySeries() {
        return (EntitySeries) get(13);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_activities.OBJECT_ID</code>.
     * Object id of OBJECT_ENTITY_SERIES on which Activity is performed
     */
    public EntityProcessorActivitiesRecord setObjectId(ULong value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_activities.OBJECT_ID</code>.
     * Object id of OBJECT_ENTITY_SERIES on which Activity is performed
     */
    public ULong getObjectId() {
        return (ULong) get(14);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_activities.OBJECT_DATA</code>.
     * Object data of OBJECT_ENTITY_SERIES on which Activity is performed
     */
    public EntityProcessorActivitiesRecord setObjectData(Map value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_activities.OBJECT_DATA</code>.
     * Object data of OBJECT_ENTITY_SERIES on which Activity is performed
     */
    public Map getObjectData() {
        return (Map) get(15);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_activities.TEMP_ACTIVE</code>.
     * Temporary active flag for this Activity.
     */
    public EntityProcessorActivitiesRecord setTempActive(Boolean value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_activities.TEMP_ACTIVE</code>.
     * Temporary active flag for this Activity.
     */
    public Boolean getTempActive() {
        return (Boolean) get(16);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_activities.IS_ACTIVE</code>. Flag
     * to check if this Activity is active or not.
     */
    public EntityProcessorActivitiesRecord setIsActive(Boolean value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_activities.IS_ACTIVE</code>. Flag
     * to check if this Activity is active or not.
     */
    public Boolean getIsActive() {
        return (Boolean) get(17);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_activities.CREATED_BY</code>. ID
     * of the user who created this row.
     */
    public EntityProcessorActivitiesRecord setCreatedBy(ULong value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_activities.CREATED_BY</code>. ID
     * of the user who created this row.
     */
    public ULong getCreatedBy() {
        return (ULong) get(18);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_activities.CREATED_AT</code>.
     * Time when this row is created.
     */
    public EntityProcessorActivitiesRecord setCreatedAt(LocalDateTime value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_activities.CREATED_AT</code>.
     * Time when this row is created.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(19);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached EntityProcessorActivitiesRecord
     */
    public EntityProcessorActivitiesRecord() {
        super(EntityProcessorActivities.ENTITY_PROCESSOR_ACTIVITIES);
    }

    /**
     * Create a detached, initialised EntityProcessorActivitiesRecord
     */
    public EntityProcessorActivitiesRecord(ULong id, String appCode, String clientCode, String code, String name, String description, ULong ticketId, ULong taskId, ULong noteId, String comment, LocalDateTime activityDate, ActivityAction activityAction, ULong actorId, EntitySeries objectEntitySeries, ULong objectId, Map objectData, Boolean tempActive, Boolean isActive, ULong createdBy, LocalDateTime createdAt) {
        super(EntityProcessorActivities.ENTITY_PROCESSOR_ACTIVITIES);

        setId(id);
        setAppCode(appCode);
        setClientCode(clientCode);
        setCode(code);
        setName(name);
        setDescription(description);
        setTicketId(ticketId);
        setTaskId(taskId);
        setNoteId(noteId);
        setComment(comment);
        setActivityDate(activityDate);
        setActivityAction(activityAction);
        setActorId(actorId);
        setObjectEntitySeries(objectEntitySeries);
        setObjectId(objectId);
        setObjectData(objectData);
        setTempActive(tempActive);
        setIsActive(isActive);
        setCreatedBy(createdBy);
        setCreatedAt(createdAt);
        resetChangedOnNotNull();
    }
}
