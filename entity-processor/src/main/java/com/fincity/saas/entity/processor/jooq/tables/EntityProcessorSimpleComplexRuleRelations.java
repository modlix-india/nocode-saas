/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.entity.processor.jooq.tables;


import com.fincity.saas.entity.processor.jooq.EntityProcessor;
import com.fincity.saas.entity.processor.jooq.Keys;
import com.fincity.saas.entity.processor.jooq.tables.EntityProcessorComplexRules.EntityProcessorComplexRulesPath;
import com.fincity.saas.entity.processor.jooq.tables.EntityProcessorSimpleRules.EntityProcessorSimpleRulesPath;
import com.fincity.saas.entity.processor.jooq.tables.records.EntityProcessorSimpleComplexRuleRelationsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EntityProcessorSimpleComplexRuleRelations extends TableImpl<EntityProcessorSimpleComplexRuleRelationsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>entity_processor.entity_processor_simple_complex_rule_relations</code>
     */
    public static final EntityProcessorSimpleComplexRuleRelations ENTITY_PROCESSOR_SIMPLE_COMPLEX_RULE_RELATIONS = new EntityProcessorSimpleComplexRuleRelations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EntityProcessorSimpleComplexRuleRelationsRecord> getRecordType() {
        return EntityProcessorSimpleComplexRuleRelationsRecord.class;
    }

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_complex_rule_relations.ID</code>.
     * Primary key.
     */
    public final TableField<EntityProcessorSimpleComplexRuleRelationsRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key.");

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_complex_rule_relations.APP_CODE</code>.
     * App Code on which this Relation was created.
     */
    public final TableField<EntityProcessorSimpleComplexRuleRelationsRecord, String> APP_CODE = createField(DSL.name("APP_CODE"), SQLDataType.CHAR(64).nullable(false), this, "App Code on which this Relation was created.");

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_complex_rule_relations.CLIENT_CODE</code>.
     * Client Code who created this Relation.
     */
    public final TableField<EntityProcessorSimpleComplexRuleRelationsRecord, String> CLIENT_CODE = createField(DSL.name("CLIENT_CODE"), SQLDataType.CHAR(8).nullable(false), this, "Client Code who created this Relation.");

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_complex_rule_relations.CODE</code>.
     * Unique Code to identify this row.
     */
    public final TableField<EntityProcessorSimpleComplexRuleRelationsRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.CHAR(22).nullable(false), this, "Unique Code to identify this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_complex_rule_relations.NAME</code>.
     * Name of the Relation.
     */
    public final TableField<EntityProcessorSimpleComplexRuleRelationsRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(64).nullable(false), this, "Name of the Relation.");

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_complex_rule_relations.DESCRIPTION</code>.
     * Description for the Relation.
     */
    public final TableField<EntityProcessorSimpleComplexRuleRelationsRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "Description for the Relation.");

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_complex_rule_relations.VERSION</code>.
     * Version of this Complex Rule.
     */
    public final TableField<EntityProcessorSimpleComplexRuleRelationsRecord, Integer> VERSION = createField(DSL.name("VERSION"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("1", SQLDataType.INTEGER)), this, "Version of this Complex Rule.");

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_complex_rule_relations.COMPLEX_CONDITION_ID</code>.
     * Complex Rule ID related to this Relation.
     */
    public final TableField<EntityProcessorSimpleComplexRuleRelationsRecord, ULong> COMPLEX_CONDITION_ID = createField(DSL.name("COMPLEX_CONDITION_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Complex Rule ID related to this Relation.");

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_complex_rule_relations.SIMPLE_CONDITION_ID</code>.
     * Simple Rule ID related to this Relation.
     */
    public final TableField<EntityProcessorSimpleComplexRuleRelationsRecord, ULong> SIMPLE_CONDITION_ID = createField(DSL.name("SIMPLE_CONDITION_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Simple Rule ID related to this Relation.");

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_complex_rule_relations.ORDER</code>.
     * Order of the Simple Rule in the Complex Rule.
     */
    public final TableField<EntityProcessorSimpleComplexRuleRelationsRecord, Integer> ORDER = createField(DSL.name("ORDER"), SQLDataType.INTEGER, this, "Order of the Simple Rule in the Complex Rule.");

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_complex_rule_relations.TEMP_ACTIVE</code>.
     * Temporary active flag for this Relation.
     */
    public final TableField<EntityProcessorSimpleComplexRuleRelationsRecord, Byte> TEMP_ACTIVE = createField(DSL.name("TEMP_ACTIVE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Temporary active flag for this Relation.");

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_complex_rule_relations.IS_ACTIVE</code>.
     * Flag to check if this Relation is active or not.
     */
    public final TableField<EntityProcessorSimpleComplexRuleRelationsRecord, Byte> IS_ACTIVE = createField(DSL.name("IS_ACTIVE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "Flag to check if this Relation is active or not.");

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_complex_rule_relations.CREATED_BY</code>.
     * ID of the user who created this row.
     */
    public final TableField<EntityProcessorSimpleComplexRuleRelationsRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_complex_rule_relations.CREATED_AT</code>.
     * Time when this row is created.
     */
    public final TableField<EntityProcessorSimpleComplexRuleRelationsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created.");

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_complex_rule_relations.UPDATED_BY</code>.
     * ID of the user who updated this row.
     */
    public final TableField<EntityProcessorSimpleComplexRuleRelationsRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_complex_rule_relations.UPDATED_AT</code>.
     * Time when this row is updated.
     */
    public final TableField<EntityProcessorSimpleComplexRuleRelationsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated.");

    private EntityProcessorSimpleComplexRuleRelations(Name alias, Table<EntityProcessorSimpleComplexRuleRelationsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private EntityProcessorSimpleComplexRuleRelations(Name alias, Table<EntityProcessorSimpleComplexRuleRelationsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased
     * <code>entity_processor.entity_processor_simple_complex_rule_relations</code>
     * table reference
     */
    public EntityProcessorSimpleComplexRuleRelations(String alias) {
        this(DSL.name(alias), ENTITY_PROCESSOR_SIMPLE_COMPLEX_RULE_RELATIONS);
    }

    /**
     * Create an aliased
     * <code>entity_processor.entity_processor_simple_complex_rule_relations</code>
     * table reference
     */
    public EntityProcessorSimpleComplexRuleRelations(Name alias) {
        this(alias, ENTITY_PROCESSOR_SIMPLE_COMPLEX_RULE_RELATIONS);
    }

    /**
     * Create a
     * <code>entity_processor.entity_processor_simple_complex_rule_relations</code>
     * table reference
     */
    public EntityProcessorSimpleComplexRuleRelations() {
        this(DSL.name("entity_processor_simple_complex_rule_relations"), null);
    }

    public <O extends Record> EntityProcessorSimpleComplexRuleRelations(Table<O> path, ForeignKey<O, EntityProcessorSimpleComplexRuleRelationsRecord> childPath, InverseForeignKey<O, EntityProcessorSimpleComplexRuleRelationsRecord> parentPath) {
        super(path, childPath, parentPath, ENTITY_PROCESSOR_SIMPLE_COMPLEX_RULE_RELATIONS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class EntityProcessorSimpleComplexRuleRelationsPath extends EntityProcessorSimpleComplexRuleRelations implements Path<EntityProcessorSimpleComplexRuleRelationsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> EntityProcessorSimpleComplexRuleRelationsPath(Table<O> path, ForeignKey<O, EntityProcessorSimpleComplexRuleRelationsRecord> childPath, InverseForeignKey<O, EntityProcessorSimpleComplexRuleRelationsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private EntityProcessorSimpleComplexRuleRelationsPath(Name alias, Table<EntityProcessorSimpleComplexRuleRelationsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public EntityProcessorSimpleComplexRuleRelationsPath as(String alias) {
            return new EntityProcessorSimpleComplexRuleRelationsPath(DSL.name(alias), this);
        }

        @Override
        public EntityProcessorSimpleComplexRuleRelationsPath as(Name alias) {
            return new EntityProcessorSimpleComplexRuleRelationsPath(alias, this);
        }

        @Override
        public EntityProcessorSimpleComplexRuleRelationsPath as(Table<?> alias) {
            return new EntityProcessorSimpleComplexRuleRelationsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : EntityProcessor.ENTITY_PROCESSOR;
    }

    @Override
    public Identity<EntityProcessorSimpleComplexRuleRelationsRecord, ULong> getIdentity() {
        return (Identity<EntityProcessorSimpleComplexRuleRelationsRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<EntityProcessorSimpleComplexRuleRelationsRecord> getPrimaryKey() {
        return Keys.KEY_ENTITY_PROCESSOR_SIMPLE_COMPLEX_RULE_RELATIONS_PRIMARY;
    }

    @Override
    public List<UniqueKey<EntityProcessorSimpleComplexRuleRelationsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ENTITY_PROCESSOR_SIMPLE_COMPLEX_RULE_RELATIONS_UK1_SIMPLE_COMPLEX_CONDITION_RELATIONS_CODE);
    }

    @Override
    public List<ForeignKey<EntityProcessorSimpleComplexRuleRelationsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_RELATIONS_COMPLEX_CONDITION_ID, Keys.FK2_RELATIONS_SIMPLE_CONDITION_ID);
    }

    private transient EntityProcessorComplexRulesPath _entityProcessorComplexRules;

    /**
     * Get the implicit join path to the
     * <code>entity_processor.entity_processor_complex_rules</code> table.
     */
    public EntityProcessorComplexRulesPath entityProcessorComplexRules() {
        if (_entityProcessorComplexRules == null)
            _entityProcessorComplexRules = new EntityProcessorComplexRulesPath(this, Keys.FK1_RELATIONS_COMPLEX_CONDITION_ID, null);

        return _entityProcessorComplexRules;
    }

    private transient EntityProcessorSimpleRulesPath _entityProcessorSimpleRules;

    /**
     * Get the implicit join path to the
     * <code>entity_processor.entity_processor_simple_rules</code> table.
     */
    public EntityProcessorSimpleRulesPath entityProcessorSimpleRules() {
        if (_entityProcessorSimpleRules == null)
            _entityProcessorSimpleRules = new EntityProcessorSimpleRulesPath(this, Keys.FK2_RELATIONS_SIMPLE_CONDITION_ID, null);

        return _entityProcessorSimpleRules;
    }

    @Override
    public EntityProcessorSimpleComplexRuleRelations as(String alias) {
        return new EntityProcessorSimpleComplexRuleRelations(DSL.name(alias), this);
    }

    @Override
    public EntityProcessorSimpleComplexRuleRelations as(Name alias) {
        return new EntityProcessorSimpleComplexRuleRelations(alias, this);
    }

    @Override
    public EntityProcessorSimpleComplexRuleRelations as(Table<?> alias) {
        return new EntityProcessorSimpleComplexRuleRelations(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorSimpleComplexRuleRelations rename(String name) {
        return new EntityProcessorSimpleComplexRuleRelations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorSimpleComplexRuleRelations rename(Name name) {
        return new EntityProcessorSimpleComplexRuleRelations(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorSimpleComplexRuleRelations rename(Table<?> name) {
        return new EntityProcessorSimpleComplexRuleRelations(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorSimpleComplexRuleRelations where(Condition condition) {
        return new EntityProcessorSimpleComplexRuleRelations(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorSimpleComplexRuleRelations where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorSimpleComplexRuleRelations where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorSimpleComplexRuleRelations where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorSimpleComplexRuleRelations where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorSimpleComplexRuleRelations where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorSimpleComplexRuleRelations where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorSimpleComplexRuleRelations where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorSimpleComplexRuleRelations whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorSimpleComplexRuleRelations whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
