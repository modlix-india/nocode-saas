/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.entity.processor.jooq.tables;


import com.fincity.saas.entity.processor.enums.ProductTemplateType;
import com.fincity.saas.entity.processor.jooq.EntityProcessor;
import com.fincity.saas.entity.processor.jooq.Indexes;
import com.fincity.saas.entity.processor.jooq.Keys;
import com.fincity.saas.entity.processor.jooq.tables.EntityProcessorProductTemplateRules.EntityProcessorProductTemplateRulesPath;
import com.fincity.saas.entity.processor.jooq.tables.EntityProcessorProductTemplateWalkInForms.EntityProcessorProductTemplateWalkInFormsPath;
import com.fincity.saas.entity.processor.jooq.tables.EntityProcessorProducts.EntityProcessorProductsPath;
import com.fincity.saas.entity.processor.jooq.tables.EntityProcessorStages.EntityProcessorStagesPath;
import com.fincity.saas.entity.processor.jooq.tables.records.EntityProcessorProductTemplatesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.EnumConverter;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EntityProcessorProductTemplates extends TableImpl<EntityProcessorProductTemplatesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>entity_processor.entity_processor_product_templates</code>
     */
    public static final EntityProcessorProductTemplates ENTITY_PROCESSOR_PRODUCT_TEMPLATES = new EntityProcessorProductTemplates();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EntityProcessorProductTemplatesRecord> getRecordType() {
        return EntityProcessorProductTemplatesRecord.class;
    }

    /**
     * The column
     * <code>entity_processor.entity_processor_product_templates.ID</code>.
     * Primary key.
     */
    public final TableField<EntityProcessorProductTemplatesRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_templates.APP_CODE</code>.
     * App Code on which this Product Template was created.
     */
    public final TableField<EntityProcessorProductTemplatesRecord, String> APP_CODE = createField(DSL.name("APP_CODE"), SQLDataType.CHAR(64).nullable(false), this, "App Code on which this Product Template was created.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_templates.CLIENT_CODE</code>.
     * Client Code who created this Product Template.
     */
    public final TableField<EntityProcessorProductTemplatesRecord, String> CLIENT_CODE = createField(DSL.name("CLIENT_CODE"), SQLDataType.CHAR(8).nullable(false), this, "Client Code who created this Product Template.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_templates.CODE</code>.
     * Unique Code to identify this row.
     */
    public final TableField<EntityProcessorProductTemplatesRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.CHAR(22).nullable(false), this, "Unique Code to identify this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_templates.NAME</code>.
     * Name of the Product Template.
     */
    public final TableField<EntityProcessorProductTemplatesRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(512).nullable(false), this, "Name of the Product Template.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_templates.DESCRIPTION</code>.
     * Description for the Product Template.
     */
    public final TableField<EntityProcessorProductTemplatesRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "Description for the Product Template.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_templates.PRODUCT_TEMPLATE_TYPE</code>.
     * Type of Product Template.
     */
    public final TableField<EntityProcessorProductTemplatesRecord, ProductTemplateType> PRODUCT_TEMPLATE_TYPE = createField(DSL.name("PRODUCT_TEMPLATE_TYPE"), SQLDataType.VARCHAR(7).nullable(false).defaultValue(DSL.inline("GENERAL", SQLDataType.VARCHAR)), this, "Type of Product Template.", new EnumConverter<String, ProductTemplateType>(String.class, ProductTemplateType.class));

    /**
     * The column
     * <code>entity_processor.entity_processor_product_templates.TEMP_ACTIVE</code>.
     * Temporary active flag for this product.
     */
    public final TableField<EntityProcessorProductTemplatesRecord, Boolean> TEMP_ACTIVE = createField(DSL.name("TEMP_ACTIVE"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "Temporary active flag for this product.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_templates.IS_ACTIVE</code>.
     * Flag to check if this product is active or not.
     */
    public final TableField<EntityProcessorProductTemplatesRecord, Boolean> IS_ACTIVE = createField(DSL.name("IS_ACTIVE"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("1", SQLDataType.BOOLEAN)), this, "Flag to check if this product is active or not.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_templates.CREATED_BY</code>.
     * ID of the user who created this row.
     */
    public final TableField<EntityProcessorProductTemplatesRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_templates.CREATED_AT</code>.
     * Time when this row is created.
     */
    public final TableField<EntityProcessorProductTemplatesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_templates.UPDATED_BY</code>.
     * ID of the user who updated this row.
     */
    public final TableField<EntityProcessorProductTemplatesRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_templates.UPDATED_AT</code>.
     * Time when this row is updated.
     */
    public final TableField<EntityProcessorProductTemplatesRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated.");

    private EntityProcessorProductTemplates(Name alias, Table<EntityProcessorProductTemplatesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private EntityProcessorProductTemplates(Name alias, Table<EntityProcessorProductTemplatesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased
     * <code>entity_processor.entity_processor_product_templates</code> table
     * reference
     */
    public EntityProcessorProductTemplates(String alias) {
        this(DSL.name(alias), ENTITY_PROCESSOR_PRODUCT_TEMPLATES);
    }

    /**
     * Create an aliased
     * <code>entity_processor.entity_processor_product_templates</code> table
     * reference
     */
    public EntityProcessorProductTemplates(Name alias) {
        this(alias, ENTITY_PROCESSOR_PRODUCT_TEMPLATES);
    }

    /**
     * Create a <code>entity_processor.entity_processor_product_templates</code>
     * table reference
     */
    public EntityProcessorProductTemplates() {
        this(DSL.name("entity_processor_product_templates"), null);
    }

    public <O extends Record> EntityProcessorProductTemplates(Table<O> path, ForeignKey<O, EntityProcessorProductTemplatesRecord> childPath, InverseForeignKey<O, EntityProcessorProductTemplatesRecord> parentPath) {
        super(path, childPath, parentPath, ENTITY_PROCESSOR_PRODUCT_TEMPLATES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class EntityProcessorProductTemplatesPath extends EntityProcessorProductTemplates implements Path<EntityProcessorProductTemplatesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> EntityProcessorProductTemplatesPath(Table<O> path, ForeignKey<O, EntityProcessorProductTemplatesRecord> childPath, InverseForeignKey<O, EntityProcessorProductTemplatesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private EntityProcessorProductTemplatesPath(Name alias, Table<EntityProcessorProductTemplatesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public EntityProcessorProductTemplatesPath as(String alias) {
            return new EntityProcessorProductTemplatesPath(DSL.name(alias), this);
        }

        @Override
        public EntityProcessorProductTemplatesPath as(Name alias) {
            return new EntityProcessorProductTemplatesPath(alias, this);
        }

        @Override
        public EntityProcessorProductTemplatesPath as(Table<?> alias) {
            return new EntityProcessorProductTemplatesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : EntityProcessor.ENTITY_PROCESSOR;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ENTITY_PROCESSOR_PRODUCT_TEMPLATES_IDX0_PRODUCT_TEMPLATES_AC_CC);
    }

    @Override
    public Identity<EntityProcessorProductTemplatesRecord, ULong> getIdentity() {
        return (Identity<EntityProcessorProductTemplatesRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<EntityProcessorProductTemplatesRecord> getPrimaryKey() {
        return Keys.KEY_ENTITY_PROCESSOR_PRODUCT_TEMPLATES_PRIMARY;
    }

    @Override
    public List<UniqueKey<EntityProcessorProductTemplatesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ENTITY_PROCESSOR_PRODUCT_TEMPLATES_UK1_PRODUCT_TEMPLATES_CODE);
    }

    private transient EntityProcessorProductTemplateRulesPath _entityProcessorProductTemplateRules;

    /**
     * Get the implicit to-many join path to the
     * <code>entity_processor.entity_processor_product_template_rules</code>
     * table
     */
    public EntityProcessorProductTemplateRulesPath entityProcessorProductTemplateRules() {
        if (_entityProcessorProductTemplateRules == null)
            _entityProcessorProductTemplateRules = new EntityProcessorProductTemplateRulesPath(this, null, Keys.FK1_PRODUCT_TEMPLATE_RULES_PRODUCT_TEMPLATE_ID.getInverseKey());

        return _entityProcessorProductTemplateRules;
    }

    private transient EntityProcessorProductTemplateWalkInFormsPath _entityProcessorProductTemplateWalkInForms;

    /**
     * Get the implicit to-many join path to the
     * <code>entity_processor.entity_processor_product_template_walk_in_forms</code>
     * table
     */
    public EntityProcessorProductTemplateWalkInFormsPath entityProcessorProductTemplateWalkInForms() {
        if (_entityProcessorProductTemplateWalkInForms == null)
            _entityProcessorProductTemplateWalkInForms = new EntityProcessorProductTemplateWalkInFormsPath(this, null, Keys.FK1_PRODUCT_TEMPLATE_WALK_IN_FORMS_PRODUCT_ID.getInverseKey());

        return _entityProcessorProductTemplateWalkInForms;
    }

    private transient EntityProcessorProductsPath _entityProcessorProducts;

    /**
     * Get the implicit to-many join path to the
     * <code>entity_processor.entity_processor_products</code> table
     */
    public EntityProcessorProductsPath entityProcessorProducts() {
        if (_entityProcessorProducts == null)
            _entityProcessorProducts = new EntityProcessorProductsPath(this, null, Keys.FK1_PRODUCTS_PRODUCT_TEMPLATE_ID.getInverseKey());

        return _entityProcessorProducts;
    }

    private transient EntityProcessorStagesPath _entityProcessorStages;

    /**
     * Get the implicit to-many join path to the
     * <code>entity_processor.entity_processor_stages</code> table
     */
    public EntityProcessorStagesPath entityProcessorStages() {
        if (_entityProcessorStages == null)
            _entityProcessorStages = new EntityProcessorStagesPath(this, null, Keys.FK1_STAGES_PRODUCT_TEMPLATE_ID.getInverseKey());

        return _entityProcessorStages;
    }

    @Override
    public EntityProcessorProductTemplates as(String alias) {
        return new EntityProcessorProductTemplates(DSL.name(alias), this);
    }

    @Override
    public EntityProcessorProductTemplates as(Name alias) {
        return new EntityProcessorProductTemplates(alias, this);
    }

    @Override
    public EntityProcessorProductTemplates as(Table<?> alias) {
        return new EntityProcessorProductTemplates(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorProductTemplates rename(String name) {
        return new EntityProcessorProductTemplates(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorProductTemplates rename(Name name) {
        return new EntityProcessorProductTemplates(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorProductTemplates rename(Table<?> name) {
        return new EntityProcessorProductTemplates(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorProductTemplates where(Condition condition) {
        return new EntityProcessorProductTemplates(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorProductTemplates where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorProductTemplates where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorProductTemplates where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorProductTemplates where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorProductTemplates where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorProductTemplates where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorProductTemplates where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorProductTemplates whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorProductTemplates whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
