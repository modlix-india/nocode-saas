/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.entity.processor.jooq.tables;


import com.fincity.saas.entity.processor.enums.PartnerVerificationStatus;
import com.fincity.saas.entity.processor.jooq.EntityProcessor;
import com.fincity.saas.entity.processor.jooq.Keys;
import com.fincity.saas.entity.processor.jooq.tables.records.EntityProcessorPartnersRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.EnumConverter;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EntityProcessorPartners extends TableImpl<EntityProcessorPartnersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>entity_processor.entity_processor_partners</code>
     */
    public static final EntityProcessorPartners ENTITY_PROCESSOR_PARTNERS = new EntityProcessorPartners();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EntityProcessorPartnersRecord> getRecordType() {
        return EntityProcessorPartnersRecord.class;
    }

    /**
     * The column <code>entity_processor.entity_processor_partners.ID</code>.
     * Primary key.
     */
    public final TableField<EntityProcessorPartnersRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key.");

    /**
     * The column
     * <code>entity_processor.entity_processor_partners.APP_CODE</code>. App
     * Code on which this Partner was created.
     */
    public final TableField<EntityProcessorPartnersRecord, String> APP_CODE = createField(DSL.name("APP_CODE"), SQLDataType.CHAR(64).nullable(false), this, "App Code on which this Partner was created.");

    /**
     * The column
     * <code>entity_processor.entity_processor_partners.CLIENT_CODE</code>.
     * Client Code who added this partner.
     */
    public final TableField<EntityProcessorPartnersRecord, String> CLIENT_CODE = createField(DSL.name("CLIENT_CODE"), SQLDataType.CHAR(8).nullable(false), this, "Client Code who added this partner.");

    /**
     * The column <code>entity_processor.entity_processor_partners.CODE</code>.
     * Unique Code to identify this row.
     */
    public final TableField<EntityProcessorPartnersRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.CHAR(22).nullable(false), this, "Unique Code to identify this row.");

    /**
     * The column <code>entity_processor.entity_processor_partners.NAME</code>.
     * Name of the Partner.
     */
    public final TableField<EntityProcessorPartnersRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(512).nullable(false), this, "Name of the Partner.");

    /**
     * The column
     * <code>entity_processor.entity_processor_partners.DESCRIPTION</code>.
     * Description for the Partner.
     */
    public final TableField<EntityProcessorPartnersRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "Description for the Partner.");

    /**
     * The column
     * <code>entity_processor.entity_processor_partners.CLIENT_ID</code>.
     * Partner client Id.
     */
    public final TableField<EntityProcessorPartnersRecord, ULong> CLIENT_ID = createField(DSL.name("CLIENT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Partner client Id.");

    /**
     * The column
     * <code>entity_processor.entity_processor_partners.MANAGER_ID</code>.
     * Partner manager user Id.
     */
    public final TableField<EntityProcessorPartnersRecord, ULong> MANAGER_ID = createField(DSL.name("MANAGER_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Partner manager user Id.");

    /**
     * The column
     * <code>entity_processor.entity_processor_partners.PARTNER_VERIFICATION_STATUS</code>.
     * Partner verification status.
     */
    public final TableField<EntityProcessorPartnersRecord, PartnerVerificationStatus> PARTNER_VERIFICATION_STATUS = createField(DSL.name("PARTNER_VERIFICATION_STATUS"), SQLDataType.VARCHAR(18).nullable(false), this, "Partner verification status.", new EnumConverter<String, PartnerVerificationStatus>(String.class, PartnerVerificationStatus.class));

    /**
     * The column
     * <code>entity_processor.entity_processor_partners.TEMP_ACTIVE</code>.
     * Temporary active flag for this partner.
     */
    public final TableField<EntityProcessorPartnersRecord, Byte> TEMP_ACTIVE = createField(DSL.name("TEMP_ACTIVE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Temporary active flag for this partner.");

    /**
     * The column
     * <code>entity_processor.entity_processor_partners.IS_ACTIVE</code>. Flag
     * to check if this partner is active or not.
     */
    public final TableField<EntityProcessorPartnersRecord, Byte> IS_ACTIVE = createField(DSL.name("IS_ACTIVE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "Flag to check if this partner is active or not.");

    /**
     * The column
     * <code>entity_processor.entity_processor_partners.CREATED_BY</code>. ID of
     * the user who created this row.
     */
    public final TableField<EntityProcessorPartnersRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_partners.CREATED_AT</code>. Time
     * when this row is created.
     */
    public final TableField<EntityProcessorPartnersRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created.");

    /**
     * The column
     * <code>entity_processor.entity_processor_partners.UPDATED_BY</code>. ID of
     * the user who updated this row.
     */
    public final TableField<EntityProcessorPartnersRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_partners.UPDATED_AT</code>. Time
     * when this row is updated.
     */
    public final TableField<EntityProcessorPartnersRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated.");

    private EntityProcessorPartners(Name alias, Table<EntityProcessorPartnersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private EntityProcessorPartners(Name alias, Table<EntityProcessorPartnersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>entity_processor.entity_processor_partners</code>
     * table reference
     */
    public EntityProcessorPartners(String alias) {
        this(DSL.name(alias), ENTITY_PROCESSOR_PARTNERS);
    }

    /**
     * Create an aliased <code>entity_processor.entity_processor_partners</code>
     * table reference
     */
    public EntityProcessorPartners(Name alias) {
        this(alias, ENTITY_PROCESSOR_PARTNERS);
    }

    /**
     * Create a <code>entity_processor.entity_processor_partners</code> table
     * reference
     */
    public EntityProcessorPartners() {
        this(DSL.name("entity_processor_partners"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : EntityProcessor.ENTITY_PROCESSOR;
    }

    @Override
    public Identity<EntityProcessorPartnersRecord, ULong> getIdentity() {
        return (Identity<EntityProcessorPartnersRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<EntityProcessorPartnersRecord> getPrimaryKey() {
        return Keys.KEY_ENTITY_PROCESSOR_PARTNERS_PRIMARY;
    }

    @Override
    public List<UniqueKey<EntityProcessorPartnersRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ENTITY_PROCESSOR_PARTNERS_UK1_PARTNERS_CODE);
    }

    @Override
    public EntityProcessorPartners as(String alias) {
        return new EntityProcessorPartners(DSL.name(alias), this);
    }

    @Override
    public EntityProcessorPartners as(Name alias) {
        return new EntityProcessorPartners(alias, this);
    }

    @Override
    public EntityProcessorPartners as(Table<?> alias) {
        return new EntityProcessorPartners(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorPartners rename(String name) {
        return new EntityProcessorPartners(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorPartners rename(Name name) {
        return new EntityProcessorPartners(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorPartners rename(Table<?> name) {
        return new EntityProcessorPartners(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorPartners where(Condition condition) {
        return new EntityProcessorPartners(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorPartners where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorPartners where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorPartners where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorPartners where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorPartners where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorPartners where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorPartners where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorPartners whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorPartners whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
