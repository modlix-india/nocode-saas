/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.entity.processor.jooq.tables;


import com.fincity.saas.entity.processor.jooq.EntityProcessor;
import com.fincity.saas.entity.processor.jooq.Keys;
import com.fincity.saas.entity.processor.jooq.tables.records.EntityProcessorProductsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EntityProcessorProducts extends TableImpl<EntityProcessorProductsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>entity_processor.entity_processor_products</code>
     */
    public static final EntityProcessorProducts ENTITY_PROCESSOR_PRODUCTS = new EntityProcessorProducts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EntityProcessorProductsRecord> getRecordType() {
        return EntityProcessorProductsRecord.class;
    }

    /**
     * The column <code>entity_processor.entity_processor_products.ID</code>.
     * Primary key.
     */
    public final TableField<EntityProcessorProductsRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key.");

    /**
     * The column
     * <code>entity_processor.entity_processor_products.APP_CODE</code>. App
     * Code on which this notification was sent.
     */
    public final TableField<EntityProcessorProductsRecord, String> APP_CODE = createField(DSL.name("APP_CODE"), SQLDataType.CHAR(64).nullable(false), this, "App Code on which this notification was sent.");

    /**
     * The column
     * <code>entity_processor.entity_processor_products.CLIENT_CODE</code>.
     * Client Code to whom this notification we sent.
     */
    public final TableField<EntityProcessorProductsRecord, String> CLIENT_CODE = createField(DSL.name("CLIENT_CODE"), SQLDataType.CHAR(8).nullable(false), this, "Client Code to whom this notification we sent.");

    /**
     * The column
     * <code>entity_processor.entity_processor_products.VERSION</code>. Version
     * of this row.
     */
    public final TableField<EntityProcessorProductsRecord, ULong> VERSION = createField(DSL.name("VERSION"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("1", SQLDataType.BIGINTUNSIGNED)), this, "Version of this row.");

    /**
     * The column <code>entity_processor.entity_processor_products.CODE</code>.
     * Unique Code to identify this row.
     */
    public final TableField<EntityProcessorProductsRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.CHAR(22).nullable(false), this, "Unique Code to identify this row.");

    /**
     * The column <code>entity_processor.entity_processor_products.NAME</code>.
     * Name of the Product. Product can be anything for which Entities will be
     * created. For Example, Projects can be product for Opportunities, Board
     * can be product for Epic.
     */
    public final TableField<EntityProcessorProductsRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(512).nullable(false), this, "Name of the Product. Product can be anything for which Entities will be created. For Example, Projects can be product for Opportunities, Board can be product for Epic.");

    /**
     * The column
     * <code>entity_processor.entity_processor_products.DESCRIPTION</code>.
     * Description for the Product.
     */
    public final TableField<EntityProcessorProductsRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "Description for the Product.");

    /**
     * The column
     * <code>entity_processor.entity_processor_products.ADDED_BY_USER_ID</code>.
     * User which added this product.
     */
    public final TableField<EntityProcessorProductsRecord, ULong> ADDED_BY_USER_ID = createField(DSL.name("ADDED_BY_USER_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "User which added this product.");

    /**
     * The column
     * <code>entity_processor.entity_processor_products.CURRENT_USER_ID</code>.
     * User to which this Product is assigned.
     */
    public final TableField<EntityProcessorProductsRecord, ULong> CURRENT_USER_ID = createField(DSL.name("CURRENT_USER_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "User to which this Product is assigned.");

    /**
     * The column
     * <code>entity_processor.entity_processor_products.VALUE_TEMPLATE_ID</code>.
     * Value Template related to this Product.
     */
    public final TableField<EntityProcessorProductsRecord, ULong> VALUE_TEMPLATE_ID = createField(DSL.name("VALUE_TEMPLATE_ID"), SQLDataType.BIGINTUNSIGNED, this, "Value Template related to this Product.");

    /**
     * The column
     * <code>entity_processor.entity_processor_products.DEFAULT_STAGE</code>.
     * Default stage for this product. This will be value for entity stage if
     * stage in not inferred.
     */
    public final TableField<EntityProcessorProductsRecord, ULong> DEFAULT_STAGE = createField(DSL.name("DEFAULT_STAGE"), SQLDataType.BIGINTUNSIGNED, this, "Default stage for this product. This will be value for entity stage if stage in not inferred.");

    /**
     * The column
     * <code>entity_processor.entity_processor_products.DEFAULT_STATUS</code>.
     * Default status for this product. This will be value for entity status if
     * status in not inferred.
     */
    public final TableField<EntityProcessorProductsRecord, ULong> DEFAULT_STATUS = createField(DSL.name("DEFAULT_STATUS"), SQLDataType.BIGINTUNSIGNED, this, "Default status for this product. This will be value for entity status if status in not inferred.");

    /**
     * The column
     * <code>entity_processor.entity_processor_products.TEMP_ACTIVE</code>.
     * Temporary active flag for this product.
     */
    public final TableField<EntityProcessorProductsRecord, Byte> TEMP_ACTIVE = createField(DSL.name("TEMP_ACTIVE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Temporary active flag for this product.");

    /**
     * The column
     * <code>entity_processor.entity_processor_products.IS_ACTIVE</code>. Flag
     * to check if this product is active or not.
     */
    public final TableField<EntityProcessorProductsRecord, Byte> IS_ACTIVE = createField(DSL.name("IS_ACTIVE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "Flag to check if this product is active or not.");

    /**
     * The column
     * <code>entity_processor.entity_processor_products.CREATED_BY</code>. ID of
     * the user who created this row.
     */
    public final TableField<EntityProcessorProductsRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_products.CREATED_AT</code>. Time
     * when this row is created.
     */
    public final TableField<EntityProcessorProductsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created.");

    /**
     * The column
     * <code>entity_processor.entity_processor_products.UPDATED_BY</code>. ID of
     * the user who updated this row.
     */
    public final TableField<EntityProcessorProductsRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_products.UPDATED_AT</code>. Time
     * when this row is updated.
     */
    public final TableField<EntityProcessorProductsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated.");

    private EntityProcessorProducts(Name alias, Table<EntityProcessorProductsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private EntityProcessorProducts(Name alias, Table<EntityProcessorProductsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>entity_processor.entity_processor_products</code>
     * table reference
     */
    public EntityProcessorProducts(String alias) {
        this(DSL.name(alias), ENTITY_PROCESSOR_PRODUCTS);
    }

    /**
     * Create an aliased <code>entity_processor.entity_processor_products</code>
     * table reference
     */
    public EntityProcessorProducts(Name alias) {
        this(alias, ENTITY_PROCESSOR_PRODUCTS);
    }

    /**
     * Create a <code>entity_processor.entity_processor_products</code> table
     * reference
     */
    public EntityProcessorProducts() {
        this(DSL.name("entity_processor_products"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : EntityProcessor.ENTITY_PROCESSOR;
    }

    @Override
    public Identity<EntityProcessorProductsRecord, ULong> getIdentity() {
        return (Identity<EntityProcessorProductsRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<EntityProcessorProductsRecord> getPrimaryKey() {
        return Keys.KEY_ENTITY_PROCESSOR_PRODUCTS_PRIMARY;
    }

    @Override
    public List<UniqueKey<EntityProcessorProductsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ENTITY_PROCESSOR_PRODUCTS_UK1_PRODUCTS_CODE);
    }

    @Override
    public EntityProcessorProducts as(String alias) {
        return new EntityProcessorProducts(DSL.name(alias), this);
    }

    @Override
    public EntityProcessorProducts as(Name alias) {
        return new EntityProcessorProducts(alias, this);
    }

    @Override
    public EntityProcessorProducts as(Table<?> alias) {
        return new EntityProcessorProducts(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorProducts rename(String name) {
        return new EntityProcessorProducts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorProducts rename(Name name) {
        return new EntityProcessorProducts(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorProducts rename(Table<?> name) {
        return new EntityProcessorProducts(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorProducts where(Condition condition) {
        return new EntityProcessorProducts(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorProducts where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorProducts where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorProducts where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorProducts where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorProducts where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorProducts where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorProducts where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorProducts whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorProducts whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
