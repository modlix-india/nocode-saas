/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.entity.processor.jooq.tables;


import com.fincity.saas.entity.processor.enums.Platform;
import com.fincity.saas.entity.processor.enums.StageType;
import com.fincity.saas.entity.processor.jooq.EntityProcessor;
import com.fincity.saas.entity.processor.jooq.Keys;
import com.fincity.saas.entity.processor.jooq.enums.EntityProcessorStagesPlatform;
import com.fincity.saas.entity.processor.jooq.enums.EntityProcessorStagesStageType;
import com.fincity.saas.entity.processor.jooq.tables.records.EntityProcessorStagesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.EnumConverter;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EntityProcessorStages extends TableImpl<EntityProcessorStagesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>entity_processor.entity_processor_stages</code>
     */
    public static final EntityProcessorStages ENTITY_PROCESSOR_STAGES = new EntityProcessorStages();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EntityProcessorStagesRecord> getRecordType() {
        return EntityProcessorStagesRecord.class;
    }

    /**
     * The column <code>entity_processor.entity_processor_stages.ID</code>.
     * Primary key.
     */
    public final TableField<EntityProcessorStagesRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key.");

    /**
     * The column
     * <code>entity_processor.entity_processor_stages.APP_CODE</code>. App Code
     * on which this Stage was created.
     */
    public final TableField<EntityProcessorStagesRecord, String> APP_CODE = createField(DSL.name("APP_CODE"), SQLDataType.CHAR(64).nullable(false), this, "App Code on which this Stage was created.");

    /**
     * The column
     * <code>entity_processor.entity_processor_stages.CLIENT_CODE</code>. Client
     * Code who created this Stage.
     */
    public final TableField<EntityProcessorStagesRecord, String> CLIENT_CODE = createField(DSL.name("CLIENT_CODE"), SQLDataType.CHAR(8).nullable(false), this, "Client Code who created this Stage.");

    /**
     * The column <code>entity_processor.entity_processor_stages.CODE</code>.
     * Unique Code to identify this row.
     */
    public final TableField<EntityProcessorStagesRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.CHAR(22).nullable(false), this, "Unique Code to identify this row.");

    /**
     * The column <code>entity_processor.entity_processor_stages.NAME</code>.
     * Name of the Stage.
     */
    public final TableField<EntityProcessorStagesRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.CHAR(32).nullable(false), this, "Name of the Stage.");

    /**
     * The column
     * <code>entity_processor.entity_processor_stages.DESCRIPTION</code>.
     * Description for the Stage.
     */
    public final TableField<EntityProcessorStagesRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "Description for the Stage.");

    /**
     * The column
     * <code>entity_processor.entity_processor_stages.ADDED_BY_USER_ID</code>.
     * User which added this Stage.
     */
    public final TableField<EntityProcessorStagesRecord, ULong> ADDED_BY_USER_ID = createField(DSL.name("ADDED_BY_USER_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "User which added this Stage.");

    /**
     * The column
     * <code>entity_processor.entity_processor_stages.PRODUCT_TEMPLATE_ID</code>.
     * Value Template related to this Stage.
     */
    public final TableField<EntityProcessorStagesRecord, ULong> PRODUCT_TEMPLATE_ID = createField(DSL.name("PRODUCT_TEMPLATE_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Value Template related to this Stage.");

    /**
     * The column
     * <code>entity_processor.entity_processor_stages.IS_PARENT</code>. Is this
     * the main Source or not.
     */
    public final TableField<EntityProcessorStagesRecord, Byte> IS_PARENT = createField(DSL.name("IS_PARENT"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "Is this the main Source or not.");

    /**
     * The column
     * <code>entity_processor.entity_processor_stages.PARENT_LEVEL_0</code>.
     * Parent Stage for this stage.
     */
    public final TableField<EntityProcessorStagesRecord, ULong> PARENT_LEVEL_0 = createField(DSL.name("PARENT_LEVEL_0"), SQLDataType.BIGINTUNSIGNED, this, "Parent Stage for this stage.");

    /**
     * The column
     * <code>entity_processor.entity_processor_stages.PARENT_LEVEL_1</code>.
     * Parent stage level 1 for this stage.
     */
    public final TableField<EntityProcessorStagesRecord, ULong> PARENT_LEVEL_1 = createField(DSL.name("PARENT_LEVEL_1"), SQLDataType.BIGINTUNSIGNED, this, "Parent stage level 1 for this stage.");

    /**
     * The column
     * <code>entity_processor.entity_processor_stages.PLATFORM</code>. Platform
     * is where this stage will be displayed in CRM, can be PRE_QUALIFICATION,
     * POST_QUALIFICATION.
     */
    public final TableField<EntityProcessorStagesRecord, Platform> PLATFORM = createField(DSL.name("PLATFORM"), SQLDataType.VARCHAR(18).nullable(false).defaultValue(DSL.inline("POST_QUALIFICATION", SQLDataType.VARCHAR)).asEnumDataType(EntityProcessorStagesPlatform.class), this, "Platform is where this stage will be displayed in CRM, can be PRE_QUALIFICATION, POST_QUALIFICATION.", new EnumConverter<EntityProcessorStagesPlatform, Platform>(EntityProcessorStagesPlatform.class, Platform.class));

    /**
     * The column
     * <code>entity_processor.entity_processor_stages.STAGE_TYPE</code>. Stage
     * type can be Open or Closed.
     */
    public final TableField<EntityProcessorStagesRecord, StageType> STAGE_TYPE = createField(DSL.name("STAGE_TYPE"), SQLDataType.VARCHAR(6).nullable(false).defaultValue(DSL.inline("OPEN", SQLDataType.VARCHAR)).asEnumDataType(EntityProcessorStagesStageType.class), this, "Stage type can be Open or Closed.", new EnumConverter<EntityProcessorStagesStageType, StageType>(EntityProcessorStagesStageType.class, StageType.class));

    /**
     * The column
     * <code>entity_processor.entity_processor_stages.IS_SUCCESS</code>. This
     * flag will tell weather this stage will end in a success or not.
     */
    public final TableField<EntityProcessorStagesRecord, Byte> IS_SUCCESS = createField(DSL.name("IS_SUCCESS"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "This flag will tell weather this stage will end in a success or not.");

    /**
     * The column
     * <code>entity_processor.entity_processor_stages.IS_FAILURE</code>. This
     * flag will tell weather this stage will end in a failure or not.
     */
    public final TableField<EntityProcessorStagesRecord, Byte> IS_FAILURE = createField(DSL.name("IS_FAILURE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "This flag will tell weather this stage will end in a failure or not.");

    /**
     * The column <code>entity_processor.entity_processor_stages.ORDER</code>.
     * Order in which this Stage will occur for a give client app.
     */
    public final TableField<EntityProcessorStagesRecord, Short> ORDER = createField(DSL.name("ORDER"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.SMALLINT)), this, "Order in which this Stage will occur for a give client app.");

    /**
     * The column
     * <code>entity_processor.entity_processor_stages.TEMP_ACTIVE</code>.
     * Temporary active flag for this product.
     */
    public final TableField<EntityProcessorStagesRecord, Byte> TEMP_ACTIVE = createField(DSL.name("TEMP_ACTIVE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Temporary active flag for this product.");

    /**
     * The column
     * <code>entity_processor.entity_processor_stages.IS_ACTIVE</code>. Flag to
     * check if this product is active or not.
     */
    public final TableField<EntityProcessorStagesRecord, Byte> IS_ACTIVE = createField(DSL.name("IS_ACTIVE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "Flag to check if this product is active or not.");

    /**
     * The column
     * <code>entity_processor.entity_processor_stages.CREATED_BY</code>. ID of
     * the user who created this row.
     */
    public final TableField<EntityProcessorStagesRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_stages.CREATED_AT</code>. Time
     * when this row is created.
     */
    public final TableField<EntityProcessorStagesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created.");

    /**
     * The column
     * <code>entity_processor.entity_processor_stages.UPDATED_BY</code>. ID of
     * the user who updated this row.
     */
    public final TableField<EntityProcessorStagesRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_stages.UPDATED_AT</code>. Time
     * when this row is updated.
     */
    public final TableField<EntityProcessorStagesRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated.");

    private EntityProcessorStages(Name alias, Table<EntityProcessorStagesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private EntityProcessorStages(Name alias, Table<EntityProcessorStagesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>entity_processor.entity_processor_stages</code>
     * table reference
     */
    public EntityProcessorStages(String alias) {
        this(DSL.name(alias), ENTITY_PROCESSOR_STAGES);
    }

    /**
     * Create an aliased <code>entity_processor.entity_processor_stages</code>
     * table reference
     */
    public EntityProcessorStages(Name alias) {
        this(alias, ENTITY_PROCESSOR_STAGES);
    }

    /**
     * Create a <code>entity_processor.entity_processor_stages</code> table
     * reference
     */
    public EntityProcessorStages() {
        this(DSL.name("entity_processor_stages"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : EntityProcessor.ENTITY_PROCESSOR;
    }

    @Override
    public Identity<EntityProcessorStagesRecord, ULong> getIdentity() {
        return (Identity<EntityProcessorStagesRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<EntityProcessorStagesRecord> getPrimaryKey() {
        return Keys.KEY_ENTITY_PROCESSOR_STAGES_PRIMARY;
    }

    @Override
    public List<UniqueKey<EntityProcessorStagesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ENTITY_PROCESSOR_STAGES_UK1_STAGES_CODE, Keys.KEY_ENTITY_PROCESSOR_STAGES_UK2_STAGES_NAME);
    }

    @Override
    public EntityProcessorStages as(String alias) {
        return new EntityProcessorStages(DSL.name(alias), this);
    }

    @Override
    public EntityProcessorStages as(Name alias) {
        return new EntityProcessorStages(alias, this);
    }

    @Override
    public EntityProcessorStages as(Table<?> alias) {
        return new EntityProcessorStages(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorStages rename(String name) {
        return new EntityProcessorStages(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorStages rename(Name name) {
        return new EntityProcessorStages(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorStages rename(Table<?> name) {
        return new EntityProcessorStages(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorStages where(Condition condition) {
        return new EntityProcessorStages(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorStages where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorStages where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorStages where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorStages where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorStages where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorStages where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorStages where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorStages whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorStages whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
