/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.entity.processor.jooq.tables;


import com.fincity.saas.entity.processor.jooq.EntityProcessor;
import com.fincity.saas.entity.processor.jooq.Keys;
import com.fincity.saas.entity.processor.jooq.tables.EntityProcessorTasks.EntityProcessorTasksPath;
import com.fincity.saas.entity.processor.jooq.tables.records.EntityProcessorTaskTypesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EntityProcessorTaskTypes extends TableImpl<EntityProcessorTaskTypesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>entity_processor.entity_processor_task_types</code>
     */
    public static final EntityProcessorTaskTypes ENTITY_PROCESSOR_TASK_TYPES = new EntityProcessorTaskTypes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EntityProcessorTaskTypesRecord> getRecordType() {
        return EntityProcessorTaskTypesRecord.class;
    }

    /**
     * The column <code>entity_processor.entity_processor_task_types.ID</code>.
     * Primary key.
     */
    public final TableField<EntityProcessorTaskTypesRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key.");

    /**
     * The column
     * <code>entity_processor.entity_processor_task_types.APP_CODE</code>. App
     * Code on which this task type was created.
     */
    public final TableField<EntityProcessorTaskTypesRecord, String> APP_CODE = createField(DSL.name("APP_CODE"), SQLDataType.CHAR(64).nullable(false), this, "App Code on which this task type was created.");

    /**
     * The column
     * <code>entity_processor.entity_processor_task_types.CLIENT_CODE</code>.
     * Client Code who created this task type.
     */
    public final TableField<EntityProcessorTaskTypesRecord, String> CLIENT_CODE = createField(DSL.name("CLIENT_CODE"), SQLDataType.CHAR(8).nullable(false), this, "Client Code who created this task type.");

    /**
     * The column
     * <code>entity_processor.entity_processor_task_types.CODE</code>. Unique
     * Code to identify this row.
     */
    public final TableField<EntityProcessorTaskTypesRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.CHAR(22).nullable(false), this, "Unique Code to identify this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_task_types.NAME</code>. Name of
     * the Task Type.
     */
    public final TableField<EntityProcessorTaskTypesRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(512).nullable(false), this, "Name of the Task Type.");

    /**
     * The column
     * <code>entity_processor.entity_processor_task_types.DESCRIPTION</code>.
     * Description for the Task Type.
     */
    public final TableField<EntityProcessorTaskTypesRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "Description for the Task Type.");

    /**
     * The column
     * <code>entity_processor.entity_processor_task_types.TEMP_ACTIVE</code>.
     * Temporary active flag for this task type.
     */
    public final TableField<EntityProcessorTaskTypesRecord, Byte> TEMP_ACTIVE = createField(DSL.name("TEMP_ACTIVE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Temporary active flag for this task type.");

    /**
     * The column
     * <code>entity_processor.entity_processor_task_types.IS_ACTIVE</code>. Flag
     * to check if this task type is active or not.
     */
    public final TableField<EntityProcessorTaskTypesRecord, Byte> IS_ACTIVE = createField(DSL.name("IS_ACTIVE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "Flag to check if this task type is active or not.");

    /**
     * The column
     * <code>entity_processor.entity_processor_task_types.CREATED_BY</code>. ID
     * of the user who created this row.
     */
    public final TableField<EntityProcessorTaskTypesRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_task_types.CREATED_AT</code>.
     * Time when this row is created.
     */
    public final TableField<EntityProcessorTaskTypesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created.");

    /**
     * The column
     * <code>entity_processor.entity_processor_task_types.UPDATED_BY</code>. ID
     * of the user who updated this row.
     */
    public final TableField<EntityProcessorTaskTypesRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_task_types.UPDATED_AT</code>.
     * Time when this row is updated.
     */
    public final TableField<EntityProcessorTaskTypesRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated.");

    private EntityProcessorTaskTypes(Name alias, Table<EntityProcessorTaskTypesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private EntityProcessorTaskTypes(Name alias, Table<EntityProcessorTaskTypesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased
     * <code>entity_processor.entity_processor_task_types</code> table reference
     */
    public EntityProcessorTaskTypes(String alias) {
        this(DSL.name(alias), ENTITY_PROCESSOR_TASK_TYPES);
    }

    /**
     * Create an aliased
     * <code>entity_processor.entity_processor_task_types</code> table reference
     */
    public EntityProcessorTaskTypes(Name alias) {
        this(alias, ENTITY_PROCESSOR_TASK_TYPES);
    }

    /**
     * Create a <code>entity_processor.entity_processor_task_types</code> table
     * reference
     */
    public EntityProcessorTaskTypes() {
        this(DSL.name("entity_processor_task_types"), null);
    }

    public <O extends Record> EntityProcessorTaskTypes(Table<O> path, ForeignKey<O, EntityProcessorTaskTypesRecord> childPath, InverseForeignKey<O, EntityProcessorTaskTypesRecord> parentPath) {
        super(path, childPath, parentPath, ENTITY_PROCESSOR_TASK_TYPES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class EntityProcessorTaskTypesPath extends EntityProcessorTaskTypes implements Path<EntityProcessorTaskTypesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> EntityProcessorTaskTypesPath(Table<O> path, ForeignKey<O, EntityProcessorTaskTypesRecord> childPath, InverseForeignKey<O, EntityProcessorTaskTypesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private EntityProcessorTaskTypesPath(Name alias, Table<EntityProcessorTaskTypesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public EntityProcessorTaskTypesPath as(String alias) {
            return new EntityProcessorTaskTypesPath(DSL.name(alias), this);
        }

        @Override
        public EntityProcessorTaskTypesPath as(Name alias) {
            return new EntityProcessorTaskTypesPath(alias, this);
        }

        @Override
        public EntityProcessorTaskTypesPath as(Table<?> alias) {
            return new EntityProcessorTaskTypesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : EntityProcessor.ENTITY_PROCESSOR;
    }

    @Override
    public Identity<EntityProcessorTaskTypesRecord, ULong> getIdentity() {
        return (Identity<EntityProcessorTaskTypesRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<EntityProcessorTaskTypesRecord> getPrimaryKey() {
        return Keys.KEY_ENTITY_PROCESSOR_TASK_TYPES_PRIMARY;
    }

    @Override
    public List<UniqueKey<EntityProcessorTaskTypesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ENTITY_PROCESSOR_TASK_TYPES_UK1_TASK_TYPES_CODE, Keys.KEY_ENTITY_PROCESSOR_TASK_TYPES_UK2_TASK_TYPES_NAME);
    }

    private transient EntityProcessorTasksPath _entityProcessorTasks;

    /**
     * Get the implicit to-many join path to the
     * <code>entity_processor.entity_processor_tasks</code> table
     */
    public EntityProcessorTasksPath entityProcessorTasks() {
        if (_entityProcessorTasks == null)
            _entityProcessorTasks = new EntityProcessorTasksPath(this, null, Keys.FK1_TASKS_TASK_TYPE_ID.getInverseKey());

        return _entityProcessorTasks;
    }

    @Override
    public EntityProcessorTaskTypes as(String alias) {
        return new EntityProcessorTaskTypes(DSL.name(alias), this);
    }

    @Override
    public EntityProcessorTaskTypes as(Name alias) {
        return new EntityProcessorTaskTypes(alias, this);
    }

    @Override
    public EntityProcessorTaskTypes as(Table<?> alias) {
        return new EntityProcessorTaskTypes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorTaskTypes rename(String name) {
        return new EntityProcessorTaskTypes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorTaskTypes rename(Name name) {
        return new EntityProcessorTaskTypes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorTaskTypes rename(Table<?> name) {
        return new EntityProcessorTaskTypes(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorTaskTypes where(Condition condition) {
        return new EntityProcessorTaskTypes(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorTaskTypes where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorTaskTypes where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorTaskTypes where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorTaskTypes where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorTaskTypes where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorTaskTypes where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorTaskTypes where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorTaskTypes whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorTaskTypes whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
