/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.entity.processor.jooq.tables;


import com.fincity.saas.entity.processor.jooq.EntityProcessor;
import com.fincity.saas.entity.processor.jooq.Keys;
import com.fincity.saas.entity.processor.jooq.tables.EntityProcessorProducts.EntityProcessorProductsPath;
import com.fincity.saas.entity.processor.jooq.tables.records.EntityProcessorCampaignsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EntityProcessorCampaigns extends TableImpl<EntityProcessorCampaignsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>entity_processor.entity_processor_campaigns</code>
     */
    public static final EntityProcessorCampaigns ENTITY_PROCESSOR_CAMPAIGNS = new EntityProcessorCampaigns();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EntityProcessorCampaignsRecord> getRecordType() {
        return EntityProcessorCampaignsRecord.class;
    }

    /**
     * The column <code>entity_processor.entity_processor_campaigns.ID</code>.
     * Primary key.
     */
    public final TableField<EntityProcessorCampaignsRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key.");

    /**
     * The column <code>entity_processor.entity_processor_campaigns.CODE</code>.
     * Unique Code to identify this row.
     */
    public final TableField<EntityProcessorCampaignsRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.CHAR(22).nullable(false), this, "Unique Code to identify this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_campaigns.APP_CODE</code>.
     * AppCode on which this campaign created.
     */
    public final TableField<EntityProcessorCampaignsRecord, String> APP_CODE = createField(DSL.name("APP_CODE"), SQLDataType.CHAR(64).nullable(false), this, "AppCode on which this campaign created.");

    /**
     * The column
     * <code>entity_processor.entity_processor_campaigns.CLIENT_CODE</code>.
     * ClientCode on which this campaign created
     */
    public final TableField<EntityProcessorCampaignsRecord, String> CLIENT_CODE = createField(DSL.name("CLIENT_CODE"), SQLDataType.CHAR(8).nullable(false), this, "ClientCode on which this campaign created");

    /**
     * The column
     * <code>entity_processor.entity_processor_campaigns.CAMPAIGN_ID</code>.
     * Campaign Id
     */
    public final TableField<EntityProcessorCampaignsRecord, String> CAMPAIGN_ID = createField(DSL.name("CAMPAIGN_ID"), SQLDataType.CHAR(32).nullable(false), this, "Campaign Id");

    /**
     * The column
     * <code>entity_processor.entity_processor_campaigns.CAMPAIGN_NAME</code>.
     * Campaign Name
     */
    public final TableField<EntityProcessorCampaignsRecord, String> CAMPAIGN_NAME = createField(DSL.name("CAMPAIGN_NAME"), SQLDataType.VARCHAR(128).nullable(false), this, "Campaign Name");

    /**
     * The column
     * <code>entity_processor.entity_processor_campaigns.CAMPAIGN_TYPE</code>.
     * Campaign Type
     */
    public final TableField<EntityProcessorCampaignsRecord, String> CAMPAIGN_TYPE = createField(DSL.name("CAMPAIGN_TYPE"), SQLDataType.VARCHAR(32), this, "Campaign Type");

    /**
     * The column
     * <code>entity_processor.entity_processor_campaigns.CAMPAIGN_SOURCE</code>.
     * Campaign Source
     */
    public final TableField<EntityProcessorCampaignsRecord, String> CAMPAIGN_SOURCE = createField(DSL.name("CAMPAIGN_SOURCE"), SQLDataType.VARCHAR(32), this, "Campaign Source");

    /**
     * The column
     * <code>entity_processor.entity_processor_campaigns.PRODUCT_ID</code>.
     * Product Id campaign belongs to.
     */
    public final TableField<EntityProcessorCampaignsRecord, ULong> PRODUCT_ID = createField(DSL.name("PRODUCT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Product Id campaign belongs to.");

    /**
     * The column
     * <code>entity_processor.entity_processor_campaigns.TEMP_ACTIVE</code>.
     * Temporary active flag for this campaign.
     */
    public final TableField<EntityProcessorCampaignsRecord, Byte> TEMP_ACTIVE = createField(DSL.name("TEMP_ACTIVE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Temporary active flag for this campaign.");

    /**
     * The column
     * <code>entity_processor.entity_processor_campaigns.IS_ACTIVE</code>. Flag
     * to check if this campaign is active or not.
     */
    public final TableField<EntityProcessorCampaignsRecord, Byte> IS_ACTIVE = createField(DSL.name("IS_ACTIVE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "Flag to check if this campaign is active or not.");

    /**
     * The column
     * <code>entity_processor.entity_processor_campaigns.CREATED_BY</code>. ID
     * of the user who created this row.
     */
    public final TableField<EntityProcessorCampaignsRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_campaigns.CREATED_AT</code>. Time
     * when this row is created.
     */
    public final TableField<EntityProcessorCampaignsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created.");

    /**
     * The column
     * <code>entity_processor.entity_processor_campaigns.UPDATED_BY</code>. ID
     * of the user who updated this row.
     */
    public final TableField<EntityProcessorCampaignsRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_campaigns.UPDATED_AT</code>. Time
     * when this row is updated.
     */
    public final TableField<EntityProcessorCampaignsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated.");

    private EntityProcessorCampaigns(Name alias, Table<EntityProcessorCampaignsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private EntityProcessorCampaigns(Name alias, Table<EntityProcessorCampaignsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased
     * <code>entity_processor.entity_processor_campaigns</code> table reference
     */
    public EntityProcessorCampaigns(String alias) {
        this(DSL.name(alias), ENTITY_PROCESSOR_CAMPAIGNS);
    }

    /**
     * Create an aliased
     * <code>entity_processor.entity_processor_campaigns</code> table reference
     */
    public EntityProcessorCampaigns(Name alias) {
        this(alias, ENTITY_PROCESSOR_CAMPAIGNS);
    }

    /**
     * Create a <code>entity_processor.entity_processor_campaigns</code> table
     * reference
     */
    public EntityProcessorCampaigns() {
        this(DSL.name("entity_processor_campaigns"), null);
    }

    public <O extends Record> EntityProcessorCampaigns(Table<O> path, ForeignKey<O, EntityProcessorCampaignsRecord> childPath, InverseForeignKey<O, EntityProcessorCampaignsRecord> parentPath) {
        super(path, childPath, parentPath, ENTITY_PROCESSOR_CAMPAIGNS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class EntityProcessorCampaignsPath extends EntityProcessorCampaigns implements Path<EntityProcessorCampaignsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> EntityProcessorCampaignsPath(Table<O> path, ForeignKey<O, EntityProcessorCampaignsRecord> childPath, InverseForeignKey<O, EntityProcessorCampaignsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private EntityProcessorCampaignsPath(Name alias, Table<EntityProcessorCampaignsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public EntityProcessorCampaignsPath as(String alias) {
            return new EntityProcessorCampaignsPath(DSL.name(alias), this);
        }

        @Override
        public EntityProcessorCampaignsPath as(Name alias) {
            return new EntityProcessorCampaignsPath(alias, this);
        }

        @Override
        public EntityProcessorCampaignsPath as(Table<?> alias) {
            return new EntityProcessorCampaignsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : EntityProcessor.ENTITY_PROCESSOR;
    }

    @Override
    public Identity<EntityProcessorCampaignsRecord, ULong> getIdentity() {
        return (Identity<EntityProcessorCampaignsRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<EntityProcessorCampaignsRecord> getPrimaryKey() {
        return Keys.KEY_ENTITY_PROCESSOR_CAMPAIGNS_PRIMARY;
    }

    @Override
    public List<UniqueKey<EntityProcessorCampaignsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ENTITY_PROCESSOR_CAMPAIGNS_UK1_CAMPAIGNS_ID);
    }

    @Override
    public List<ForeignKey<EntityProcessorCampaignsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_CAMPAIGNS_PRODUCT_ID);
    }

    private transient EntityProcessorProductsPath _entityProcessorProducts;

    /**
     * Get the implicit join path to the
     * <code>entity_processor.entity_processor_products</code> table.
     */
    public EntityProcessorProductsPath entityProcessorProducts() {
        if (_entityProcessorProducts == null)
            _entityProcessorProducts = new EntityProcessorProductsPath(this, Keys.FK1_CAMPAIGNS_PRODUCT_ID, null);

        return _entityProcessorProducts;
    }

    @Override
    public EntityProcessorCampaigns as(String alias) {
        return new EntityProcessorCampaigns(DSL.name(alias), this);
    }

    @Override
    public EntityProcessorCampaigns as(Name alias) {
        return new EntityProcessorCampaigns(alias, this);
    }

    @Override
    public EntityProcessorCampaigns as(Table<?> alias) {
        return new EntityProcessorCampaigns(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorCampaigns rename(String name) {
        return new EntityProcessorCampaigns(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorCampaigns rename(Name name) {
        return new EntityProcessorCampaigns(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorCampaigns rename(Table<?> name) {
        return new EntityProcessorCampaigns(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorCampaigns where(Condition condition) {
        return new EntityProcessorCampaigns(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorCampaigns where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorCampaigns where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorCampaigns where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorCampaigns where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorCampaigns where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorCampaigns where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorCampaigns where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorCampaigns whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorCampaigns whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
