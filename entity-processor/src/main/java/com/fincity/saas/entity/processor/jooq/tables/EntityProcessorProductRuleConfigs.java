/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.entity.processor.jooq.tables;


import com.fincity.saas.commons.jooq.convertor.JSONMysqlMapConvertor;
import com.fincity.saas.entity.processor.enums.rule.RuleType;
import com.fincity.saas.entity.processor.jooq.EntityProcessor;
import com.fincity.saas.entity.processor.jooq.Keys;
import com.fincity.saas.entity.processor.jooq.enums.EntityProcessorProductRuleConfigsRuleType;
import com.fincity.saas.entity.processor.jooq.tables.records.EntityProcessorProductRuleConfigsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.Map;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.AutoConverter;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EntityProcessorProductRuleConfigs extends TableImpl<EntityProcessorProductRuleConfigsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>entity_processor.entity_processor_product_rule_configs</code>
     */
    public static final EntityProcessorProductRuleConfigs ENTITY_PROCESSOR_PRODUCT_RULE_CONFIGS = new EntityProcessorProductRuleConfigs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EntityProcessorProductRuleConfigsRecord> getRecordType() {
        return EntityProcessorProductRuleConfigsRecord.class;
    }

    /**
     * The column
     * <code>entity_processor.entity_processor_product_rule_configs.ID</code>.
     * Primary key.
     */
    public final TableField<EntityProcessorProductRuleConfigsRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_rule_configs.APP_CODE</code>.
     * App Code on which this Product Rule Config was created.
     */
    public final TableField<EntityProcessorProductRuleConfigsRecord, String> APP_CODE = createField(DSL.name("APP_CODE"), SQLDataType.CHAR(64).nullable(false), this, "App Code on which this Product Rule Config was created.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_rule_configs.CLIENT_CODE</code>.
     * Client Code who created this Product Rule Config.
     */
    public final TableField<EntityProcessorProductRuleConfigsRecord, String> CLIENT_CODE = createField(DSL.name("CLIENT_CODE"), SQLDataType.CHAR(8).nullable(false), this, "Client Code who created this Product Rule Config.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_rule_configs.CODE</code>.
     * Unique Code to identify this row.
     */
    public final TableField<EntityProcessorProductRuleConfigsRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.CHAR(22).nullable(false), this, "Unique Code to identify this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_rule_configs.NAME</code>.
     * Name of the Product Rule Config.
     */
    public final TableField<EntityProcessorProductRuleConfigsRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(64).nullable(false), this, "Name of the Product Rule Config.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_rule_configs.DESCRIPTION</code>.
     * Description for the Product Rule Config.
     */
    public final TableField<EntityProcessorProductRuleConfigsRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "Description for the Product Rule Config.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_rule_configs.ADDED_BY_USER_ID</code>.
     * User which added this Product Rule Config.
     */
    public final TableField<EntityProcessorProductRuleConfigsRecord, ULong> ADDED_BY_USER_ID = createField(DSL.name("ADDED_BY_USER_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "User which added this Product Rule Config.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_rule_configs.ENTITY_ID</code>.
     * Product Rule ID related to this Product Rule Config.
     */
    public final TableField<EntityProcessorProductRuleConfigsRecord, ULong> ENTITY_ID = createField(DSL.name("ENTITY_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Product Rule ID related to this Product Rule Config.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_rule_configs.RULE_TYPE</code>.
     * Rule type for this Product Rule Config.
     */
    public final TableField<EntityProcessorProductRuleConfigsRecord, RuleType> RULE_TYPE = createField(DSL.name("RULE_TYPE"), SQLDataType.VARCHAR(5).nullable(false).asEnumDataType(EntityProcessorProductRuleConfigsRuleType.class), this, "Rule type for this Product Rule Config.", new AutoConverter<EntityProcessorProductRuleConfigsRuleType, RuleType>(EntityProcessorProductRuleConfigsRuleType.class, RuleType.class));

    /**
     * The column
     * <code>entity_processor.entity_processor_product_rule_configs.BREAK_AT_FIRST_MATCH</code>.
     * Flag to check if execution should break at first match.
     */
    public final TableField<EntityProcessorProductRuleConfigsRecord, Byte> BREAK_AT_FIRST_MATCH = createField(DSL.name("BREAK_AT_FIRST_MATCH"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Flag to check if execution should break at first match.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_rule_configs.EXECUTE_ONLY_IF_ALL_PREVIOUS_MATCH</code>.
     * Flag to check if execution should only happen if all previous rules
     * match.
     */
    public final TableField<EntityProcessorProductRuleConfigsRecord, Byte> EXECUTE_ONLY_IF_ALL_PREVIOUS_MATCH = createField(DSL.name("EXECUTE_ONLY_IF_ALL_PREVIOUS_MATCH"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Flag to check if execution should only happen if all previous rules match.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_rule_configs.EXECUTE_ONLY_IF_ALL_PREVIOUS_NOT_MATCH</code>.
     * Flag to check if execution should only happen if all previous rules do
     * not match.
     */
    public final TableField<EntityProcessorProductRuleConfigsRecord, Byte> EXECUTE_ONLY_IF_ALL_PREVIOUS_NOT_MATCH = createField(DSL.name("EXECUTE_ONLY_IF_ALL_PREVIOUS_NOT_MATCH"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Flag to check if execution should only happen if all previous rules do not match.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_rule_configs.CONTINUE_ON_NO_MATCH</code>.
     * Flag to check if execution should continue on no match.
     */
    public final TableField<EntityProcessorProductRuleConfigsRecord, Byte> CONTINUE_ON_NO_MATCH = createField(DSL.name("CONTINUE_ON_NO_MATCH"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "Flag to check if execution should continue on no match.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_rule_configs.RULES</code>.
     * Rules for this Product Rule Config.
     */
    public final TableField<EntityProcessorProductRuleConfigsRecord, Map> RULES = createField(DSL.name("RULES"), SQLDataType.JSON, this, "Rules for this Product Rule Config.", new JSONMysqlMapConvertor());

    /**
     * The column
     * <code>entity_processor.entity_processor_product_rule_configs.TEMP_ACTIVE</code>.
     * Temporary active flag for this product rule config.
     */
    public final TableField<EntityProcessorProductRuleConfigsRecord, Byte> TEMP_ACTIVE = createField(DSL.name("TEMP_ACTIVE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Temporary active flag for this product rule config.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_rule_configs.IS_ACTIVE</code>.
     * Flag to check if this product rule config is active or not.
     */
    public final TableField<EntityProcessorProductRuleConfigsRecord, Byte> IS_ACTIVE = createField(DSL.name("IS_ACTIVE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "Flag to check if this product rule config is active or not.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_rule_configs.CREATED_BY</code>.
     * ID of the user who created this row.
     */
    public final TableField<EntityProcessorProductRuleConfigsRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_rule_configs.CREATED_AT</code>.
     * Time when this row is created.
     */
    public final TableField<EntityProcessorProductRuleConfigsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_rule_configs.UPDATED_BY</code>.
     * ID of the user who updated this row.
     */
    public final TableField<EntityProcessorProductRuleConfigsRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_rule_configs.UPDATED_AT</code>.
     * Time when this row is updated.
     */
    public final TableField<EntityProcessorProductRuleConfigsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated.");

    private EntityProcessorProductRuleConfigs(Name alias, Table<EntityProcessorProductRuleConfigsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private EntityProcessorProductRuleConfigs(Name alias, Table<EntityProcessorProductRuleConfigsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased
     * <code>entity_processor.entity_processor_product_rule_configs</code> table
     * reference
     */
    public EntityProcessorProductRuleConfigs(String alias) {
        this(DSL.name(alias), ENTITY_PROCESSOR_PRODUCT_RULE_CONFIGS);
    }

    /**
     * Create an aliased
     * <code>entity_processor.entity_processor_product_rule_configs</code> table
     * reference
     */
    public EntityProcessorProductRuleConfigs(Name alias) {
        this(alias, ENTITY_PROCESSOR_PRODUCT_RULE_CONFIGS);
    }

    /**
     * Create a
     * <code>entity_processor.entity_processor_product_rule_configs</code> table
     * reference
     */
    public EntityProcessorProductRuleConfigs() {
        this(DSL.name("entity_processor_product_rule_configs"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : EntityProcessor.ENTITY_PROCESSOR;
    }

    @Override
    public Identity<EntityProcessorProductRuleConfigsRecord, ULong> getIdentity() {
        return (Identity<EntityProcessorProductRuleConfigsRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<EntityProcessorProductRuleConfigsRecord> getPrimaryKey() {
        return Keys.KEY_ENTITY_PROCESSOR_PRODUCT_RULE_CONFIGS_PRIMARY;
    }

    @Override
    public List<UniqueKey<EntityProcessorProductRuleConfigsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ENTITY_PROCESSOR_PRODUCT_RULE_CONFIGS_UK1_PRODUCT_RULE_CONFIGS_CODE);
    }

    @Override
    public EntityProcessorProductRuleConfigs as(String alias) {
        return new EntityProcessorProductRuleConfigs(DSL.name(alias), this);
    }

    @Override
    public EntityProcessorProductRuleConfigs as(Name alias) {
        return new EntityProcessorProductRuleConfigs(alias, this);
    }

    @Override
    public EntityProcessorProductRuleConfigs as(Table<?> alias) {
        return new EntityProcessorProductRuleConfigs(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorProductRuleConfigs rename(String name) {
        return new EntityProcessorProductRuleConfigs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorProductRuleConfigs rename(Name name) {
        return new EntityProcessorProductRuleConfigs(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorProductRuleConfigs rename(Table<?> name) {
        return new EntityProcessorProductRuleConfigs(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorProductRuleConfigs where(Condition condition) {
        return new EntityProcessorProductRuleConfigs(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorProductRuleConfigs where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorProductRuleConfigs where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorProductRuleConfigs where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorProductRuleConfigs where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorProductRuleConfigs where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorProductRuleConfigs where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorProductRuleConfigs where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorProductRuleConfigs whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorProductRuleConfigs whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
