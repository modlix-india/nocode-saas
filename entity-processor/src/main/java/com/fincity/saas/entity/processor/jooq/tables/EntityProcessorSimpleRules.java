/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.entity.processor.jooq.tables;


import com.fincity.saas.commons.jooq.convertor.jooq.converters.JSONtoClassConverter;
import com.fincity.saas.entity.processor.enums.rule.ComparisonOperator;
import com.fincity.saas.entity.processor.jooq.EntityProcessor;
import com.fincity.saas.entity.processor.jooq.Keys;
import com.fincity.saas.entity.processor.jooq.tables.EntityProcessorProductStageRules.EntityProcessorProductStageRulesPath;
import com.fincity.saas.entity.processor.jooq.tables.EntityProcessorProductTemplateRules.EntityProcessorProductTemplateRulesPath;
import com.fincity.saas.entity.processor.jooq.tables.EntityProcessorSimpleComplexRuleRelations.EntityProcessorSimpleComplexRuleRelationsPath;
import com.fincity.saas.entity.processor.jooq.tables.records.EntityProcessorSimpleRulesRecord;
import com.fincity.saas.entity.processor.model.common.ValueContainer;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.EnumConverter;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EntityProcessorSimpleRules extends TableImpl<EntityProcessorSimpleRulesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>entity_processor.entity_processor_simple_rules</code>
     */
    public static final EntityProcessorSimpleRules ENTITY_PROCESSOR_SIMPLE_RULES = new EntityProcessorSimpleRules();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EntityProcessorSimpleRulesRecord> getRecordType() {
        return EntityProcessorSimpleRulesRecord.class;
    }

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_rules.ID</code>. Primary
     * key.
     */
    public final TableField<EntityProcessorSimpleRulesRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key.");

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_rules.APP_CODE</code>. App
     * Code on which this Simple Rule was created.
     */
    public final TableField<EntityProcessorSimpleRulesRecord, String> APP_CODE = createField(DSL.name("APP_CODE"), SQLDataType.CHAR(64).nullable(false), this, "App Code on which this Simple Rule was created.");

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_rules.CLIENT_CODE</code>.
     * Client Code who created this Simple Rule.
     */
    public final TableField<EntityProcessorSimpleRulesRecord, String> CLIENT_CODE = createField(DSL.name("CLIENT_CODE"), SQLDataType.CHAR(8).nullable(false), this, "Client Code who created this Simple Rule.");

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_rules.CODE</code>. Unique
     * Code to identify this row.
     */
    public final TableField<EntityProcessorSimpleRulesRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.CHAR(22).nullable(false), this, "Unique Code to identify this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_rules.NAME</code>. Name of
     * the Simple Rule.
     */
    public final TableField<EntityProcessorSimpleRulesRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(64).nullable(false), this, "Name of the Simple Rule.");

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_rules.DESCRIPTION</code>.
     * Description for the Simple Rule.
     */
    public final TableField<EntityProcessorSimpleRulesRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "Description for the Simple Rule.");

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_rules.VERSION</code>.
     * Version of this Simple Rule.
     */
    public final TableField<EntityProcessorSimpleRulesRecord, Integer> VERSION = createField(DSL.name("VERSION"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("1", SQLDataType.INTEGER)), this, "Version of this Simple Rule.");

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_rules.PRODUCT_TEMPLATE_RULE_ID</code>.
     * Product Template Rule ID related to this Simple Rule.
     */
    public final TableField<EntityProcessorSimpleRulesRecord, ULong> PRODUCT_TEMPLATE_RULE_ID = createField(DSL.name("PRODUCT_TEMPLATE_RULE_ID"), SQLDataType.BIGINTUNSIGNED, this, "Product Template Rule ID related to this Simple Rule.");

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_rules.PRODUCT_STAGE_RULE_ID</code>.
     * Product Stage Rule ID related to this Simple Rule.
     */
    public final TableField<EntityProcessorSimpleRulesRecord, ULong> PRODUCT_STAGE_RULE_ID = createField(DSL.name("PRODUCT_STAGE_RULE_ID"), SQLDataType.BIGINTUNSIGNED, this, "Product Stage Rule ID related to this Simple Rule.");

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_rules.NEGATE</code>. Flag
     * to check if this Simple Rule is negative.
     */
    public final TableField<EntityProcessorSimpleRulesRecord, Byte> NEGATE = createField(DSL.name("NEGATE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Flag to check if this Simple Rule is negative.");

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_rules.HAS_PARENT</code>.
     * Flag to tell if this rule has a complex parent or not.
     */
    public final TableField<EntityProcessorSimpleRulesRecord, Byte> HAS_PARENT = createField(DSL.name("HAS_PARENT"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "Flag to tell if this rule has a complex parent or not.");

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_rules.FIELD</code>. Field
     * name for this Simple Rule.
     */
    public final TableField<EntityProcessorSimpleRulesRecord, String> FIELD = createField(DSL.name("FIELD"), SQLDataType.VARCHAR(255), this, "Field name for this Simple Rule.");

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_rules.COMPARISON_OPERATOR</code>.
     * Operator for this Simple Rule.
     */
    public final TableField<EntityProcessorSimpleRulesRecord, ComparisonOperator> COMPARISON_OPERATOR = createField(DSL.name("COMPARISON_OPERATOR"), SQLDataType.VARCHAR(18).nullable(false).defaultValue(DSL.inline("EQUALS", SQLDataType.VARCHAR)), this, "Operator for this Simple Rule.", new EnumConverter<String, ComparisonOperator>(String.class, ComparisonOperator.class));

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_rules.VALUE</code>. Value
     * for this Simple Rule.
     */
    public final TableField<EntityProcessorSimpleRulesRecord, ValueContainer> VALUE = createField(DSL.name("VALUE"), SQLDataType.JSON, this, "Value for this Simple Rule.", new JSONtoClassConverter<JSON, ValueContainer>(JSON.class, ValueContainer.class));

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_rules.IS_VALUE_FIELD</code>.
     * Flag to check if value is a field.
     */
    public final TableField<EntityProcessorSimpleRulesRecord, Byte> IS_VALUE_FIELD = createField(DSL.name("IS_VALUE_FIELD"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Flag to check if value is a field.");

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_rules.IS_TO_VALUE_FIELD</code>.
     * Flag to check if to value is a field.
     */
    public final TableField<EntityProcessorSimpleRulesRecord, Byte> IS_TO_VALUE_FIELD = createField(DSL.name("IS_TO_VALUE_FIELD"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Flag to check if to value is a field.");

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_rules.MATCH_OPERATOR</code>.
     * Operator for this Simple Rule.
     */
    public final TableField<EntityProcessorSimpleRulesRecord, ComparisonOperator> MATCH_OPERATOR = createField(DSL.name("MATCH_OPERATOR"), SQLDataType.VARCHAR(18).nullable(false).defaultValue(DSL.inline("EQUALS", SQLDataType.VARCHAR)), this, "Operator for this Simple Rule.", new EnumConverter<String, ComparisonOperator>(String.class, ComparisonOperator.class));

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_rules.TEMP_ACTIVE</code>.
     * Temporary active flag for this Simple Rule.
     */
    public final TableField<EntityProcessorSimpleRulesRecord, Byte> TEMP_ACTIVE = createField(DSL.name("TEMP_ACTIVE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Temporary active flag for this Simple Rule.");

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_rules.IS_ACTIVE</code>.
     * Flag to check if this Simple Rule is active or not.
     */
    public final TableField<EntityProcessorSimpleRulesRecord, Byte> IS_ACTIVE = createField(DSL.name("IS_ACTIVE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "Flag to check if this Simple Rule is active or not.");

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_rules.CREATED_BY</code>.
     * ID of the user who created this row.
     */
    public final TableField<EntityProcessorSimpleRulesRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_rules.CREATED_AT</code>.
     * Time when this row is created.
     */
    public final TableField<EntityProcessorSimpleRulesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created.");

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_rules.UPDATED_BY</code>.
     * ID of the user who updated this row.
     */
    public final TableField<EntityProcessorSimpleRulesRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_simple_rules.UPDATED_AT</code>.
     * Time when this row is updated.
     */
    public final TableField<EntityProcessorSimpleRulesRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated.");

    private EntityProcessorSimpleRules(Name alias, Table<EntityProcessorSimpleRulesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private EntityProcessorSimpleRules(Name alias, Table<EntityProcessorSimpleRulesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased
     * <code>entity_processor.entity_processor_simple_rules</code> table
     * reference
     */
    public EntityProcessorSimpleRules(String alias) {
        this(DSL.name(alias), ENTITY_PROCESSOR_SIMPLE_RULES);
    }

    /**
     * Create an aliased
     * <code>entity_processor.entity_processor_simple_rules</code> table
     * reference
     */
    public EntityProcessorSimpleRules(Name alias) {
        this(alias, ENTITY_PROCESSOR_SIMPLE_RULES);
    }

    /**
     * Create a <code>entity_processor.entity_processor_simple_rules</code>
     * table reference
     */
    public EntityProcessorSimpleRules() {
        this(DSL.name("entity_processor_simple_rules"), null);
    }

    public <O extends Record> EntityProcessorSimpleRules(Table<O> path, ForeignKey<O, EntityProcessorSimpleRulesRecord> childPath, InverseForeignKey<O, EntityProcessorSimpleRulesRecord> parentPath) {
        super(path, childPath, parentPath, ENTITY_PROCESSOR_SIMPLE_RULES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class EntityProcessorSimpleRulesPath extends EntityProcessorSimpleRules implements Path<EntityProcessorSimpleRulesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> EntityProcessorSimpleRulesPath(Table<O> path, ForeignKey<O, EntityProcessorSimpleRulesRecord> childPath, InverseForeignKey<O, EntityProcessorSimpleRulesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private EntityProcessorSimpleRulesPath(Name alias, Table<EntityProcessorSimpleRulesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public EntityProcessorSimpleRulesPath as(String alias) {
            return new EntityProcessorSimpleRulesPath(DSL.name(alias), this);
        }

        @Override
        public EntityProcessorSimpleRulesPath as(Name alias) {
            return new EntityProcessorSimpleRulesPath(alias, this);
        }

        @Override
        public EntityProcessorSimpleRulesPath as(Table<?> alias) {
            return new EntityProcessorSimpleRulesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : EntityProcessor.ENTITY_PROCESSOR;
    }

    @Override
    public Identity<EntityProcessorSimpleRulesRecord, ULong> getIdentity() {
        return (Identity<EntityProcessorSimpleRulesRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<EntityProcessorSimpleRulesRecord> getPrimaryKey() {
        return Keys.KEY_ENTITY_PROCESSOR_SIMPLE_RULES_PRIMARY;
    }

    @Override
    public List<UniqueKey<EntityProcessorSimpleRulesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ENTITY_PROCESSOR_SIMPLE_RULES_UK1_SIMPLE_RULES_CODE);
    }

    @Override
    public List<ForeignKey<EntityProcessorSimpleRulesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_SIMPLE_RULES_PRODUCT_TEMPLATE_RULE_ID, Keys.FK2_SIMPLE_RULES_PRODUCT_STAGE_RULE_ID);
    }

    private transient EntityProcessorProductTemplateRulesPath _entityProcessorProductTemplateRules;

    /**
     * Get the implicit join path to the
     * <code>entity_processor.entity_processor_product_template_rules</code>
     * table.
     */
    public EntityProcessorProductTemplateRulesPath entityProcessorProductTemplateRules() {
        if (_entityProcessorProductTemplateRules == null)
            _entityProcessorProductTemplateRules = new EntityProcessorProductTemplateRulesPath(this, Keys.FK1_SIMPLE_RULES_PRODUCT_TEMPLATE_RULE_ID, null);

        return _entityProcessorProductTemplateRules;
    }

    private transient EntityProcessorProductStageRulesPath _entityProcessorProductStageRules;

    /**
     * Get the implicit join path to the
     * <code>entity_processor.entity_processor_product_stage_rules</code> table.
     */
    public EntityProcessorProductStageRulesPath entityProcessorProductStageRules() {
        if (_entityProcessorProductStageRules == null)
            _entityProcessorProductStageRules = new EntityProcessorProductStageRulesPath(this, Keys.FK2_SIMPLE_RULES_PRODUCT_STAGE_RULE_ID, null);

        return _entityProcessorProductStageRules;
    }

    private transient EntityProcessorSimpleComplexRuleRelationsPath _entityProcessorSimpleComplexRuleRelations;

    /**
     * Get the implicit to-many join path to the
     * <code>entity_processor.entity_processor_simple_complex_rule_relations</code>
     * table
     */
    public EntityProcessorSimpleComplexRuleRelationsPath entityProcessorSimpleComplexRuleRelations() {
        if (_entityProcessorSimpleComplexRuleRelations == null)
            _entityProcessorSimpleComplexRuleRelations = new EntityProcessorSimpleComplexRuleRelationsPath(this, null, Keys.FK2_RELATIONS_SIMPLE_CONDITION_ID.getInverseKey());

        return _entityProcessorSimpleComplexRuleRelations;
    }

    @Override
    public EntityProcessorSimpleRules as(String alias) {
        return new EntityProcessorSimpleRules(DSL.name(alias), this);
    }

    @Override
    public EntityProcessorSimpleRules as(Name alias) {
        return new EntityProcessorSimpleRules(alias, this);
    }

    @Override
    public EntityProcessorSimpleRules as(Table<?> alias) {
        return new EntityProcessorSimpleRules(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorSimpleRules rename(String name) {
        return new EntityProcessorSimpleRules(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorSimpleRules rename(Name name) {
        return new EntityProcessorSimpleRules(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorSimpleRules rename(Table<?> name) {
        return new EntityProcessorSimpleRules(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorSimpleRules where(Condition condition) {
        return new EntityProcessorSimpleRules(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorSimpleRules where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorSimpleRules where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorSimpleRules where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorSimpleRules where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorSimpleRules where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorSimpleRules where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorSimpleRules where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorSimpleRules whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorSimpleRules whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
