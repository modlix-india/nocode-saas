/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.entity.processor.jooq.tables.records;


import com.fincity.saas.entity.processor.jooq.tables.EntityProcessorFlowSchema;

import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EntityProcessorFlowSchemaRecord extends UpdatableRecordImpl<EntityProcessorFlowSchemaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>entity_processor.entity_processor_flow_schema.ID</code>.
     * Primary key.
     */
    public EntityProcessorFlowSchemaRecord setId(ULong value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>entity_processor.entity_processor_flow_schema.ID</code>.
     * Primary key.
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_flow_schema.APP_CODE</code>. App
     * Code on which this flow Schema was created.
     */
    public EntityProcessorFlowSchemaRecord setAppCode(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_flow_schema.APP_CODE</code>. App
     * Code on which this flow Schema was created.
     */
    public String getAppCode() {
        return (String) get(1);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_flow_schema.CLIENT_CODE</code>.
     * Client Code who added this flow Schema.
     */
    public EntityProcessorFlowSchemaRecord setClientCode(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_flow_schema.CLIENT_CODE</code>.
     * Client Code who added this flow Schema.
     */
    public String getClientCode() {
        return (String) get(2);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_flow_schema.DB_SCHEMA</code>.
     * Schema of DB for this flow Schema.
     */
    public EntityProcessorFlowSchemaRecord setDbSchema(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_flow_schema.DB_SCHEMA</code>.
     * Schema of DB for this flow Schema.
     */
    public String getDbSchema() {
        return (String) get(3);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_flow_schema.DB_TABLE_NAME</code>.
     * Name of the table in this this entity is present for flow Schema.
     */
    public EntityProcessorFlowSchemaRecord setDbTableName(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_flow_schema.DB_TABLE_NAME</code>.
     * Name of the table in this this entity is present for flow Schema.
     */
    public String getDbTableName() {
        return (String) get(4);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_flow_schema.DB_ENTITY_PK_ID</code>.
     * ID for Related entity of table for which this flow schema is created.
     */
    public EntityProcessorFlowSchemaRecord setDbEntityPkId(ULong value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_flow_schema.DB_ENTITY_PK_ID</code>.
     * ID for Related entity of table for which this flow schema is created.
     */
    public ULong getDbEntityPkId() {
        return (ULong) get(5);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_flow_schema.TEMP_ACTIVE</code>.
     * Temporary active flag for this partner.
     */
    public EntityProcessorFlowSchemaRecord setTempActive(Boolean value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_flow_schema.TEMP_ACTIVE</code>.
     * Temporary active flag for this partner.
     */
    public Boolean getTempActive() {
        return (Boolean) get(6);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_flow_schema.IS_ACTIVE</code>.
     * Flag to check if this partner is active or not.
     */
    public EntityProcessorFlowSchemaRecord setIsActive(Boolean value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_flow_schema.IS_ACTIVE</code>.
     * Flag to check if this partner is active or not.
     */
    public Boolean getIsActive() {
        return (Boolean) get(7);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_flow_schema.CREATED_BY</code>. ID
     * of the user who created this row.
     */
    public EntityProcessorFlowSchemaRecord setCreatedBy(ULong value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_flow_schema.CREATED_BY</code>. ID
     * of the user who created this row.
     */
    public ULong getCreatedBy() {
        return (ULong) get(8);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_flow_schema.CREATED_AT</code>.
     * Time when this row is created.
     */
    public EntityProcessorFlowSchemaRecord setCreatedAt(LocalDateTime value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_flow_schema.CREATED_AT</code>.
     * Time when this row is created.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(9);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_flow_schema.UPDATED_BY</code>. ID
     * of the user who updated this row.
     */
    public EntityProcessorFlowSchemaRecord setUpdatedBy(ULong value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_flow_schema.UPDATED_BY</code>. ID
     * of the user who updated this row.
     */
    public ULong getUpdatedBy() {
        return (ULong) get(10);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_flow_schema.UPDATED_AT</code>.
     * Time when this row is updated.
     */
    public EntityProcessorFlowSchemaRecord setUpdatedAt(LocalDateTime value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_flow_schema.UPDATED_AT</code>.
     * Time when this row is updated.
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(11);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached EntityProcessorFlowSchemaRecord
     */
    public EntityProcessorFlowSchemaRecord() {
        super(EntityProcessorFlowSchema.ENTITY_PROCESSOR_FLOW_SCHEMA);
    }

    /**
     * Create a detached, initialised EntityProcessorFlowSchemaRecord
     */
    public EntityProcessorFlowSchemaRecord(ULong id, String appCode, String clientCode, String dbSchema, String dbTableName, ULong dbEntityPkId, Boolean tempActive, Boolean isActive, ULong createdBy, LocalDateTime createdAt, ULong updatedBy, LocalDateTime updatedAt) {
        super(EntityProcessorFlowSchema.ENTITY_PROCESSOR_FLOW_SCHEMA);

        setId(id);
        setAppCode(appCode);
        setClientCode(clientCode);
        setDbSchema(dbSchema);
        setDbTableName(dbTableName);
        setDbEntityPkId(dbEntityPkId);
        setTempActive(tempActive);
        setIsActive(isActive);
        setCreatedBy(createdBy);
        setCreatedAt(createdAt);
        setUpdatedBy(updatedBy);
        setUpdatedAt(updatedAt);
        resetChangedOnNotNull();
    }
}
