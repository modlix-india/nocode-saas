/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.entity.processor.jooq.tables;


import com.fincity.saas.entity.processor.jooq.EntityProcessor;
import com.fincity.saas.entity.processor.jooq.Keys;
import com.fincity.saas.entity.processor.jooq.tables.records.EntityProcessorTicketsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EntityProcessorTickets extends TableImpl<EntityProcessorTicketsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>entity_processor.entity_processor_tickets</code>
     */
    public static final EntityProcessorTickets ENTITY_PROCESSOR_TICKETS = new EntityProcessorTickets();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EntityProcessorTicketsRecord> getRecordType() {
        return EntityProcessorTicketsRecord.class;
    }

    /**
     * The column <code>entity_processor.entity_processor_tickets.ID</code>.
     * Primary key.
     */
    public final TableField<EntityProcessorTicketsRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key.");

    /**
     * The column
     * <code>entity_processor.entity_processor_tickets.APP_CODE</code>. App Code
     * on which this notification was sent.
     */
    public final TableField<EntityProcessorTicketsRecord, String> APP_CODE = createField(DSL.name("APP_CODE"), SQLDataType.CHAR(64).nullable(false), this, "App Code on which this notification was sent.");

    /**
     * The column
     * <code>entity_processor.entity_processor_tickets.CLIENT_CODE</code>.
     * Client Code to whom this notification we sent.
     */
    public final TableField<EntityProcessorTicketsRecord, String> CLIENT_CODE = createField(DSL.name("CLIENT_CODE"), SQLDataType.CHAR(8).nullable(false), this, "Client Code to whom this notification we sent.");

    /**
     * The column
     * <code>entity_processor.entity_processor_tickets.VERSION</code>. Version
     * of this row.
     */
    public final TableField<EntityProcessorTicketsRecord, ULong> VERSION = createField(DSL.name("VERSION"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("1", SQLDataType.BIGINTUNSIGNED)), this, "Version of this row.");

    /**
     * The column <code>entity_processor.entity_processor_tickets.CODE</code>.
     * Unique Code to identify this row.
     */
    public final TableField<EntityProcessorTicketsRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.CHAR(22).nullable(false), this, "Unique Code to identify this row.");

    /**
     * The column <code>entity_processor.entity_processor_tickets.NAME</code>.
     * Name of the Ticket. Ticket can be anything which will have a single
     * owner. For Example, Opportunity is a ticket of Lead , Task is a ticket of
     * Epic, Lead is ticket of Account.
     */
    public final TableField<EntityProcessorTicketsRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(512).nullable(false), this, "Name of the Ticket. Ticket can be anything which will have a single owner. For Example, Opportunity is a ticket of Lead , Task is a ticket of Epic, Lead is ticket of Account.");

    /**
     * The column
     * <code>entity_processor.entity_processor_tickets.DESCRIPTION</code>.
     * Description for the ticket.
     */
    public final TableField<EntityProcessorTicketsRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "Description for the ticket.");

    /**
     * The column
     * <code>entity_processor.entity_processor_tickets.ADDED_BY_USER_ID</code>.
     * User which added this ticket.
     */
    public final TableField<EntityProcessorTicketsRecord, ULong> ADDED_BY_USER_ID = createField(DSL.name("ADDED_BY_USER_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "User which added this ticket.");

    /**
     * The column
     * <code>entity_processor.entity_processor_tickets.CURRENT_USER_ID</code>.
     * User to which this ticket is assigned.
     */
    public final TableField<EntityProcessorTicketsRecord, ULong> CURRENT_USER_ID = createField(DSL.name("CURRENT_USER_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "User to which this ticket is assigned.");

    /**
     * The column <code>entity_processor.entity_processor_tickets.STAGE</code>.
     * Status for this ticket.
     */
    public final TableField<EntityProcessorTicketsRecord, ULong> STAGE = createField(DSL.name("STAGE"), SQLDataType.BIGINTUNSIGNED, this, "Status for this ticket.");

    /**
     * The column <code>entity_processor.entity_processor_tickets.STATUS</code>.
     * Sub Status for this ticket.
     */
    public final TableField<EntityProcessorTicketsRecord, ULong> STATUS = createField(DSL.name("STATUS"), SQLDataType.BIGINTUNSIGNED, this, "Sub Status for this ticket.");

    /**
     * The column
     * <code>entity_processor.entity_processor_tickets.MODEL_ID</code>. Model
     * related to this ticket.
     */
    public final TableField<EntityProcessorTicketsRecord, ULong> MODEL_ID = createField(DSL.name("MODEL_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Model related to this ticket.");

    /**
     * The column
     * <code>entity_processor.entity_processor_tickets.DIAL_CODE</code>. Dial
     * code of the phone number this owner has.
     */
    public final TableField<EntityProcessorTicketsRecord, Short> DIAL_CODE = createField(DSL.name("DIAL_CODE"), SQLDataType.SMALLINT.defaultValue(DSL.inline("91", SQLDataType.SMALLINT)), this, "Dial code of the phone number this owner has.");

    /**
     * The column
     * <code>entity_processor.entity_processor_tickets.PHONE_NUMBER</code>.
     * Phone number related to this owner.
     */
    public final TableField<EntityProcessorTicketsRecord, String> PHONE_NUMBER = createField(DSL.name("PHONE_NUMBER"), SQLDataType.CHAR(15), this, "Phone number related to this owner.");

    /**
     * The column <code>entity_processor.entity_processor_tickets.EMAIL</code>.
     * Email related to this ticket.
     */
    public final TableField<EntityProcessorTicketsRecord, String> EMAIL = createField(DSL.name("EMAIL"), SQLDataType.VARCHAR(512), this, "Email related to this ticket.");

    /**
     * The column <code>entity_processor.entity_processor_tickets.SOURCE</code>.
     * Name of source form where we get this ticket.
     */
    public final TableField<EntityProcessorTicketsRecord, String> SOURCE = createField(DSL.name("SOURCE"), SQLDataType.CHAR(32).nullable(false), this, "Name of source form where we get this ticket.");

    /**
     * The column
     * <code>entity_processor.entity_processor_tickets.SUB_SOURCE</code>. Name
     * of sub source of source form where we get this ticket.
     */
    public final TableField<EntityProcessorTicketsRecord, String> SUB_SOURCE = createField(DSL.name("SUB_SOURCE"), SQLDataType.CHAR(32), this, "Name of sub source of source form where we get this ticket.");

    /**
     * The column
     * <code>entity_processor.entity_processor_tickets.PRODUCT_ID</code>.
     * Product related to this ticket.
     */
    public final TableField<EntityProcessorTicketsRecord, ULong> PRODUCT_ID = createField(DSL.name("PRODUCT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Product related to this ticket.");

    /**
     * The column
     * <code>entity_processor.entity_processor_tickets.TEMP_ACTIVE</code>.
     * Temporary active flag for this product.
     */
    public final TableField<EntityProcessorTicketsRecord, Byte> TEMP_ACTIVE = createField(DSL.name("TEMP_ACTIVE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Temporary active flag for this product.");

    /**
     * The column
     * <code>entity_processor.entity_processor_tickets.IS_ACTIVE</code>. Flag to
     * check if this product is active or not.
     */
    public final TableField<EntityProcessorTicketsRecord, Byte> IS_ACTIVE = createField(DSL.name("IS_ACTIVE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "Flag to check if this product is active or not.");

    /**
     * The column
     * <code>entity_processor.entity_processor_tickets.CREATED_BY</code>. ID of
     * the user who created this row.
     */
    public final TableField<EntityProcessorTicketsRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_tickets.CREATED_AT</code>. Time
     * when this row is created.
     */
    public final TableField<EntityProcessorTicketsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created.");

    /**
     * The column
     * <code>entity_processor.entity_processor_tickets.UPDATED_BY</code>. ID of
     * the user who updated this row.
     */
    public final TableField<EntityProcessorTicketsRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_tickets.UPDATED_AT</code>. Time
     * when this row is updated.
     */
    public final TableField<EntityProcessorTicketsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated.");

    private EntityProcessorTickets(Name alias, Table<EntityProcessorTicketsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private EntityProcessorTickets(Name alias, Table<EntityProcessorTicketsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>entity_processor.entity_processor_tickets</code>
     * table reference
     */
    public EntityProcessorTickets(String alias) {
        this(DSL.name(alias), ENTITY_PROCESSOR_TICKETS);
    }

    /**
     * Create an aliased <code>entity_processor.entity_processor_tickets</code>
     * table reference
     */
    public EntityProcessorTickets(Name alias) {
        this(alias, ENTITY_PROCESSOR_TICKETS);
    }

    /**
     * Create a <code>entity_processor.entity_processor_tickets</code> table
     * reference
     */
    public EntityProcessorTickets() {
        this(DSL.name("entity_processor_tickets"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : EntityProcessor.ENTITY_PROCESSOR;
    }

    @Override
    public Identity<EntityProcessorTicketsRecord, ULong> getIdentity() {
        return (Identity<EntityProcessorTicketsRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<EntityProcessorTicketsRecord> getPrimaryKey() {
        return Keys.KEY_ENTITY_PROCESSOR_TICKETS_PRIMARY;
    }

    @Override
    public List<UniqueKey<EntityProcessorTicketsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ENTITY_PROCESSOR_TICKETS_UK1_TICKETS_CODE);
    }

    @Override
    public EntityProcessorTickets as(String alias) {
        return new EntityProcessorTickets(DSL.name(alias), this);
    }

    @Override
    public EntityProcessorTickets as(Name alias) {
        return new EntityProcessorTickets(alias, this);
    }

    @Override
    public EntityProcessorTickets as(Table<?> alias) {
        return new EntityProcessorTickets(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorTickets rename(String name) {
        return new EntityProcessorTickets(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorTickets rename(Name name) {
        return new EntityProcessorTickets(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorTickets rename(Table<?> name) {
        return new EntityProcessorTickets(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorTickets where(Condition condition) {
        return new EntityProcessorTickets(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorTickets where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorTickets where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorTickets where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorTickets where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorTickets where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorTickets where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorTickets where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorTickets whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorTickets whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
