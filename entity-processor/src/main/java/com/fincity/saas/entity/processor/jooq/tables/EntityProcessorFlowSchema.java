/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.entity.processor.jooq.tables;


import com.fincity.saas.entity.processor.jooq.EntityProcessor;
import com.fincity.saas.entity.processor.jooq.Keys;
import com.fincity.saas.entity.processor.jooq.tables.records.EntityProcessorFlowSchemaRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EntityProcessorFlowSchema extends TableImpl<EntityProcessorFlowSchemaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>entity_processor.entity_processor_flow_schema</code>
     */
    public static final EntityProcessorFlowSchema ENTITY_PROCESSOR_FLOW_SCHEMA = new EntityProcessorFlowSchema();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EntityProcessorFlowSchemaRecord> getRecordType() {
        return EntityProcessorFlowSchemaRecord.class;
    }

    /**
     * The column <code>entity_processor.entity_processor_flow_schema.ID</code>.
     * Primary key.
     */
    public final TableField<EntityProcessorFlowSchemaRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key.");

    /**
     * The column
     * <code>entity_processor.entity_processor_flow_schema.APP_CODE</code>. App
     * Code on which this flow Schema was created.
     */
    public final TableField<EntityProcessorFlowSchemaRecord, String> APP_CODE = createField(DSL.name("APP_CODE"), SQLDataType.CHAR(64).nullable(false), this, "App Code on which this flow Schema was created.");

    /**
     * The column
     * <code>entity_processor.entity_processor_flow_schema.CLIENT_CODE</code>.
     * Client Code who added this flow Schema.
     */
    public final TableField<EntityProcessorFlowSchemaRecord, String> CLIENT_CODE = createField(DSL.name("CLIENT_CODE"), SQLDataType.CHAR(8).nullable(false), this, "Client Code who added this flow Schema.");

    /**
     * The column
     * <code>entity_processor.entity_processor_flow_schema.ENTITY_NAME</code>.
     * Name of the entity for which this flow Schema is created.
     */
    public final TableField<EntityProcessorFlowSchemaRecord, String> ENTITY_NAME = createField(DSL.name("ENTITY_NAME"), SQLDataType.CHAR(128).nullable(false), this, "Name of the entity for which this flow Schema is created.");

    /**
     * The column
     * <code>entity_processor.entity_processor_flow_schema.DB_SCHEMA_NAME</code>.
     * Schema of DB for this flow Schema.
     */
    public final TableField<EntityProcessorFlowSchemaRecord, String> DB_SCHEMA_NAME = createField(DSL.name("DB_SCHEMA_NAME"), SQLDataType.CHAR(22).nullable(false).defaultValue(DSL.inline("entity_processor", SQLDataType.CHAR)), this, "Schema of DB for this flow Schema.");

    /**
     * The column
     * <code>entity_processor.entity_processor_flow_schema.DB_TABLE_NAME</code>.
     * Name of the table in this this entity is present for flow Schema.
     */
    public final TableField<EntityProcessorFlowSchemaRecord, String> DB_TABLE_NAME = createField(DSL.name("DB_TABLE_NAME"), SQLDataType.CHAR(128).nullable(false), this, "Name of the table in this this entity is present for flow Schema.");

    /**
     * The column
     * <code>entity_processor.entity_processor_flow_schema.DB_ENTITY_PK_FIELD_NAME</code>.
     * Name of the field in this table which is primary key.
     */
    public final TableField<EntityProcessorFlowSchemaRecord, String> DB_ENTITY_PK_FIELD_NAME = createField(DSL.name("DB_ENTITY_PK_FIELD_NAME"), SQLDataType.CHAR(128).nullable(false), this, "Name of the field in this table which is primary key.");

    /**
     * The column
     * <code>entity_processor.entity_processor_flow_schema.DB_ENTITY_PK_ID</code>.
     * ID for Related entity of table for which this flow schema is created.
     */
    public final TableField<EntityProcessorFlowSchemaRecord, ULong> DB_ENTITY_PK_ID = createField(DSL.name("DB_ENTITY_PK_ID"), SQLDataType.BIGINTUNSIGNED, this, "ID for Related entity of table for which this flow schema is created.");

    /**
     * The column
     * <code>entity_processor.entity_processor_flow_schema.SCHEMA_JSON</code>.
     * Schema for this flow Schema.
     */
    public final TableField<EntityProcessorFlowSchemaRecord, JSON> SCHEMA_JSON = createField(DSL.name("SCHEMA_JSON"), SQLDataType.JSON.nullable(false), this, "Schema for this flow Schema.");

    /**
     * The column
     * <code>entity_processor.entity_processor_flow_schema.TEMP_ACTIVE</code>.
     * Temporary active flag for this partner.
     */
    public final TableField<EntityProcessorFlowSchemaRecord, Boolean> TEMP_ACTIVE = createField(DSL.name("TEMP_ACTIVE"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "Temporary active flag for this partner.");

    /**
     * The column
     * <code>entity_processor.entity_processor_flow_schema.IS_ACTIVE</code>.
     * Flag to check if this partner is active or not.
     */
    public final TableField<EntityProcessorFlowSchemaRecord, Boolean> IS_ACTIVE = createField(DSL.name("IS_ACTIVE"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("1", SQLDataType.BOOLEAN)), this, "Flag to check if this partner is active or not.");

    /**
     * The column
     * <code>entity_processor.entity_processor_flow_schema.CREATED_BY</code>. ID
     * of the user who created this row.
     */
    public final TableField<EntityProcessorFlowSchemaRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_flow_schema.CREATED_AT</code>.
     * Time when this row is created.
     */
    public final TableField<EntityProcessorFlowSchemaRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created.");

    /**
     * The column
     * <code>entity_processor.entity_processor_flow_schema.UPDATED_BY</code>. ID
     * of the user who updated this row.
     */
    public final TableField<EntityProcessorFlowSchemaRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_flow_schema.UPDATED_AT</code>.
     * Time when this row is updated.
     */
    public final TableField<EntityProcessorFlowSchemaRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated.");

    private EntityProcessorFlowSchema(Name alias, Table<EntityProcessorFlowSchemaRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private EntityProcessorFlowSchema(Name alias, Table<EntityProcessorFlowSchemaRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased
     * <code>entity_processor.entity_processor_flow_schema</code> table
     * reference
     */
    public EntityProcessorFlowSchema(String alias) {
        this(DSL.name(alias), ENTITY_PROCESSOR_FLOW_SCHEMA);
    }

    /**
     * Create an aliased
     * <code>entity_processor.entity_processor_flow_schema</code> table
     * reference
     */
    public EntityProcessorFlowSchema(Name alias) {
        this(alias, ENTITY_PROCESSOR_FLOW_SCHEMA);
    }

    /**
     * Create a <code>entity_processor.entity_processor_flow_schema</code> table
     * reference
     */
    public EntityProcessorFlowSchema() {
        this(DSL.name("entity_processor_flow_schema"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : EntityProcessor.ENTITY_PROCESSOR;
    }

    @Override
    public Identity<EntityProcessorFlowSchemaRecord, ULong> getIdentity() {
        return (Identity<EntityProcessorFlowSchemaRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<EntityProcessorFlowSchemaRecord> getPrimaryKey() {
        return Keys.KEY_ENTITY_PROCESSOR_FLOW_SCHEMA_PRIMARY;
    }

    @Override
    public List<UniqueKey<EntityProcessorFlowSchemaRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ENTITY_PROCESSOR_FLOW_SCHEMA_UK1_FLOW_SCHEMA_AC_CC_S_TN_EPK);
    }

    @Override
    public EntityProcessorFlowSchema as(String alias) {
        return new EntityProcessorFlowSchema(DSL.name(alias), this);
    }

    @Override
    public EntityProcessorFlowSchema as(Name alias) {
        return new EntityProcessorFlowSchema(alias, this);
    }

    @Override
    public EntityProcessorFlowSchema as(Table<?> alias) {
        return new EntityProcessorFlowSchema(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorFlowSchema rename(String name) {
        return new EntityProcessorFlowSchema(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorFlowSchema rename(Name name) {
        return new EntityProcessorFlowSchema(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorFlowSchema rename(Table<?> name) {
        return new EntityProcessorFlowSchema(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorFlowSchema where(Condition condition) {
        return new EntityProcessorFlowSchema(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorFlowSchema where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorFlowSchema where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorFlowSchema where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorFlowSchema where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorFlowSchema where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorFlowSchema where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorFlowSchema where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorFlowSchema whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorFlowSchema whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
