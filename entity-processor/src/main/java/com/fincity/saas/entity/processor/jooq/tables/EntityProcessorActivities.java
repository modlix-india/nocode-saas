/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.entity.processor.jooq.tables;


import com.fincity.saas.entity.processor.enums.ActivityAction;
import com.fincity.saas.entity.processor.enums.EntitySeries;
import com.fincity.saas.entity.processor.jooq.EntityProcessor;
import com.fincity.saas.entity.processor.jooq.Keys;
import com.fincity.saas.entity.processor.jooq.enums.EntityProcessorActivitiesActivityAction;
import com.fincity.saas.entity.processor.jooq.enums.EntityProcessorActivitiesObjectEntitySeries;
import com.fincity.saas.entity.processor.jooq.tables.EntityProcessorTickets.EntityProcessorTicketsPath;
import com.fincity.saas.entity.processor.jooq.tables.records.EntityProcessorActivitiesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.EnumConverter;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EntityProcessorActivities extends TableImpl<EntityProcessorActivitiesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>entity_processor.entity_processor_activities</code>
     */
    public static final EntityProcessorActivities ENTITY_PROCESSOR_ACTIVITIES = new EntityProcessorActivities();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EntityProcessorActivitiesRecord> getRecordType() {
        return EntityProcessorActivitiesRecord.class;
    }

    /**
     * The column <code>entity_processor.entity_processor_activities.ID</code>.
     * Primary key.
     */
    public final TableField<EntityProcessorActivitiesRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key.");

    /**
     * The column
     * <code>entity_processor.entity_processor_activities.APP_CODE</code>. App
     * Code on which this task type was created.
     */
    public final TableField<EntityProcessorActivitiesRecord, String> APP_CODE = createField(DSL.name("APP_CODE"), SQLDataType.CHAR(64).nullable(false), this, "App Code on which this task type was created.");

    /**
     * The column
     * <code>entity_processor.entity_processor_activities.CLIENT_CODE</code>.
     * Client Code who created this task type.
     */
    public final TableField<EntityProcessorActivitiesRecord, String> CLIENT_CODE = createField(DSL.name("CLIENT_CODE"), SQLDataType.CHAR(8).nullable(false), this, "Client Code who created this task type.");

    /**
     * The column
     * <code>entity_processor.entity_processor_activities.CODE</code>. Unique
     * Code to identify this row.
     */
    public final TableField<EntityProcessorActivitiesRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.CHAR(22).nullable(false), this, "Unique Code to identify this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_activities.NAME</code>. Name of
     * the Task Type.
     */
    public final TableField<EntityProcessorActivitiesRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(512).nullable(false), this, "Name of the Task Type.");

    /**
     * The column
     * <code>entity_processor.entity_processor_activities.DESCRIPTION</code>.
     * Description for the Task Type.
     */
    public final TableField<EntityProcessorActivitiesRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "Description for the Task Type.");

    /**
     * The column
     * <code>entity_processor.entity_processor_activities.TICKET_ID</code>.
     * Ticket related to this task.
     */
    public final TableField<EntityProcessorActivitiesRecord, ULong> TICKET_ID = createField(DSL.name("TICKET_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Ticket related to this task.");

    /**
     * The column
     * <code>entity_processor.entity_processor_activities.ACTIVITY_DATE</code>.
     * Date of the activity.
     */
    public final TableField<EntityProcessorActivitiesRecord, LocalDateTime> ACTIVITY_DATE = createField(DSL.name("ACTIVITY_DATE"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "Date of the activity.");

    /**
     * The column
     * <code>entity_processor.entity_processor_activities.ACTIVITY_ACTION</code>.
     * Action performed on the object.
     */
    public final TableField<EntityProcessorActivitiesRecord, ActivityAction> ACTIVITY_ACTION = createField(DSL.name("ACTIVITY_ACTION"), SQLDataType.VARCHAR(19).nullable(false).asEnumDataType(EntityProcessorActivitiesActivityAction.class), this, "Action performed on the object.", new EnumConverter<EntityProcessorActivitiesActivityAction, ActivityAction>(EntityProcessorActivitiesActivityAction.class, ActivityAction.class));

    /**
     * The column
     * <code>entity_processor.entity_processor_activities.OBJECT_ENTITY_SERIES</code>.
     * Entity Series of the object.
     */
    public final TableField<EntityProcessorActivitiesRecord, EntitySeries> OBJECT_ENTITY_SERIES = createField(DSL.name("OBJECT_ENTITY_SERIES"), SQLDataType.VARCHAR(33).nullable(false).defaultValue(DSL.inline("XXX", SQLDataType.VARCHAR)).asEnumDataType(EntityProcessorActivitiesObjectEntitySeries.class), this, "Entity Series of the object.", new EnumConverter<EntityProcessorActivitiesObjectEntitySeries, EntitySeries>(EntityProcessorActivitiesObjectEntitySeries.class, EntitySeries.class));

    /**
     * The column
     * <code>entity_processor.entity_processor_activities.OBJECT_ID</code>.
     * Object id of OBJECT_ENTITY_SERIES on which activity is performed
     */
    public final TableField<EntityProcessorActivitiesRecord, ULong> OBJECT_ID = createField(DSL.name("OBJECT_ID"), SQLDataType.BIGINTUNSIGNED, this, "Object id of OBJECT_ENTITY_SERIES on which activity is performed");

    /**
     * The column
     * <code>entity_processor.entity_processor_activities.OBJECT_DATA</code>.
     * Object data of OBJECT_ENTITY_SERIES on which activity is performed
     */
    public final TableField<EntityProcessorActivitiesRecord, JSON> OBJECT_DATA = createField(DSL.name("OBJECT_DATA"), SQLDataType.JSON, this, "Object data of OBJECT_ENTITY_SERIES on which activity is performed");

    /**
     * The column
     * <code>entity_processor.entity_processor_activities.TEMP_ACTIVE</code>.
     * Temporary active flag for this task type.
     */
    public final TableField<EntityProcessorActivitiesRecord, Byte> TEMP_ACTIVE = createField(DSL.name("TEMP_ACTIVE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Temporary active flag for this task type.");

    /**
     * The column
     * <code>entity_processor.entity_processor_activities.IS_ACTIVE</code>. Flag
     * to check if this task type is active or not.
     */
    public final TableField<EntityProcessorActivitiesRecord, Byte> IS_ACTIVE = createField(DSL.name("IS_ACTIVE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "Flag to check if this task type is active or not.");

    /**
     * The column
     * <code>entity_processor.entity_processor_activities.CREATED_BY</code>. ID
     * of the user who created this row.
     */
    public final TableField<EntityProcessorActivitiesRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_activities.CREATED_AT</code>.
     * Time when this row is created.
     */
    public final TableField<EntityProcessorActivitiesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created.");

    /**
     * The column
     * <code>entity_processor.entity_processor_activities.UPDATED_BY</code>. ID
     * of the user who updated this row.
     */
    public final TableField<EntityProcessorActivitiesRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_activities.UPDATED_AT</code>.
     * Time when this row is updated.
     */
    public final TableField<EntityProcessorActivitiesRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated.");

    private EntityProcessorActivities(Name alias, Table<EntityProcessorActivitiesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private EntityProcessorActivities(Name alias, Table<EntityProcessorActivitiesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased
     * <code>entity_processor.entity_processor_activities</code> table reference
     */
    public EntityProcessorActivities(String alias) {
        this(DSL.name(alias), ENTITY_PROCESSOR_ACTIVITIES);
    }

    /**
     * Create an aliased
     * <code>entity_processor.entity_processor_activities</code> table reference
     */
    public EntityProcessorActivities(Name alias) {
        this(alias, ENTITY_PROCESSOR_ACTIVITIES);
    }

    /**
     * Create a <code>entity_processor.entity_processor_activities</code> table
     * reference
     */
    public EntityProcessorActivities() {
        this(DSL.name("entity_processor_activities"), null);
    }

    public <O extends Record> EntityProcessorActivities(Table<O> path, ForeignKey<O, EntityProcessorActivitiesRecord> childPath, InverseForeignKey<O, EntityProcessorActivitiesRecord> parentPath) {
        super(path, childPath, parentPath, ENTITY_PROCESSOR_ACTIVITIES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class EntityProcessorActivitiesPath extends EntityProcessorActivities implements Path<EntityProcessorActivitiesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> EntityProcessorActivitiesPath(Table<O> path, ForeignKey<O, EntityProcessorActivitiesRecord> childPath, InverseForeignKey<O, EntityProcessorActivitiesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private EntityProcessorActivitiesPath(Name alias, Table<EntityProcessorActivitiesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public EntityProcessorActivitiesPath as(String alias) {
            return new EntityProcessorActivitiesPath(DSL.name(alias), this);
        }

        @Override
        public EntityProcessorActivitiesPath as(Name alias) {
            return new EntityProcessorActivitiesPath(alias, this);
        }

        @Override
        public EntityProcessorActivitiesPath as(Table<?> alias) {
            return new EntityProcessorActivitiesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : EntityProcessor.ENTITY_PROCESSOR;
    }

    @Override
    public Identity<EntityProcessorActivitiesRecord, ULong> getIdentity() {
        return (Identity<EntityProcessorActivitiesRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<EntityProcessorActivitiesRecord> getPrimaryKey() {
        return Keys.KEY_ENTITY_PROCESSOR_ACTIVITIES_PRIMARY;
    }

    @Override
    public List<UniqueKey<EntityProcessorActivitiesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ENTITY_PROCESSOR_ACTIVITIES_UK1_ACTIVITIES_CODE);
    }

    @Override
    public List<ForeignKey<EntityProcessorActivitiesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK2_ACTIVITIES_TICKET_ID);
    }

    private transient EntityProcessorTicketsPath _entityProcessorTickets;

    /**
     * Get the implicit join path to the
     * <code>entity_processor.entity_processor_tickets</code> table.
     */
    public EntityProcessorTicketsPath entityProcessorTickets() {
        if (_entityProcessorTickets == null)
            _entityProcessorTickets = new EntityProcessorTicketsPath(this, Keys.FK2_ACTIVITIES_TICKET_ID, null);

        return _entityProcessorTickets;
    }

    @Override
    public EntityProcessorActivities as(String alias) {
        return new EntityProcessorActivities(DSL.name(alias), this);
    }

    @Override
    public EntityProcessorActivities as(Name alias) {
        return new EntityProcessorActivities(alias, this);
    }

    @Override
    public EntityProcessorActivities as(Table<?> alias) {
        return new EntityProcessorActivities(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorActivities rename(String name) {
        return new EntityProcessorActivities(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorActivities rename(Name name) {
        return new EntityProcessorActivities(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorActivities rename(Table<?> name) {
        return new EntityProcessorActivities(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorActivities where(Condition condition) {
        return new EntityProcessorActivities(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorActivities where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorActivities where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorActivities where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorActivities where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorActivities where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorActivities where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorActivities where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorActivities whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorActivities whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
