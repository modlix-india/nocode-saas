/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.entity.processor.jooq.tables.records;


import com.fincity.saas.entity.processor.enums.content.ContentEntitySeries;
import com.fincity.saas.entity.processor.jooq.tables.EntityProcessorNotes;

import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EntityProcessorNotesRecord extends UpdatableRecordImpl<EntityProcessorNotesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>entity_processor.entity_processor_notes.ID</code>.
     * Primary key.
     */
    public EntityProcessorNotesRecord setId(ULong value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>entity_processor.entity_processor_notes.ID</code>.
     * Primary key.
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>entity_processor.entity_processor_notes.APP_CODE</code>.
     * App Code on which this note was created.
     */
    public EntityProcessorNotesRecord setAppCode(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>entity_processor.entity_processor_notes.APP_CODE</code>.
     * App Code on which this note was created.
     */
    public String getAppCode() {
        return (String) get(1);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_notes.CLIENT_CODE</code>. Client
     * Code who created this note.
     */
    public EntityProcessorNotesRecord setClientCode(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_notes.CLIENT_CODE</code>. Client
     * Code who created this note.
     */
    public String getClientCode() {
        return (String) get(2);
    }

    /**
     * Setter for <code>entity_processor.entity_processor_notes.CODE</code>.
     * Unique Code to identify this row.
     */
    public EntityProcessorNotesRecord setCode(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>entity_processor.entity_processor_notes.CODE</code>.
     * Unique Code to identify this row.
     */
    public String getCode() {
        return (String) get(3);
    }

    /**
     * Setter for <code>entity_processor.entity_processor_notes.NAME</code>.
     * Name of the Note.
     */
    public EntityProcessorNotesRecord setName(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>entity_processor.entity_processor_notes.NAME</code>.
     * Name of the Note.
     */
    public String getName() {
        return (String) get(4);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_notes.DESCRIPTION</code>.
     * Description for the Note.
     */
    public EntityProcessorNotesRecord setDescription(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_notes.DESCRIPTION</code>.
     * Description for the Note.
     */
    public String getDescription() {
        return (String) get(5);
    }

    /**
     * Setter for <code>entity_processor.entity_processor_notes.VERSION</code>.
     * Version of this row.
     */
    public EntityProcessorNotesRecord setVersion(Integer value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>entity_processor.entity_processor_notes.VERSION</code>.
     * Version of this row.
     */
    public Integer getVersion() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>entity_processor.entity_processor_notes.CONTENT</code>.
     * Content of the note.
     */
    public EntityProcessorNotesRecord setContent(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>entity_processor.entity_processor_notes.CONTENT</code>.
     * Content of the note.
     */
    public String getContent() {
        return (String) get(7);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_notes.HAS_ATTACHMENT</code>.
     * Whether this note has attachments.
     */
    public EntityProcessorNotesRecord setHasAttachment(Boolean value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_notes.HAS_ATTACHMENT</code>.
     * Whether this note has attachments.
     */
    public Boolean getHasAttachment() {
        return (Boolean) get(8);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_notes.CONTENT_ENTITY_SERIES</code>.
     * Type of entity for which this content was created
     */
    public EntityProcessorNotesRecord setContentEntitySeries(ContentEntitySeries value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_notes.CONTENT_ENTITY_SERIES</code>.
     * Type of entity for which this content was created
     */
    public ContentEntitySeries getContentEntitySeries() {
        return (ContentEntitySeries) get(9);
    }

    /**
     * Setter for <code>entity_processor.entity_processor_notes.OWNER_ID</code>.
     * Owner related to this note.
     */
    public EntityProcessorNotesRecord setOwnerId(ULong value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>entity_processor.entity_processor_notes.OWNER_ID</code>.
     * Owner related to this note.
     */
    public ULong getOwnerId() {
        return (ULong) get(10);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_notes.TICKET_ID</code>. Ticket
     * related to this note.
     */
    public EntityProcessorNotesRecord setTicketId(ULong value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_notes.TICKET_ID</code>. Ticket
     * related to this note.
     */
    public ULong getTicketId() {
        return (ULong) get(11);
    }

    /**
     * Setter for <code>entity_processor.entity_processor_notes.USER_ID</code>.
     * Id of user for which this task was created.
     */
    public EntityProcessorNotesRecord setUserId(ULong value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>entity_processor.entity_processor_notes.USER_ID</code>.
     * Id of user for which this task was created.
     */
    public ULong getUserId() {
        return (ULong) get(12);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_notes.CLIENT_ID</code>. Id of
     * client for which this task was created.
     */
    public EntityProcessorNotesRecord setClientId(ULong value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_notes.CLIENT_ID</code>. Id of
     * client for which this task was created.
     */
    public ULong getClientId() {
        return (ULong) get(13);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_notes.TEMP_ACTIVE</code>.
     * Temporary active flag for this note.
     */
    public EntityProcessorNotesRecord setTempActive(Boolean value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_notes.TEMP_ACTIVE</code>.
     * Temporary active flag for this note.
     */
    public Boolean getTempActive() {
        return (Boolean) get(14);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_notes.IS_ACTIVE</code>. Flag to
     * check if this note is active or not.
     */
    public EntityProcessorNotesRecord setIsActive(Boolean value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_notes.IS_ACTIVE</code>. Flag to
     * check if this note is active or not.
     */
    public Boolean getIsActive() {
        return (Boolean) get(15);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_notes.CREATED_BY</code>. ID of
     * the user who created this row.
     */
    public EntityProcessorNotesRecord setCreatedBy(ULong value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_notes.CREATED_BY</code>. ID of
     * the user who created this row.
     */
    public ULong getCreatedBy() {
        return (ULong) get(16);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_notes.CREATED_AT</code>. Time
     * when this row is created.
     */
    public EntityProcessorNotesRecord setCreatedAt(LocalDateTime value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_notes.CREATED_AT</code>. Time
     * when this row is created.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(17);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_notes.UPDATED_BY</code>. ID of
     * the user who updated this row.
     */
    public EntityProcessorNotesRecord setUpdatedBy(ULong value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_notes.UPDATED_BY</code>. ID of
     * the user who updated this row.
     */
    public ULong getUpdatedBy() {
        return (ULong) get(18);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_notes.UPDATED_AT</code>. Time
     * when this row is updated.
     */
    public EntityProcessorNotesRecord setUpdatedAt(LocalDateTime value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_notes.UPDATED_AT</code>. Time
     * when this row is updated.
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(19);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached EntityProcessorNotesRecord
     */
    public EntityProcessorNotesRecord() {
        super(EntityProcessorNotes.ENTITY_PROCESSOR_NOTES);
    }

    /**
     * Create a detached, initialised EntityProcessorNotesRecord
     */
    public EntityProcessorNotesRecord(ULong id, String appCode, String clientCode, String code, String name, String description, Integer version, String content, Boolean hasAttachment, ContentEntitySeries contentEntitySeries, ULong ownerId, ULong ticketId, ULong userId, ULong clientId, Boolean tempActive, Boolean isActive, ULong createdBy, LocalDateTime createdAt, ULong updatedBy, LocalDateTime updatedAt) {
        super(EntityProcessorNotes.ENTITY_PROCESSOR_NOTES);

        setId(id);
        setAppCode(appCode);
        setClientCode(clientCode);
        setCode(code);
        setName(name);
        setDescription(description);
        setVersion(version);
        setContent(content);
        setHasAttachment(hasAttachment);
        setContentEntitySeries(contentEntitySeries);
        setOwnerId(ownerId);
        setTicketId(ticketId);
        setUserId(userId);
        setClientId(clientId);
        setTempActive(tempActive);
        setIsActive(isActive);
        setCreatedBy(createdBy);
        setCreatedAt(createdAt);
        setUpdatedBy(updatedBy);
        setUpdatedAt(updatedAt);
        resetChangedOnNotNull();
    }
}
