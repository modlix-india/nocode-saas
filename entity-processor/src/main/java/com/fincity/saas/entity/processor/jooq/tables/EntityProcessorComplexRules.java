/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.entity.processor.jooq.tables;


import com.fincity.saas.entity.processor.enums.rule.LogicalOperator;
import com.fincity.saas.entity.processor.jooq.EntityProcessor;
import com.fincity.saas.entity.processor.jooq.Indexes;
import com.fincity.saas.entity.processor.jooq.Keys;
import com.fincity.saas.entity.processor.jooq.tables.EntityProcessorComplexRules.EntityProcessorComplexRulesPath;
import com.fincity.saas.entity.processor.jooq.tables.EntityProcessorProductStageRules.EntityProcessorProductStageRulesPath;
import com.fincity.saas.entity.processor.jooq.tables.EntityProcessorProductTemplateRules.EntityProcessorProductTemplateRulesPath;
import com.fincity.saas.entity.processor.jooq.tables.EntityProcessorSimpleComplexRuleRelations.EntityProcessorSimpleComplexRuleRelationsPath;
import com.fincity.saas.entity.processor.jooq.tables.records.EntityProcessorComplexRulesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.EnumConverter;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EntityProcessorComplexRules extends TableImpl<EntityProcessorComplexRulesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>entity_processor.entity_processor_complex_rules</code>
     */
    public static final EntityProcessorComplexRules ENTITY_PROCESSOR_COMPLEX_RULES = new EntityProcessorComplexRules();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EntityProcessorComplexRulesRecord> getRecordType() {
        return EntityProcessorComplexRulesRecord.class;
    }

    /**
     * The column
     * <code>entity_processor.entity_processor_complex_rules.ID</code>. Primary
     * key.
     */
    public final TableField<EntityProcessorComplexRulesRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key.");

    /**
     * The column
     * <code>entity_processor.entity_processor_complex_rules.APP_CODE</code>.
     * App Code on which this Complex Rule was created.
     */
    public final TableField<EntityProcessorComplexRulesRecord, String> APP_CODE = createField(DSL.name("APP_CODE"), SQLDataType.CHAR(64).nullable(false), this, "App Code on which this Complex Rule was created.");

    /**
     * The column
     * <code>entity_processor.entity_processor_complex_rules.CLIENT_CODE</code>.
     * Client Code who created this Complex Rule.
     */
    public final TableField<EntityProcessorComplexRulesRecord, String> CLIENT_CODE = createField(DSL.name("CLIENT_CODE"), SQLDataType.CHAR(8).nullable(false), this, "Client Code who created this Complex Rule.");

    /**
     * The column
     * <code>entity_processor.entity_processor_complex_rules.CODE</code>. Unique
     * Code to identify this row.
     */
    public final TableField<EntityProcessorComplexRulesRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.CHAR(22).nullable(false), this, "Unique Code to identify this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_complex_rules.NAME</code>. Name
     * of the Complex Rule.
     */
    public final TableField<EntityProcessorComplexRulesRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(64).nullable(false), this, "Name of the Complex Rule.");

    /**
     * The column
     * <code>entity_processor.entity_processor_complex_rules.DESCRIPTION</code>.
     * Description for the Complex Rule.
     */
    public final TableField<EntityProcessorComplexRulesRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "Description for the Complex Rule.");

    /**
     * The column
     * <code>entity_processor.entity_processor_complex_rules.VERSION</code>.
     * Version of this Complex Rule.
     */
    public final TableField<EntityProcessorComplexRulesRecord, Integer> VERSION = createField(DSL.name("VERSION"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("1", SQLDataType.INTEGER)), this, "Version of this Complex Rule.");

    /**
     * The column
     * <code>entity_processor.entity_processor_complex_rules.PRODUCT_TEMPLATE_RULE_ID</code>.
     * Product Template Rule ID related to this Complex Rule.
     */
    public final TableField<EntityProcessorComplexRulesRecord, ULong> PRODUCT_TEMPLATE_RULE_ID = createField(DSL.name("PRODUCT_TEMPLATE_RULE_ID"), SQLDataType.BIGINTUNSIGNED, this, "Product Template Rule ID related to this Complex Rule.");

    /**
     * The column
     * <code>entity_processor.entity_processor_complex_rules.PRODUCT_STAGE_RULE_ID</code>.
     * Product Stage Rule ID related to this Complex Rule.
     */
    public final TableField<EntityProcessorComplexRulesRecord, ULong> PRODUCT_STAGE_RULE_ID = createField(DSL.name("PRODUCT_STAGE_RULE_ID"), SQLDataType.BIGINTUNSIGNED, this, "Product Stage Rule ID related to this Complex Rule.");

    /**
     * The column
     * <code>entity_processor.entity_processor_complex_rules.NEGATE</code>. Flag
     * to check if this Complex Rule is negative.
     */
    public final TableField<EntityProcessorComplexRulesRecord, Boolean> NEGATE = createField(DSL.name("NEGATE"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "Flag to check if this Complex Rule is negative.");

    /**
     * The column
     * <code>entity_processor.entity_processor_complex_rules.PARENT_CONDITION_ID</code>.
     * Parent Rule ID for this Complex Rule.
     */
    public final TableField<EntityProcessorComplexRulesRecord, ULong> PARENT_CONDITION_ID = createField(DSL.name("PARENT_CONDITION_ID"), SQLDataType.BIGINTUNSIGNED, this, "Parent Rule ID for this Complex Rule.");

    /**
     * The column
     * <code>entity_processor.entity_processor_complex_rules.LOGICAL_OPERATOR</code>.
     * Logical operator for this Complex Rule.
     */
    public final TableField<EntityProcessorComplexRulesRecord, LogicalOperator> LOGICAL_OPERATOR = createField(DSL.name("LOGICAL_OPERATOR"), SQLDataType.VARCHAR(3).nullable(false), this, "Logical operator for this Complex Rule.", new EnumConverter<String, LogicalOperator>(String.class, LogicalOperator.class));

    /**
     * The column
     * <code>entity_processor.entity_processor_complex_rules.HAS_COMPLEX_CHILD</code>.
     * Flag to tell weather this rule has complex children.
     */
    public final TableField<EntityProcessorComplexRulesRecord, Boolean> HAS_COMPLEX_CHILD = createField(DSL.name("HAS_COMPLEX_CHILD"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "Flag to tell weather this rule has complex children.");

    /**
     * The column
     * <code>entity_processor.entity_processor_complex_rules.HAS_SIMPLE_CHILD</code>.
     * Flag to tell weather this rule has simple children.
     */
    public final TableField<EntityProcessorComplexRulesRecord, Boolean> HAS_SIMPLE_CHILD = createField(DSL.name("HAS_SIMPLE_CHILD"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "Flag to tell weather this rule has simple children.");

    /**
     * The column
     * <code>entity_processor.entity_processor_complex_rules.TEMP_ACTIVE</code>.
     * Temporary active flag for this Complex Rule.
     */
    public final TableField<EntityProcessorComplexRulesRecord, Boolean> TEMP_ACTIVE = createField(DSL.name("TEMP_ACTIVE"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "Temporary active flag for this Complex Rule.");

    /**
     * The column
     * <code>entity_processor.entity_processor_complex_rules.IS_ACTIVE</code>.
     * Flag to check if this Complex Rule is active or not.
     */
    public final TableField<EntityProcessorComplexRulesRecord, Boolean> IS_ACTIVE = createField(DSL.name("IS_ACTIVE"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("1", SQLDataType.BOOLEAN)), this, "Flag to check if this Complex Rule is active or not.");

    /**
     * The column
     * <code>entity_processor.entity_processor_complex_rules.CREATED_BY</code>.
     * ID of the user who created this row.
     */
    public final TableField<EntityProcessorComplexRulesRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_complex_rules.CREATED_AT</code>.
     * Time when this row is created.
     */
    public final TableField<EntityProcessorComplexRulesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created.");

    /**
     * The column
     * <code>entity_processor.entity_processor_complex_rules.UPDATED_BY</code>.
     * ID of the user who updated this row.
     */
    public final TableField<EntityProcessorComplexRulesRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_complex_rules.UPDATED_AT</code>.
     * Time when this row is updated.
     */
    public final TableField<EntityProcessorComplexRulesRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated.");

    private EntityProcessorComplexRules(Name alias, Table<EntityProcessorComplexRulesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private EntityProcessorComplexRules(Name alias, Table<EntityProcessorComplexRulesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased
     * <code>entity_processor.entity_processor_complex_rules</code> table
     * reference
     */
    public EntityProcessorComplexRules(String alias) {
        this(DSL.name(alias), ENTITY_PROCESSOR_COMPLEX_RULES);
    }

    /**
     * Create an aliased
     * <code>entity_processor.entity_processor_complex_rules</code> table
     * reference
     */
    public EntityProcessorComplexRules(Name alias) {
        this(alias, ENTITY_PROCESSOR_COMPLEX_RULES);
    }

    /**
     * Create a <code>entity_processor.entity_processor_complex_rules</code>
     * table reference
     */
    public EntityProcessorComplexRules() {
        this(DSL.name("entity_processor_complex_rules"), null);
    }

    public <O extends Record> EntityProcessorComplexRules(Table<O> path, ForeignKey<O, EntityProcessorComplexRulesRecord> childPath, InverseForeignKey<O, EntityProcessorComplexRulesRecord> parentPath) {
        super(path, childPath, parentPath, ENTITY_PROCESSOR_COMPLEX_RULES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class EntityProcessorComplexRulesPath extends EntityProcessorComplexRules implements Path<EntityProcessorComplexRulesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> EntityProcessorComplexRulesPath(Table<O> path, ForeignKey<O, EntityProcessorComplexRulesRecord> childPath, InverseForeignKey<O, EntityProcessorComplexRulesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private EntityProcessorComplexRulesPath(Name alias, Table<EntityProcessorComplexRulesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public EntityProcessorComplexRulesPath as(String alias) {
            return new EntityProcessorComplexRulesPath(DSL.name(alias), this);
        }

        @Override
        public EntityProcessorComplexRulesPath as(Name alias) {
            return new EntityProcessorComplexRulesPath(alias, this);
        }

        @Override
        public EntityProcessorComplexRulesPath as(Table<?> alias) {
            return new EntityProcessorComplexRulesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : EntityProcessor.ENTITY_PROCESSOR;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ENTITY_PROCESSOR_COMPLEX_RULES_IDX0_COMPLEX_RULES_AC_CC);
    }

    @Override
    public Identity<EntityProcessorComplexRulesRecord, ULong> getIdentity() {
        return (Identity<EntityProcessorComplexRulesRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<EntityProcessorComplexRulesRecord> getPrimaryKey() {
        return Keys.KEY_ENTITY_PROCESSOR_COMPLEX_RULES_PRIMARY;
    }

    @Override
    public List<UniqueKey<EntityProcessorComplexRulesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ENTITY_PROCESSOR_COMPLEX_RULES_UK1_COMPLEX_RULES_CODE);
    }

    @Override
    public List<ForeignKey<EntityProcessorComplexRulesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_COMPLEX_RULES_PRODUCT_TEMPLATE_RULE_ID, Keys.FK2_COMPLEX_RULES_PRODUCT_STAGE_RULE_ID, Keys.FK3_COMPLEX_RULES_PARENT_ID);
    }

    private transient EntityProcessorProductTemplateRulesPath _entityProcessorProductTemplateRules;

    /**
     * Get the implicit join path to the
     * <code>entity_processor.entity_processor_product_template_rules</code>
     * table.
     */
    public EntityProcessorProductTemplateRulesPath entityProcessorProductTemplateRules() {
        if (_entityProcessorProductTemplateRules == null)
            _entityProcessorProductTemplateRules = new EntityProcessorProductTemplateRulesPath(this, Keys.FK1_COMPLEX_RULES_PRODUCT_TEMPLATE_RULE_ID, null);

        return _entityProcessorProductTemplateRules;
    }

    private transient EntityProcessorProductStageRulesPath _entityProcessorProductStageRules;

    /**
     * Get the implicit join path to the
     * <code>entity_processor.entity_processor_product_stage_rules</code> table.
     */
    public EntityProcessorProductStageRulesPath entityProcessorProductStageRules() {
        if (_entityProcessorProductStageRules == null)
            _entityProcessorProductStageRules = new EntityProcessorProductStageRulesPath(this, Keys.FK2_COMPLEX_RULES_PRODUCT_STAGE_RULE_ID, null);

        return _entityProcessorProductStageRules;
    }

    private transient EntityProcessorComplexRulesPath _entityProcessorComplexRules;

    /**
     * Get the implicit join path to the
     * <code>entity_processor.entity_processor_complex_rules</code> table.
     */
    public EntityProcessorComplexRulesPath entityProcessorComplexRules() {
        if (_entityProcessorComplexRules == null)
            _entityProcessorComplexRules = new EntityProcessorComplexRulesPath(this, Keys.FK3_COMPLEX_RULES_PARENT_ID, null);

        return _entityProcessorComplexRules;
    }

    private transient EntityProcessorSimpleComplexRuleRelationsPath _entityProcessorSimpleComplexRuleRelations;

    /**
     * Get the implicit to-many join path to the
     * <code>entity_processor.entity_processor_simple_complex_rule_relations</code>
     * table
     */
    public EntityProcessorSimpleComplexRuleRelationsPath entityProcessorSimpleComplexRuleRelations() {
        if (_entityProcessorSimpleComplexRuleRelations == null)
            _entityProcessorSimpleComplexRuleRelations = new EntityProcessorSimpleComplexRuleRelationsPath(this, null, Keys.FK1_RELATIONS_COMPLEX_CONDITION_ID.getInverseKey());

        return _entityProcessorSimpleComplexRuleRelations;
    }

    @Override
    public EntityProcessorComplexRules as(String alias) {
        return new EntityProcessorComplexRules(DSL.name(alias), this);
    }

    @Override
    public EntityProcessorComplexRules as(Name alias) {
        return new EntityProcessorComplexRules(alias, this);
    }

    @Override
    public EntityProcessorComplexRules as(Table<?> alias) {
        return new EntityProcessorComplexRules(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorComplexRules rename(String name) {
        return new EntityProcessorComplexRules(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorComplexRules rename(Name name) {
        return new EntityProcessorComplexRules(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorComplexRules rename(Table<?> name) {
        return new EntityProcessorComplexRules(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorComplexRules where(Condition condition) {
        return new EntityProcessorComplexRules(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorComplexRules where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorComplexRules where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorComplexRules where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorComplexRules where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorComplexRules where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorComplexRules where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorComplexRules where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorComplexRules whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorComplexRules whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
