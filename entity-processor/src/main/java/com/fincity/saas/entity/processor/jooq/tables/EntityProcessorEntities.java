/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.entity.processor.jooq.tables;


import com.fincity.saas.entity.processor.jooq.EntityProcessor;
import com.fincity.saas.entity.processor.jooq.Keys;
import com.fincity.saas.entity.processor.jooq.tables.EntityProcessorModels.EntityProcessorModelsPath;
import com.fincity.saas.entity.processor.jooq.tables.EntityProcessorProducts.EntityProcessorProductsPath;
import com.fincity.saas.entity.processor.jooq.tables.records.EntityProcessorEntitiesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EntityProcessorEntities extends TableImpl<EntityProcessorEntitiesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>entity_processor.entity_processor_entities</code>
     */
    public static final EntityProcessorEntities ENTITY_PROCESSOR_ENTITIES = new EntityProcessorEntities();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EntityProcessorEntitiesRecord> getRecordType() {
        return EntityProcessorEntitiesRecord.class;
    }

    /**
     * The column <code>entity_processor.entity_processor_entities.ID</code>.
     * Primary key
     */
    public final TableField<EntityProcessorEntitiesRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column
     * <code>entity_processor.entity_processor_entities.VERSION</code>. Version
     * of this row
     */
    public final TableField<EntityProcessorEntitiesRecord, ULong> VERSION = createField(DSL.name("VERSION"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("1", SQLDataType.BIGINTUNSIGNED)), this, "Version of this row");

    /**
     * The column <code>entity_processor.entity_processor_entities.CODE</code>.
     * Unique Code to identify this row
     */
    public final TableField<EntityProcessorEntitiesRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.CHAR(22).nullable(false), this, "Unique Code to identify this row");

    /**
     * The column <code>entity_processor.entity_processor_entities.NAME</code>.
     * Name of the Entity. Entity can be anything which will have a single
     * model. For Example, Opportunity is a entity of Lead , Task is a entity of
     * Epic, Lead is entity of Account
     */
    public final TableField<EntityProcessorEntitiesRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(512).nullable(false), this, "Name of the Entity. Entity can be anything which will have a single model. For Example, Opportunity is a entity of Lead , Task is a entity of Epic, Lead is entity of Account");

    /**
     * The column
     * <code>entity_processor.entity_processor_entities.DESCRIPTION</code>.
     * Description for the entity
     */
    public final TableField<EntityProcessorEntitiesRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "Description for the entity");

    /**
     * The column
     * <code>entity_processor.entity_processor_entities.ADDED_BY_USER_ID</code>.
     * User which added this entity
     */
    public final TableField<EntityProcessorEntitiesRecord, ULong> ADDED_BY_USER_ID = createField(DSL.name("ADDED_BY_USER_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "User which added this entity");

    /**
     * The column
     * <code>entity_processor.entity_processor_entities.CURRENT_USER_ID</code>.
     * User to which this entity is assigned
     */
    public final TableField<EntityProcessorEntitiesRecord, ULong> CURRENT_USER_ID = createField(DSL.name("CURRENT_USER_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "User to which this entity is assigned");

    /**
     * The column
     * <code>entity_processor.entity_processor_entities.STATUS</code>. Status
     * for this entity
     */
    public final TableField<EntityProcessorEntitiesRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.CHAR(32), this, "Status for this entity");

    /**
     * The column
     * <code>entity_processor.entity_processor_entities.SUB_STATUS</code>. Sub
     * Status for this entity
     */
    public final TableField<EntityProcessorEntitiesRecord, String> SUB_STATUS = createField(DSL.name("SUB_STATUS"), SQLDataType.CHAR(32), this, "Sub Status for this entity");

    /**
     * The column
     * <code>entity_processor.entity_processor_entities.MODEL_ID</code>. Model
     * related to this entity
     */
    public final TableField<EntityProcessorEntitiesRecord, ULong> MODEL_ID = createField(DSL.name("MODEL_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Model related to this entity");

    /**
     * The column
     * <code>entity_processor.entity_processor_entities.DIAL_CODE</code>. Dial
     * code of the phone number this entity has
     */
    public final TableField<EntityProcessorEntitiesRecord, String> DIAL_CODE = createField(DSL.name("DIAL_CODE"), SQLDataType.CHAR(6).defaultValue(DSL.inline("91", SQLDataType.CHAR)), this, "Dial code of the phone number this entity has");

    /**
     * The column
     * <code>entity_processor.entity_processor_entities.PHONE_NUMBER</code>.
     * Phone number related to this entity
     */
    public final TableField<EntityProcessorEntitiesRecord, String> PHONE_NUMBER = createField(DSL.name("PHONE_NUMBER"), SQLDataType.CHAR(13), this, "Phone number related to this entity");

    /**
     * The column <code>entity_processor.entity_processor_entities.EMAIL</code>.
     * Email related to this entity
     */
    public final TableField<EntityProcessorEntitiesRecord, String> EMAIL = createField(DSL.name("EMAIL"), SQLDataType.VARCHAR(512), this, "Email related to this entity");

    /**
     * The column
     * <code>entity_processor.entity_processor_entities.SOURCE</code>. Name of
     * source from where we get this entity
     */
    public final TableField<EntityProcessorEntitiesRecord, String> SOURCE = createField(DSL.name("SOURCE"), SQLDataType.CHAR(32).nullable(false), this, "Name of source from where we get this entity");

    /**
     * The column
     * <code>entity_processor.entity_processor_entities.SUB_SOURCE</code>. Name
     * of sub source of source from where we get this entity
     */
    public final TableField<EntityProcessorEntitiesRecord, String> SUB_SOURCE = createField(DSL.name("SUB_SOURCE"), SQLDataType.CHAR(32).nullable(false), this, "Name of sub source of source from where we get this entity");

    /**
     * The column
     * <code>entity_processor.entity_processor_entities.PRODUCT_ID</code>.
     * Product related to this entity
     */
    public final TableField<EntityProcessorEntitiesRecord, ULong> PRODUCT_ID = createField(DSL.name("PRODUCT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Product related to this entity");

    /**
     * The column
     * <code>entity_processor.entity_processor_entities.TEMP_ACTIVE</code>.
     * Temporary active flag fro this product
     */
    public final TableField<EntityProcessorEntitiesRecord, Byte> TEMP_ACTIVE = createField(DSL.name("TEMP_ACTIVE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Temporary active flag fro this product");

    /**
     * The column
     * <code>entity_processor.entity_processor_entities.IS_ACTIVE</code>. Flag
     * to check if this product is active or not
     */
    public final TableField<EntityProcessorEntitiesRecord, Byte> IS_ACTIVE = createField(DSL.name("IS_ACTIVE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "Flag to check if this product is active or not");

    /**
     * The column
     * <code>entity_processor.entity_processor_entities.CREATED_BY</code>. ID of
     * the user who created this row
     */
    public final TableField<EntityProcessorEntitiesRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row");

    /**
     * The column
     * <code>entity_processor.entity_processor_entities.CREATED_AT</code>. Time
     * when this row is created
     */
    public final TableField<EntityProcessorEntitiesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created");

    /**
     * The column
     * <code>entity_processor.entity_processor_entities.UPDATED_BY</code>. ID of
     * the user who updated this row
     */
    public final TableField<EntityProcessorEntitiesRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row");

    /**
     * The column
     * <code>entity_processor.entity_processor_entities.UPDATED_AT</code>. Time
     * when this row is updated
     */
    public final TableField<EntityProcessorEntitiesRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated");

    private EntityProcessorEntities(Name alias, Table<EntityProcessorEntitiesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private EntityProcessorEntities(Name alias, Table<EntityProcessorEntitiesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>entity_processor.entity_processor_entities</code>
     * table reference
     */
    public EntityProcessorEntities(String alias) {
        this(DSL.name(alias), ENTITY_PROCESSOR_ENTITIES);
    }

    /**
     * Create an aliased <code>entity_processor.entity_processor_entities</code>
     * table reference
     */
    public EntityProcessorEntities(Name alias) {
        this(alias, ENTITY_PROCESSOR_ENTITIES);
    }

    /**
     * Create a <code>entity_processor.entity_processor_entities</code> table
     * reference
     */
    public EntityProcessorEntities() {
        this(DSL.name("entity_processor_entities"), null);
    }

    public <O extends Record> EntityProcessorEntities(Table<O> path, ForeignKey<O, EntityProcessorEntitiesRecord> childPath, InverseForeignKey<O, EntityProcessorEntitiesRecord> parentPath) {
        super(path, childPath, parentPath, ENTITY_PROCESSOR_ENTITIES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class EntityProcessorEntitiesPath extends EntityProcessorEntities implements Path<EntityProcessorEntitiesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> EntityProcessorEntitiesPath(Table<O> path, ForeignKey<O, EntityProcessorEntitiesRecord> childPath, InverseForeignKey<O, EntityProcessorEntitiesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private EntityProcessorEntitiesPath(Name alias, Table<EntityProcessorEntitiesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public EntityProcessorEntitiesPath as(String alias) {
            return new EntityProcessorEntitiesPath(DSL.name(alias), this);
        }

        @Override
        public EntityProcessorEntitiesPath as(Name alias) {
            return new EntityProcessorEntitiesPath(alias, this);
        }

        @Override
        public EntityProcessorEntitiesPath as(Table<?> alias) {
            return new EntityProcessorEntitiesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : EntityProcessor.ENTITY_PROCESSOR;
    }

    @Override
    public Identity<EntityProcessorEntitiesRecord, ULong> getIdentity() {
        return (Identity<EntityProcessorEntitiesRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<EntityProcessorEntitiesRecord> getPrimaryKey() {
        return Keys.KEY_ENTITY_PROCESSOR_ENTITIES_PRIMARY;
    }

    @Override
    public List<UniqueKey<EntityProcessorEntitiesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ENTITY_PROCESSOR_ENTITIES_UK1_ENTITIES_CODE);
    }

    @Override
    public List<ForeignKey<EntityProcessorEntitiesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_ENTITIES_MODEL_ID, Keys.FK2_ENTITIES_PRODUCT_ID);
    }

    private transient EntityProcessorModelsPath _entityProcessorModels;

    /**
     * Get the implicit join path to the
     * <code>entity_processor.entity_processor_models</code> table.
     */
    public EntityProcessorModelsPath entityProcessorModels() {
        if (_entityProcessorModels == null)
            _entityProcessorModels = new EntityProcessorModelsPath(this, Keys.FK1_ENTITIES_MODEL_ID, null);

        return _entityProcessorModels;
    }

    private transient EntityProcessorProductsPath _entityProcessorProducts;

    /**
     * Get the implicit join path to the
     * <code>entity_processor.entity_processor_products</code> table.
     */
    public EntityProcessorProductsPath entityProcessorProducts() {
        if (_entityProcessorProducts == null)
            _entityProcessorProducts = new EntityProcessorProductsPath(this, Keys.FK2_ENTITIES_PRODUCT_ID, null);

        return _entityProcessorProducts;
    }

    @Override
    public EntityProcessorEntities as(String alias) {
        return new EntityProcessorEntities(DSL.name(alias), this);
    }

    @Override
    public EntityProcessorEntities as(Name alias) {
        return new EntityProcessorEntities(alias, this);
    }

    @Override
    public EntityProcessorEntities as(Table<?> alias) {
        return new EntityProcessorEntities(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorEntities rename(String name) {
        return new EntityProcessorEntities(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorEntities rename(Name name) {
        return new EntityProcessorEntities(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorEntities rename(Table<?> name) {
        return new EntityProcessorEntities(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorEntities where(Condition condition) {
        return new EntityProcessorEntities(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorEntities where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorEntities where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorEntities where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorEntities where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorEntities where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorEntities where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorEntities where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorEntities whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorEntities whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
