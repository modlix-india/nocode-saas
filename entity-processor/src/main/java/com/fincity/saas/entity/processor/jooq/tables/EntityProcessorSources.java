/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.entity.processor.jooq.tables;


import com.fincity.saas.entity.processor.enums.Platform;
import com.fincity.saas.entity.processor.jooq.EntityProcessor;
import com.fincity.saas.entity.processor.jooq.Keys;
import com.fincity.saas.entity.processor.jooq.enums.EntityProcessorSourcesPlatform;
import com.fincity.saas.entity.processor.jooq.tables.EntityProcessorSources.EntityProcessorSourcesPath;
import com.fincity.saas.entity.processor.jooq.tables.EntityProcessorValueTemplates.EntityProcessorValueTemplatesPath;
import com.fincity.saas.entity.processor.jooq.tables.records.EntityProcessorSourcesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.EnumConverter;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EntityProcessorSources extends TableImpl<EntityProcessorSourcesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>entity_processor.entity_processor_sources</code>
     */
    public static final EntityProcessorSources ENTITY_PROCESSOR_SOURCES = new EntityProcessorSources();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EntityProcessorSourcesRecord> getRecordType() {
        return EntityProcessorSourcesRecord.class;
    }

    /**
     * The column <code>entity_processor.entity_processor_sources.ID</code>.
     * Primary key.
     */
    public final TableField<EntityProcessorSourcesRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key.");

    /**
     * The column
     * <code>entity_processor.entity_processor_sources.APP_CODE</code>. App Code
     * on which this source was created.
     */
    public final TableField<EntityProcessorSourcesRecord, String> APP_CODE = createField(DSL.name("APP_CODE"), SQLDataType.CHAR(64).nullable(false), this, "App Code on which this source was created.");

    /**
     * The column
     * <code>entity_processor.entity_processor_sources.CLIENT_CODE</code>.
     * Client Code who created this source.
     */
    public final TableField<EntityProcessorSourcesRecord, String> CLIENT_CODE = createField(DSL.name("CLIENT_CODE"), SQLDataType.CHAR(8).nullable(false), this, "Client Code who created this source.");

    /**
     * The column <code>entity_processor.entity_processor_sources.CODE</code>.
     * Unique Code to identify this row.
     */
    public final TableField<EntityProcessorSourcesRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.CHAR(22).nullable(false), this, "Unique Code to identify this row.");

    /**
     * The column <code>entity_processor.entity_processor_sources.NAME</code>.
     * Name of the Source. Source are like Social Media, Website, Hoarding.
     */
    public final TableField<EntityProcessorSourcesRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.CHAR(32).nullable(false), this, "Name of the Source. Source are like Social Media, Website, Hoarding.");

    /**
     * The column
     * <code>entity_processor.entity_processor_sources.DESCRIPTION</code>.
     * Description for the Source.
     */
    public final TableField<EntityProcessorSourcesRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "Description for the Source.");

    /**
     * The column
     * <code>entity_processor.entity_processor_sources.ADDED_BY_USER_ID</code>.
     * User which added this Source.
     */
    public final TableField<EntityProcessorSourcesRecord, ULong> ADDED_BY_USER_ID = createField(DSL.name("ADDED_BY_USER_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "User which added this Source.");

    /**
     * The column
     * <code>entity_processor.entity_processor_sources.PLATFORM</code>. Platform
     * is where this source will be displayed in CRM, can be GLOBAL,
     * PRE_QUALIFICATION, QUALIFICATION or MAIN.
     */
    public final TableField<EntityProcessorSourcesRecord, Platform> PLATFORM = createField(DSL.name("PLATFORM"), SQLDataType.VARCHAR(17).nullable(false).defaultValue(DSL.inline("GLOBAL", SQLDataType.VARCHAR)).asEnumDataType(EntityProcessorSourcesPlatform.class), this, "Platform is where this source will be displayed in CRM, can be GLOBAL, PRE_QUALIFICATION, QUALIFICATION or MAIN.", new EnumConverter<EntityProcessorSourcesPlatform, Platform>(EntityProcessorSourcesPlatform.class, Platform.class));

    /**
     * The column
     * <code>entity_processor.entity_processor_sources.VALUE_TEMPLATE_ID</code>.
     * Value Template related to this Source.
     */
    public final TableField<EntityProcessorSourcesRecord, ULong> VALUE_TEMPLATE_ID = createField(DSL.name("VALUE_TEMPLATE_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Value Template related to this Source.");

    /**
     * The column
     * <code>entity_processor.entity_processor_sources.IS_PARENT</code>. Is this
     * the main Source or not.
     */
    public final TableField<EntityProcessorSourcesRecord, Byte> IS_PARENT = createField(DSL.name("IS_PARENT"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "Is this the main Source or not.");

    /**
     * The column
     * <code>entity_processor.entity_processor_sources.PARENT_LEVEL_0</code>.
     * Parent source for this source.
     */
    public final TableField<EntityProcessorSourcesRecord, ULong> PARENT_LEVEL_0 = createField(DSL.name("PARENT_LEVEL_0"), SQLDataType.BIGINTUNSIGNED, this, "Parent source for this source.");

    /**
     * The column
     * <code>entity_processor.entity_processor_sources.PARENT_LEVEL_1</code>.
     * Parent source level 1 for this source.
     */
    public final TableField<EntityProcessorSourcesRecord, ULong> PARENT_LEVEL_1 = createField(DSL.name("PARENT_LEVEL_1"), SQLDataType.BIGINTUNSIGNED, this, "Parent source level 1 for this source.");

    /**
     * The column
     * <code>entity_processor.entity_processor_sources.TEMP_ACTIVE</code>.
     * Temporary active flag fro this product.
     */
    public final TableField<EntityProcessorSourcesRecord, Byte> TEMP_ACTIVE = createField(DSL.name("TEMP_ACTIVE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Temporary active flag fro this product.");

    /**
     * The column
     * <code>entity_processor.entity_processor_sources.IS_ACTIVE</code>. Flag to
     * check if this product is active or not.
     */
    public final TableField<EntityProcessorSourcesRecord, Byte> IS_ACTIVE = createField(DSL.name("IS_ACTIVE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "Flag to check if this product is active or not.");

    /**
     * The column
     * <code>entity_processor.entity_processor_sources.CREATED_BY</code>. ID of
     * the user who created this row.
     */
    public final TableField<EntityProcessorSourcesRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_sources.CREATED_AT</code>. Time
     * when this row is created.
     */
    public final TableField<EntityProcessorSourcesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created.");

    /**
     * The column
     * <code>entity_processor.entity_processor_sources.UPDATED_BY</code>. ID of
     * the user who updated this row.
     */
    public final TableField<EntityProcessorSourcesRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_sources.UPDATED_AT</code>. Time
     * when this row is updated.
     */
    public final TableField<EntityProcessorSourcesRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated.");

    private EntityProcessorSources(Name alias, Table<EntityProcessorSourcesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private EntityProcessorSources(Name alias, Table<EntityProcessorSourcesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>entity_processor.entity_processor_sources</code>
     * table reference
     */
    public EntityProcessorSources(String alias) {
        this(DSL.name(alias), ENTITY_PROCESSOR_SOURCES);
    }

    /**
     * Create an aliased <code>entity_processor.entity_processor_sources</code>
     * table reference
     */
    public EntityProcessorSources(Name alias) {
        this(alias, ENTITY_PROCESSOR_SOURCES);
    }

    /**
     * Create a <code>entity_processor.entity_processor_sources</code> table
     * reference
     */
    public EntityProcessorSources() {
        this(DSL.name("entity_processor_sources"), null);
    }

    public <O extends Record> EntityProcessorSources(Table<O> path, ForeignKey<O, EntityProcessorSourcesRecord> childPath, InverseForeignKey<O, EntityProcessorSourcesRecord> parentPath) {
        super(path, childPath, parentPath, ENTITY_PROCESSOR_SOURCES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class EntityProcessorSourcesPath extends EntityProcessorSources implements Path<EntityProcessorSourcesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> EntityProcessorSourcesPath(Table<O> path, ForeignKey<O, EntityProcessorSourcesRecord> childPath, InverseForeignKey<O, EntityProcessorSourcesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private EntityProcessorSourcesPath(Name alias, Table<EntityProcessorSourcesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public EntityProcessorSourcesPath as(String alias) {
            return new EntityProcessorSourcesPath(DSL.name(alias), this);
        }

        @Override
        public EntityProcessorSourcesPath as(Name alias) {
            return new EntityProcessorSourcesPath(alias, this);
        }

        @Override
        public EntityProcessorSourcesPath as(Table<?> alias) {
            return new EntityProcessorSourcesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : EntityProcessor.ENTITY_PROCESSOR;
    }

    @Override
    public Identity<EntityProcessorSourcesRecord, ULong> getIdentity() {
        return (Identity<EntityProcessorSourcesRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<EntityProcessorSourcesRecord> getPrimaryKey() {
        return Keys.KEY_ENTITY_PROCESSOR_SOURCES_PRIMARY;
    }

    @Override
    public List<UniqueKey<EntityProcessorSourcesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ENTITY_PROCESSOR_SOURCES_UK1_SOURCES_CODE, Keys.KEY_ENTITY_PROCESSOR_SOURCES_UK2_SOURCES_NAME);
    }

    @Override
    public List<ForeignKey<EntityProcessorSourcesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_SOURCES_VALUE_TEMPLATE_ID, Keys.FK2_SOURCES_PARENT_LEVEL_0, Keys.FK3_SOURCES_PARENT_LEVEL_1);
    }

    private transient EntityProcessorValueTemplatesPath _entityProcessorValueTemplates;

    /**
     * Get the implicit join path to the
     * <code>entity_processor.entity_processor_value_templates</code> table.
     */
    public EntityProcessorValueTemplatesPath entityProcessorValueTemplates() {
        if (_entityProcessorValueTemplates == null)
            _entityProcessorValueTemplates = new EntityProcessorValueTemplatesPath(this, Keys.FK1_SOURCES_VALUE_TEMPLATE_ID, null);

        return _entityProcessorValueTemplates;
    }

    private transient EntityProcessorSourcesPath _fk2SourcesParentLevel_0;

    /**
     * Get the implicit join path to the
     * <code>entity_processor.entity_processor_sources</code> table, via the
     * <code>FK2_SOURCES_PARENT_LEVEL_0</code> key.
     */
    public EntityProcessorSourcesPath fk2SourcesParentLevel_0() {
        if (_fk2SourcesParentLevel_0 == null)
            _fk2SourcesParentLevel_0 = new EntityProcessorSourcesPath(this, Keys.FK2_SOURCES_PARENT_LEVEL_0, null);

        return _fk2SourcesParentLevel_0;
    }

    private transient EntityProcessorSourcesPath _fk3SourcesParentLevel_1;

    /**
     * Get the implicit join path to the
     * <code>entity_processor.entity_processor_sources</code> table, via the
     * <code>FK3_SOURCES_PARENT_LEVEL_1</code> key.
     */
    public EntityProcessorSourcesPath fk3SourcesParentLevel_1() {
        if (_fk3SourcesParentLevel_1 == null)
            _fk3SourcesParentLevel_1 = new EntityProcessorSourcesPath(this, Keys.FK3_SOURCES_PARENT_LEVEL_1, null);

        return _fk3SourcesParentLevel_1;
    }

    @Override
    public EntityProcessorSources as(String alias) {
        return new EntityProcessorSources(DSL.name(alias), this);
    }

    @Override
    public EntityProcessorSources as(Name alias) {
        return new EntityProcessorSources(alias, this);
    }

    @Override
    public EntityProcessorSources as(Table<?> alias) {
        return new EntityProcessorSources(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorSources rename(String name) {
        return new EntityProcessorSources(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorSources rename(Name name) {
        return new EntityProcessorSources(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorSources rename(Table<?> name) {
        return new EntityProcessorSources(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorSources where(Condition condition) {
        return new EntityProcessorSources(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorSources where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorSources where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorSources where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorSources where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorSources where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorSources where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorSources where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorSources whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorSources whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
