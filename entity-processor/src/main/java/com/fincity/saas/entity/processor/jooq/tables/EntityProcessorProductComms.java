/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.entity.processor.jooq.tables;


import com.fincity.saas.entity.processor.jooq.EntityProcessor;
import com.fincity.saas.entity.processor.jooq.Indexes;
import com.fincity.saas.entity.processor.jooq.Keys;
import com.fincity.saas.entity.processor.jooq.tables.EntityProcessorProducts.EntityProcessorProductsPath;
import com.fincity.saas.entity.processor.jooq.tables.records.EntityProcessorProductCommsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EntityProcessorProductComms extends TableImpl<EntityProcessorProductCommsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>entity_processor.entity_processor_product_comms</code>
     */
    public static final EntityProcessorProductComms ENTITY_PROCESSOR_PRODUCT_COMMS = new EntityProcessorProductComms();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EntityProcessorProductCommsRecord> getRecordType() {
        return EntityProcessorProductCommsRecord.class;
    }

    /**
     * The column
     * <code>entity_processor.entity_processor_product_comms.ID</code>. Primary
     * key.
     */
    public final TableField<EntityProcessorProductCommsRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_comms.APP_CODE</code>.
     * App Code on which this Product Comm was created.
     */
    public final TableField<EntityProcessorProductCommsRecord, String> APP_CODE = createField(DSL.name("APP_CODE"), SQLDataType.CHAR(64).nullable(false), this, "App Code on which this Product Comm was created.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_comms.CLIENT_CODE</code>.
     * Client Code who added this Product Comm.
     */
    public final TableField<EntityProcessorProductCommsRecord, String> CLIENT_CODE = createField(DSL.name("CLIENT_CODE"), SQLDataType.CHAR(8).nullable(false), this, "Client Code who added this Product Comm.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_comms.CODE</code>. Unique
     * Code to identify this row.
     */
    public final TableField<EntityProcessorProductCommsRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.CHAR(22).nullable(false), this, "Unique Code to identify this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_comms.NAME</code>. Name
     * of the Product Comm.
     */
    public final TableField<EntityProcessorProductCommsRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(512).nullable(false), this, "Name of the Product Comm.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_comms.DESCRIPTION</code>.
     * Description for the Product Comm.
     */
    public final TableField<EntityProcessorProductCommsRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "Description for the Product Comm.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_comms.CONNECTION_NAME</code>.
     * Name of the connection used for the productComm.
     */
    public final TableField<EntityProcessorProductCommsRecord, String> CONNECTION_NAME = createField(DSL.name("CONNECTION_NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "Name of the connection used for the productComm.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_comms.CONNECTION_TYPE</code>.
     * Type of the connection used for the productComm.
     */
    public final TableField<EntityProcessorProductCommsRecord, String> CONNECTION_TYPE = createField(DSL.name("CONNECTION_TYPE"), SQLDataType.CHAR(50).nullable(false), this, "Type of the connection used for the productComm.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_comms.PRODUCT_ID</code>.
     * Product ID for which this Comm is created.
     */
    public final TableField<EntityProcessorProductCommsRecord, ULong> PRODUCT_ID = createField(DSL.name("PRODUCT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Product ID for which this Comm is created.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_comms.DIAL_CODE</code>.
     * Dial code of the phone number this Product Comm has.
     */
    public final TableField<EntityProcessorProductCommsRecord, Short> DIAL_CODE = createField(DSL.name("DIAL_CODE"), SQLDataType.SMALLINT.defaultValue(DSL.inline("91", SQLDataType.SMALLINT)), this, "Dial code of the phone number this Product Comm has.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_comms.PHONE_NUMBER</code>.
     * Phone number related to this Product Comm.
     */
    public final TableField<EntityProcessorProductCommsRecord, String> PHONE_NUMBER = createField(DSL.name("PHONE_NUMBER"), SQLDataType.CHAR(15), this, "Phone number related to this Product Comm.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_comms.EMAIL</code>. Email
     * related to this Product Comm.
     */
    public final TableField<EntityProcessorProductCommsRecord, String> EMAIL = createField(DSL.name("EMAIL"), SQLDataType.VARCHAR(512), this, "Email related to this Product Comm.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_comms.IS_DEFAULT</code>.
     * Flag to check if this Product Comm is default or not.
     */
    public final TableField<EntityProcessorProductCommsRecord, Byte> IS_DEFAULT = createField(DSL.name("IS_DEFAULT"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Flag to check if this Product Comm is default or not.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_comms.TEMP_ACTIVE</code>.
     * Temporary active flag for this Product Comm.
     */
    public final TableField<EntityProcessorProductCommsRecord, Byte> TEMP_ACTIVE = createField(DSL.name("TEMP_ACTIVE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Temporary active flag for this Product Comm.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_comms.IS_ACTIVE</code>.
     * Flag to check if this Product Comm is active or not.
     */
    public final TableField<EntityProcessorProductCommsRecord, Byte> IS_ACTIVE = createField(DSL.name("IS_ACTIVE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "Flag to check if this Product Comm is active or not.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_comms.CREATED_BY</code>.
     * ID of the user who created this row.
     */
    public final TableField<EntityProcessorProductCommsRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_comms.CREATED_AT</code>.
     * Time when this row is created.
     */
    public final TableField<EntityProcessorProductCommsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_comms.UPDATED_BY</code>.
     * ID of the user who updated this row.
     */
    public final TableField<EntityProcessorProductCommsRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_product_comms.UPDATED_AT</code>.
     * Time when this row is updated.
     */
    public final TableField<EntityProcessorProductCommsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated.");

    private EntityProcessorProductComms(Name alias, Table<EntityProcessorProductCommsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private EntityProcessorProductComms(Name alias, Table<EntityProcessorProductCommsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased
     * <code>entity_processor.entity_processor_product_comms</code> table
     * reference
     */
    public EntityProcessorProductComms(String alias) {
        this(DSL.name(alias), ENTITY_PROCESSOR_PRODUCT_COMMS);
    }

    /**
     * Create an aliased
     * <code>entity_processor.entity_processor_product_comms</code> table
     * reference
     */
    public EntityProcessorProductComms(Name alias) {
        this(alias, ENTITY_PROCESSOR_PRODUCT_COMMS);
    }

    /**
     * Create a <code>entity_processor.entity_processor_product_comms</code>
     * table reference
     */
    public EntityProcessorProductComms() {
        this(DSL.name("entity_processor_product_comms"), null);
    }

    public <O extends Record> EntityProcessorProductComms(Table<O> path, ForeignKey<O, EntityProcessorProductCommsRecord> childPath, InverseForeignKey<O, EntityProcessorProductCommsRecord> parentPath) {
        super(path, childPath, parentPath, ENTITY_PROCESSOR_PRODUCT_COMMS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class EntityProcessorProductCommsPath extends EntityProcessorProductComms implements Path<EntityProcessorProductCommsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> EntityProcessorProductCommsPath(Table<O> path, ForeignKey<O, EntityProcessorProductCommsRecord> childPath, InverseForeignKey<O, EntityProcessorProductCommsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private EntityProcessorProductCommsPath(Name alias, Table<EntityProcessorProductCommsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public EntityProcessorProductCommsPath as(String alias) {
            return new EntityProcessorProductCommsPath(DSL.name(alias), this);
        }

        @Override
        public EntityProcessorProductCommsPath as(Name alias) {
            return new EntityProcessorProductCommsPath(alias, this);
        }

        @Override
        public EntityProcessorProductCommsPath as(Table<?> alias) {
            return new EntityProcessorProductCommsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : EntityProcessor.ENTITY_PROCESSOR;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ENTITY_PROCESSOR_PRODUCT_COMMS_IDX1_PRODUCT_COMMS_APP_CLIENT_PRODUCT, Indexes.ENTITY_PROCESSOR_PRODUCT_COMMS_IDX2_PRODUCT_COMMS_AC_CC_PRODUCT_CONNECTION, Indexes.ENTITY_PROCESSOR_PRODUCT_COMMS_IDX3_PRODUCT_COMMS_AC_CC_PRODUCT_IS_DEFAULT, Indexes.ENTITY_PROCESSOR_PRODUCT_COMMS_IDX4_PRODUCT_COMMS_AC_CC_PRODUCT_DIAL_PHONE, Indexes.ENTITY_PROCESSOR_PRODUCT_COMMS_IDX5_PRODUCT_COMMS_AC_CC_PRODUCT_EMAIL);
    }

    @Override
    public Identity<EntityProcessorProductCommsRecord, ULong> getIdentity() {
        return (Identity<EntityProcessorProductCommsRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<EntityProcessorProductCommsRecord> getPrimaryKey() {
        return Keys.KEY_ENTITY_PROCESSOR_PRODUCT_COMMS_PRIMARY;
    }

    @Override
    public List<UniqueKey<EntityProcessorProductCommsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ENTITY_PROCESSOR_PRODUCT_COMMS_UK1_PRODUCT_COMMS_CODE);
    }

    @Override
    public List<ForeignKey<EntityProcessorProductCommsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_PRODUCT_COMMS_PRODUCT_ID);
    }

    private transient EntityProcessorProductsPath _entityProcessorProducts;

    /**
     * Get the implicit join path to the
     * <code>entity_processor.entity_processor_products</code> table.
     */
    public EntityProcessorProductsPath entityProcessorProducts() {
        if (_entityProcessorProducts == null)
            _entityProcessorProducts = new EntityProcessorProductsPath(this, Keys.FK1_PRODUCT_COMMS_PRODUCT_ID, null);

        return _entityProcessorProducts;
    }

    @Override
    public EntityProcessorProductComms as(String alias) {
        return new EntityProcessorProductComms(DSL.name(alias), this);
    }

    @Override
    public EntityProcessorProductComms as(Name alias) {
        return new EntityProcessorProductComms(alias, this);
    }

    @Override
    public EntityProcessorProductComms as(Table<?> alias) {
        return new EntityProcessorProductComms(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorProductComms rename(String name) {
        return new EntityProcessorProductComms(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorProductComms rename(Name name) {
        return new EntityProcessorProductComms(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorProductComms rename(Table<?> name) {
        return new EntityProcessorProductComms(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorProductComms where(Condition condition) {
        return new EntityProcessorProductComms(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorProductComms where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorProductComms where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorProductComms where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorProductComms where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorProductComms where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorProductComms where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorProductComms where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorProductComms whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorProductComms whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
