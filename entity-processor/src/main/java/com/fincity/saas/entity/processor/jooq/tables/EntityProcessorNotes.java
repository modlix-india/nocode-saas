/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.entity.processor.jooq.tables;


import com.fincity.saas.entity.processor.enums.content.ContentEntitySeries;
import com.fincity.saas.entity.processor.jooq.EntityProcessor;
import com.fincity.saas.entity.processor.jooq.Keys;
import com.fincity.saas.entity.processor.jooq.tables.EntityProcessorActivities.EntityProcessorActivitiesPath;
import com.fincity.saas.entity.processor.jooq.tables.EntityProcessorOwners.EntityProcessorOwnersPath;
import com.fincity.saas.entity.processor.jooq.tables.EntityProcessorTickets.EntityProcessorTicketsPath;
import com.fincity.saas.entity.processor.jooq.tables.records.EntityProcessorNotesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.EnumConverter;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EntityProcessorNotes extends TableImpl<EntityProcessorNotesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>entity_processor.entity_processor_notes</code>
     */
    public static final EntityProcessorNotes ENTITY_PROCESSOR_NOTES = new EntityProcessorNotes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EntityProcessorNotesRecord> getRecordType() {
        return EntityProcessorNotesRecord.class;
    }

    /**
     * The column <code>entity_processor.entity_processor_notes.ID</code>.
     * Primary key.
     */
    public final TableField<EntityProcessorNotesRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key.");

    /**
     * The column <code>entity_processor.entity_processor_notes.APP_CODE</code>.
     * App Code on which this note was created.
     */
    public final TableField<EntityProcessorNotesRecord, String> APP_CODE = createField(DSL.name("APP_CODE"), SQLDataType.CHAR(64).nullable(false), this, "App Code on which this note was created.");

    /**
     * The column
     * <code>entity_processor.entity_processor_notes.CLIENT_CODE</code>. Client
     * Code who created this note.
     */
    public final TableField<EntityProcessorNotesRecord, String> CLIENT_CODE = createField(DSL.name("CLIENT_CODE"), SQLDataType.CHAR(8).nullable(false), this, "Client Code who created this note.");

    /**
     * The column <code>entity_processor.entity_processor_notes.CODE</code>.
     * Unique Code to identify this row.
     */
    public final TableField<EntityProcessorNotesRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.CHAR(22).nullable(false), this, "Unique Code to identify this row.");

    /**
     * The column <code>entity_processor.entity_processor_notes.NAME</code>.
     * Name of the Note.
     */
    public final TableField<EntityProcessorNotesRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(512).nullable(false), this, "Name of the Note.");

    /**
     * The column
     * <code>entity_processor.entity_processor_notes.DESCRIPTION</code>.
     * Description for the Note.
     */
    public final TableField<EntityProcessorNotesRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "Description for the Note.");

    /**
     * The column <code>entity_processor.entity_processor_notes.VERSION</code>.
     * Version of this row.
     */
    public final TableField<EntityProcessorNotesRecord, Integer> VERSION = createField(DSL.name("VERSION"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("1", SQLDataType.INTEGER)), this, "Version of this row.");

    /**
     * The column <code>entity_processor.entity_processor_notes.CONTENT</code>.
     * Content of the note.
     */
    public final TableField<EntityProcessorNotesRecord, String> CONTENT = createField(DSL.name("CONTENT"), SQLDataType.CLOB, this, "Content of the note.");

    /**
     * The column
     * <code>entity_processor.entity_processor_notes.HAS_ATTACHMENT</code>.
     * Whether this note has attachments.
     */
    public final TableField<EntityProcessorNotesRecord, Byte> HAS_ATTACHMENT = createField(DSL.name("HAS_ATTACHMENT"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Whether this note has attachments.");

    /**
     * The column
     * <code>entity_processor.entity_processor_notes.CONTENT_ENTITY_SERIES</code>.
     * Type of entity for which this content was created
     */
    public final TableField<EntityProcessorNotesRecord, ContentEntitySeries> CONTENT_ENTITY_SERIES = createField(DSL.name("CONTENT_ENTITY_SERIES"), SQLDataType.VARCHAR(6).defaultValue(DSL.inline("TICKET", SQLDataType.VARCHAR)), this, "Type of entity for which this content was created", new EnumConverter<String, ContentEntitySeries>(String.class, ContentEntitySeries.class));

    /**
     * The column <code>entity_processor.entity_processor_notes.OWNER_ID</code>.
     * Owner related to this note.
     */
    public final TableField<EntityProcessorNotesRecord, ULong> OWNER_ID = createField(DSL.name("OWNER_ID"), SQLDataType.BIGINTUNSIGNED, this, "Owner related to this note.");

    /**
     * The column
     * <code>entity_processor.entity_processor_notes.TICKET_ID</code>. Ticket
     * related to this note.
     */
    public final TableField<EntityProcessorNotesRecord, ULong> TICKET_ID = createField(DSL.name("TICKET_ID"), SQLDataType.BIGINTUNSIGNED, this, "Ticket related to this note.");

    /**
     * The column <code>entity_processor.entity_processor_notes.USER_ID</code>.
     * Id of user for which this task was created.
     */
    public final TableField<EntityProcessorNotesRecord, ULong> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.BIGINTUNSIGNED, this, "Id of user for which this task was created.");

    /**
     * The column
     * <code>entity_processor.entity_processor_notes.CLIENT_ID</code>. Id of
     * client for which this task was created.
     */
    public final TableField<EntityProcessorNotesRecord, ULong> CLIENT_ID = createField(DSL.name("CLIENT_ID"), SQLDataType.BIGINTUNSIGNED, this, "Id of client for which this task was created.");

    /**
     * The column
     * <code>entity_processor.entity_processor_notes.TEMP_ACTIVE</code>.
     * Temporary active flag for this note.
     */
    public final TableField<EntityProcessorNotesRecord, Byte> TEMP_ACTIVE = createField(DSL.name("TEMP_ACTIVE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Temporary active flag for this note.");

    /**
     * The column
     * <code>entity_processor.entity_processor_notes.IS_ACTIVE</code>. Flag to
     * check if this note is active or not.
     */
    public final TableField<EntityProcessorNotesRecord, Byte> IS_ACTIVE = createField(DSL.name("IS_ACTIVE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "Flag to check if this note is active or not.");

    /**
     * The column
     * <code>entity_processor.entity_processor_notes.CREATED_BY</code>. ID of
     * the user who created this row.
     */
    public final TableField<EntityProcessorNotesRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_notes.CREATED_AT</code>. Time
     * when this row is created.
     */
    public final TableField<EntityProcessorNotesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created.");

    /**
     * The column
     * <code>entity_processor.entity_processor_notes.UPDATED_BY</code>. ID of
     * the user who updated this row.
     */
    public final TableField<EntityProcessorNotesRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row.");

    /**
     * The column
     * <code>entity_processor.entity_processor_notes.UPDATED_AT</code>. Time
     * when this row is updated.
     */
    public final TableField<EntityProcessorNotesRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated.");

    private EntityProcessorNotes(Name alias, Table<EntityProcessorNotesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private EntityProcessorNotes(Name alias, Table<EntityProcessorNotesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>entity_processor.entity_processor_notes</code>
     * table reference
     */
    public EntityProcessorNotes(String alias) {
        this(DSL.name(alias), ENTITY_PROCESSOR_NOTES);
    }

    /**
     * Create an aliased <code>entity_processor.entity_processor_notes</code>
     * table reference
     */
    public EntityProcessorNotes(Name alias) {
        this(alias, ENTITY_PROCESSOR_NOTES);
    }

    /**
     * Create a <code>entity_processor.entity_processor_notes</code> table
     * reference
     */
    public EntityProcessorNotes() {
        this(DSL.name("entity_processor_notes"), null);
    }

    public <O extends Record> EntityProcessorNotes(Table<O> path, ForeignKey<O, EntityProcessorNotesRecord> childPath, InverseForeignKey<O, EntityProcessorNotesRecord> parentPath) {
        super(path, childPath, parentPath, ENTITY_PROCESSOR_NOTES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class EntityProcessorNotesPath extends EntityProcessorNotes implements Path<EntityProcessorNotesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> EntityProcessorNotesPath(Table<O> path, ForeignKey<O, EntityProcessorNotesRecord> childPath, InverseForeignKey<O, EntityProcessorNotesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private EntityProcessorNotesPath(Name alias, Table<EntityProcessorNotesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public EntityProcessorNotesPath as(String alias) {
            return new EntityProcessorNotesPath(DSL.name(alias), this);
        }

        @Override
        public EntityProcessorNotesPath as(Name alias) {
            return new EntityProcessorNotesPath(alias, this);
        }

        @Override
        public EntityProcessorNotesPath as(Table<?> alias) {
            return new EntityProcessorNotesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : EntityProcessor.ENTITY_PROCESSOR;
    }

    @Override
    public Identity<EntityProcessorNotesRecord, ULong> getIdentity() {
        return (Identity<EntityProcessorNotesRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<EntityProcessorNotesRecord> getPrimaryKey() {
        return Keys.KEY_ENTITY_PROCESSOR_NOTES_PRIMARY;
    }

    @Override
    public List<UniqueKey<EntityProcessorNotesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ENTITY_PROCESSOR_NOTES_UK1_NOTES_CODE);
    }

    @Override
    public List<ForeignKey<EntityProcessorNotesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_NOTES_OWNER_ID, Keys.FK3_NOTES_TICKET_ID);
    }

    private transient EntityProcessorOwnersPath _entityProcessorOwners;

    /**
     * Get the implicit join path to the
     * <code>entity_processor.entity_processor_owners</code> table.
     */
    public EntityProcessorOwnersPath entityProcessorOwners() {
        if (_entityProcessorOwners == null)
            _entityProcessorOwners = new EntityProcessorOwnersPath(this, Keys.FK1_NOTES_OWNER_ID, null);

        return _entityProcessorOwners;
    }

    private transient EntityProcessorTicketsPath _entityProcessorTickets;

    /**
     * Get the implicit join path to the
     * <code>entity_processor.entity_processor_tickets</code> table.
     */
    public EntityProcessorTicketsPath entityProcessorTickets() {
        if (_entityProcessorTickets == null)
            _entityProcessorTickets = new EntityProcessorTicketsPath(this, Keys.FK3_NOTES_TICKET_ID, null);

        return _entityProcessorTickets;
    }

    private transient EntityProcessorActivitiesPath _entityProcessorActivities;

    /**
     * Get the implicit to-many join path to the
     * <code>entity_processor.entity_processor_activities</code> table
     */
    public EntityProcessorActivitiesPath entityProcessorActivities() {
        if (_entityProcessorActivities == null)
            _entityProcessorActivities = new EntityProcessorActivitiesPath(this, null, Keys.FK3_ACTIVITIES_NOTE_ID.getInverseKey());

        return _entityProcessorActivities;
    }

    @Override
    public EntityProcessorNotes as(String alias) {
        return new EntityProcessorNotes(DSL.name(alias), this);
    }

    @Override
    public EntityProcessorNotes as(Name alias) {
        return new EntityProcessorNotes(alias, this);
    }

    @Override
    public EntityProcessorNotes as(Table<?> alias) {
        return new EntityProcessorNotes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorNotes rename(String name) {
        return new EntityProcessorNotes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorNotes rename(Name name) {
        return new EntityProcessorNotes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityProcessorNotes rename(Table<?> name) {
        return new EntityProcessorNotes(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorNotes where(Condition condition) {
        return new EntityProcessorNotes(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorNotes where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorNotes where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorNotes where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorNotes where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorNotes where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorNotes where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EntityProcessorNotes where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorNotes whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EntityProcessorNotes whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
