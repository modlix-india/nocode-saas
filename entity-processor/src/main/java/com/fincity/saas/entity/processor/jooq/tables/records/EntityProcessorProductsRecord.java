/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.entity.processor.jooq.tables.records;


import com.fincity.saas.entity.processor.jooq.tables.EntityProcessorProducts;
import com.fincity.saas.entity.processor.oserver.files.model.FileDetail;

import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EntityProcessorProductsRecord extends UpdatableRecordImpl<EntityProcessorProductsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>entity_processor.entity_processor_products.ID</code>.
     * Primary key.
     */
    public EntityProcessorProductsRecord setId(ULong value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>entity_processor.entity_processor_products.ID</code>.
     * Primary key.
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_products.APP_CODE</code>. App
     * Code on which this notification was sent.
     */
    public EntityProcessorProductsRecord setAppCode(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_products.APP_CODE</code>. App
     * Code on which this notification was sent.
     */
    public String getAppCode() {
        return (String) get(1);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_products.CLIENT_CODE</code>.
     * Client Code to whom this notification we sent.
     */
    public EntityProcessorProductsRecord setClientCode(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_products.CLIENT_CODE</code>.
     * Client Code to whom this notification we sent.
     */
    public String getClientCode() {
        return (String) get(2);
    }

    /**
     * Setter for <code>entity_processor.entity_processor_products.CODE</code>.
     * Unique Code to identify this row.
     */
    public EntityProcessorProductsRecord setCode(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>entity_processor.entity_processor_products.CODE</code>.
     * Unique Code to identify this row.
     */
    public String getCode() {
        return (String) get(3);
    }

    /**
     * Setter for <code>entity_processor.entity_processor_products.NAME</code>.
     * Name of the Product. Product can be anything for which Tickets will be
     * created. For Example, Projects can be product for Opportunities, Board
     * can be product for Epic.
     */
    public EntityProcessorProductsRecord setName(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>entity_processor.entity_processor_products.NAME</code>.
     * Name of the Product. Product can be anything for which Tickets will be
     * created. For Example, Projects can be product for Opportunities, Board
     * can be product for Epic.
     */
    public String getName() {
        return (String) get(4);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_products.DESCRIPTION</code>.
     * Description for the Product.
     */
    public EntityProcessorProductsRecord setDescription(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_products.DESCRIPTION</code>.
     * Description for the Product.
     */
    public String getDescription() {
        return (String) get(5);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_products.VERSION</code>. Version
     * of this row.
     */
    public EntityProcessorProductsRecord setVersion(ULong value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_products.VERSION</code>. Version
     * of this row.
     */
    public ULong getVersion() {
        return (ULong) get(6);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_products.PRODUCT_TEMPLATE_ID</code>.
     * Product Template related to this Product.
     */
    public EntityProcessorProductsRecord setProductTemplateId(ULong value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_products.PRODUCT_TEMPLATE_ID</code>.
     * Product Template related to this Product.
     */
    public ULong getProductTemplateId() {
        return (ULong) get(7);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_products.PRODUCT_WALK_IN_FORM_ID</code>.
     * Walk in form related to this product.
     */
    public EntityProcessorProductsRecord setProductWalkInFormId(ULong value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_products.PRODUCT_WALK_IN_FORM_ID</code>.
     * Walk in form related to this product.
     */
    public ULong getProductWalkInFormId() {
        return (ULong) get(8);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_products.LOGO_FILE_DETAIL</code>.
     * File Details if product has a logo file
     */
    public EntityProcessorProductsRecord setLogoFileDetail(FileDetail value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_products.LOGO_FILE_DETAIL</code>.
     * File Details if product has a logo file
     */
    public FileDetail getLogoFileDetail() {
        return (FileDetail) get(9);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_products.BANNER_FILE_DETAIL</code>.
     * File Details if product has a banner file
     */
    public EntityProcessorProductsRecord setBannerFileDetail(FileDetail value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_products.BANNER_FILE_DETAIL</code>.
     * File Details if product has a banner file
     */
    public FileDetail getBannerFileDetail() {
        return (FileDetail) get(10);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_products.TEMP_ACTIVE</code>.
     * Temporary active flag for this product.
     */
    public EntityProcessorProductsRecord setTempActive(Boolean value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_products.TEMP_ACTIVE</code>.
     * Temporary active flag for this product.
     */
    public Boolean getTempActive() {
        return (Boolean) get(11);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_products.IS_ACTIVE</code>. Flag
     * to check if this product is active or not.
     */
    public EntityProcessorProductsRecord setIsActive(Boolean value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_products.IS_ACTIVE</code>. Flag
     * to check if this product is active or not.
     */
    public Boolean getIsActive() {
        return (Boolean) get(12);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_products.CLIENT_ID</code>. Id of
     * client who created this product.
     */
    public EntityProcessorProductsRecord setClientId(ULong value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_products.CLIENT_ID</code>. Id of
     * client who created this product.
     */
    public ULong getClientId() {
        return (ULong) get(13);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_products.FOR_PARTNER</code>. Flag
     * to tell whether Partner has access to this product or not.
     */
    public EntityProcessorProductsRecord setForPartner(Boolean value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_products.FOR_PARTNER</code>. Flag
     * to tell whether Partner has access to this product or not.
     */
    public Boolean getForPartner() {
        return (Boolean) get(14);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_products.CREATED_BY</code>. ID of
     * the user who created this row.
     */
    public EntityProcessorProductsRecord setCreatedBy(ULong value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_products.CREATED_BY</code>. ID of
     * the user who created this row.
     */
    public ULong getCreatedBy() {
        return (ULong) get(15);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_products.CREATED_AT</code>. Time
     * when this row is created.
     */
    public EntityProcessorProductsRecord setCreatedAt(LocalDateTime value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_products.CREATED_AT</code>. Time
     * when this row is created.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(16);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_products.UPDATED_BY</code>. ID of
     * the user who updated this row.
     */
    public EntityProcessorProductsRecord setUpdatedBy(ULong value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_products.UPDATED_BY</code>. ID of
     * the user who updated this row.
     */
    public ULong getUpdatedBy() {
        return (ULong) get(17);
    }

    /**
     * Setter for
     * <code>entity_processor.entity_processor_products.UPDATED_AT</code>. Time
     * when this row is updated.
     */
    public EntityProcessorProductsRecord setUpdatedAt(LocalDateTime value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for
     * <code>entity_processor.entity_processor_products.UPDATED_AT</code>. Time
     * when this row is updated.
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(18);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached EntityProcessorProductsRecord
     */
    public EntityProcessorProductsRecord() {
        super(EntityProcessorProducts.ENTITY_PROCESSOR_PRODUCTS);
    }

    /**
     * Create a detached, initialised EntityProcessorProductsRecord
     */
    public EntityProcessorProductsRecord(ULong id, String appCode, String clientCode, String code, String name, String description, ULong version, ULong productTemplateId, ULong productWalkInFormId, FileDetail logoFileDetail, FileDetail bannerFileDetail, Boolean tempActive, Boolean isActive, ULong clientId, Boolean forPartner, ULong createdBy, LocalDateTime createdAt, ULong updatedBy, LocalDateTime updatedAt) {
        super(EntityProcessorProducts.ENTITY_PROCESSOR_PRODUCTS);

        setId(id);
        setAppCode(appCode);
        setClientCode(clientCode);
        setCode(code);
        setName(name);
        setDescription(description);
        setVersion(version);
        setProductTemplateId(productTemplateId);
        setProductWalkInFormId(productWalkInFormId);
        setLogoFileDetail(logoFileDetail);
        setBannerFileDetail(bannerFileDetail);
        setTempActive(tempActive);
        setIsActive(isActive);
        setClientId(clientId);
        setForPartner(forPartner);
        setCreatedBy(createdBy);
        setCreatedAt(createdAt);
        setUpdatedBy(updatedBy);
        setUpdatedAt(updatedAt);
        resetChangedOnNotNull();
    }
}
