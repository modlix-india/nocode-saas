/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.notification.jooq.tables;


import com.fincity.saas.notification.jooq.Keys;
import com.fincity.saas.notification.jooq.Notification;
import com.fincity.saas.notification.jooq.tables.records.NotificationTypeRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class NotificationType extends TableImpl<NotificationTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>notification.notification_type</code>
     */
    public static final NotificationType NOTIFICATION_TYPE = new NotificationType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotificationTypeRecord> getRecordType() {
        return NotificationTypeRecord.class;
    }

    /**
     * The column <code>notification.notification_type.id</code>.
     */
    public final TableField<NotificationTypeRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>notification.notification_type.client_id</code>.
     */
    public final TableField<NotificationTypeRecord, Long> CLIENT_ID = createField(DSL.name("client_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>notification.notification_type.app_id</code>.
     */
    public final TableField<NotificationTypeRecord, Long> APP_ID = createField(DSL.name("app_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>notification.notification_type.code</code>.
     */
    public final TableField<NotificationTypeRecord, String> CODE = createField(DSL.name("code"), SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>notification.notification_type.name</code>.
     */
    public final TableField<NotificationTypeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>notification.notification_type.description</code>.
     */
    public final TableField<NotificationTypeRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>notification.notification_type.created_by</code>.
     */
    public final TableField<NotificationTypeRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>notification.notification_type.created_at</code>.
     */
    public final TableField<NotificationTypeRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>notification.notification_type.updated_by</code>.
     */
    public final TableField<NotificationTypeRecord, Long> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>notification.notification_type.updated_at</code>.
     */
    public final TableField<NotificationTypeRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private NotificationType(Name alias, Table<NotificationTypeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private NotificationType(Name alias, Table<NotificationTypeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>notification.notification_type</code> table
     * reference
     */
    public NotificationType(String alias) {
        this(DSL.name(alias), NOTIFICATION_TYPE);
    }

    /**
     * Create an aliased <code>notification.notification_type</code> table
     * reference
     */
    public NotificationType(Name alias) {
        this(alias, NOTIFICATION_TYPE);
    }

    /**
     * Create a <code>notification.notification_type</code> table reference
     */
    public NotificationType() {
        this(DSL.name("notification_type"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Notification.NOTIFICATION;
    }

    @Override
    public Identity<NotificationTypeRecord, Long> getIdentity() {
        return (Identity<NotificationTypeRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<NotificationTypeRecord> getPrimaryKey() {
        return Keys.NOTIFICATION_TYPE_PKEY;
    }

    @Override
    public List<UniqueKey<NotificationTypeRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UK1_NOTIFICATION_TYPE_CODE, Keys.UK2_NOTIFICATION_TYPE_CLIENT_ID_APP_ID_NAME);
    }

    @Override
    public List<Check<NotificationTypeRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("notification_type_app_id_check"), "((app_id > 0))", true),
            Internal.createCheck(this, DSL.name("notification_type_client_id_check"), "((client_id > 0))", true),
            Internal.createCheck(this, DSL.name("notification_type_created_by_check"), "((created_by > 0))", true),
            Internal.createCheck(this, DSL.name("notification_type_updated_by_check"), "((updated_by > 0))", true)
        );
    }

    @Override
    public NotificationType as(String alias) {
        return new NotificationType(DSL.name(alias), this);
    }

    @Override
    public NotificationType as(Name alias) {
        return new NotificationType(alias, this);
    }

    @Override
    public NotificationType as(Table<?> alias) {
        return new NotificationType(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationType rename(String name) {
        return new NotificationType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationType rename(Name name) {
        return new NotificationType(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationType rename(Table<?> name) {
        return new NotificationType(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationType where(Condition condition) {
        return new NotificationType(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationType where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationType where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationType where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationType where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationType where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationType where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationType where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationType whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationType whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
