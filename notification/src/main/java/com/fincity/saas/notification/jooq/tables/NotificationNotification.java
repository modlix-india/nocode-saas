/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.notification.jooq.tables;


import com.fincity.saas.notification.jooq.Indexes;
import com.fincity.saas.notification.jooq.Keys;
import com.fincity.saas.notification.jooq.Notification;
import com.fincity.saas.notification.jooq.tables.NotificationTemplate.NotificationTemplatePath;
import com.fincity.saas.notification.jooq.tables.NotificationType.NotificationTypePath;
import com.fincity.saas.notification.jooq.tables.records.NotificationNotificationRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class NotificationNotification extends TableImpl<NotificationNotificationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>notification.notification_notification</code>
     */
    public static final NotificationNotification NOTIFICATION_NOTIFICATION = new NotificationNotification();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotificationNotificationRecord> getRecordType() {
        return NotificationNotificationRecord.class;
    }

    /**
     * The column <code>notification.notification_notification.ID</code>.
     * Primary key
     */
    public final TableField<NotificationNotificationRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>notification.notification_notification.CLIENT_ID</code>.
     * Identifier for the client. References security_client table
     */
    public final TableField<NotificationNotificationRecord, ULong> CLIENT_ID = createField(DSL.name("CLIENT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Identifier for the client. References security_client table");

    /**
     * The column <code>notification.notification_notification.APP_ID</code>.
     * Identifier for the application. References security_app table
     */
    public final TableField<NotificationNotificationRecord, ULong> APP_ID = createField(DSL.name("APP_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Identifier for the application. References security_app table");

    /**
     * The column <code>notification.notification_notification.CODE</code>. Code
     */
    public final TableField<NotificationNotificationRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.CHAR(22).nullable(false), this, "Code");

    /**
     * The column <code>notification.notification_notification.NAME</code>.
     * Template name
     */
    public final TableField<NotificationNotificationRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.CHAR(125).nullable(false), this, "Template name");

    /**
     * The column
     * <code>notification.notification_notification.DESCRIPTION</code>.
     * Description of notification Template
     */
    public final TableField<NotificationNotificationRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "Description of notification Template");

    /**
     * The column
     * <code>notification.notification_notification.NOTIFICATION_TYPE_ID</code>.
     * Identifier for the notification type. References notification_type table
     */
    public final TableField<NotificationNotificationRecord, ULong> NOTIFICATION_TYPE_ID = createField(DSL.name("NOTIFICATION_TYPE_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Identifier for the notification type. References notification_type table");

    /**
     * The column
     * <code>notification.notification_notification.EMAIL_TEMPLATE_ID</code>.
     * Identifier for the email template. References notification_template table
     */
    public final TableField<NotificationNotificationRecord, ULong> EMAIL_TEMPLATE_ID = createField(DSL.name("EMAIL_TEMPLATE_ID"), SQLDataType.BIGINTUNSIGNED, this, "Identifier for the email template. References notification_template table");

    /**
     * The column
     * <code>notification.notification_notification.IN_APP_TEMPLATE_ID</code>.
     * Identifier for the inApp template. References notification_template table
     */
    public final TableField<NotificationNotificationRecord, ULong> IN_APP_TEMPLATE_ID = createField(DSL.name("IN_APP_TEMPLATE_ID"), SQLDataType.BIGINTUNSIGNED, this, "Identifier for the inApp template. References notification_template table");

    /**
     * The column
     * <code>notification.notification_notification.MOBILE_PUSH_TEMPLATE_ID</code>.
     * Identifier for the mobile push template. References notification_template
     * table
     */
    public final TableField<NotificationNotificationRecord, ULong> MOBILE_PUSH_TEMPLATE_ID = createField(DSL.name("MOBILE_PUSH_TEMPLATE_ID"), SQLDataType.BIGINTUNSIGNED, this, "Identifier for the mobile push template. References notification_template table");

    /**
     * The column
     * <code>notification.notification_notification.WEB_PUSH_TEMPLATE_ID</code>.
     * Identifier for the web push template. References notification_template
     * table
     */
    public final TableField<NotificationNotificationRecord, ULong> WEB_PUSH_TEMPLATE_ID = createField(DSL.name("WEB_PUSH_TEMPLATE_ID"), SQLDataType.BIGINTUNSIGNED, this, "Identifier for the web push template. References notification_template table");

    /**
     * The column
     * <code>notification.notification_notification.SMS_TEMPLATE_ID</code>.
     * Identifier for the sms template. References notification_template table
     */
    public final TableField<NotificationNotificationRecord, ULong> SMS_TEMPLATE_ID = createField(DSL.name("SMS_TEMPLATE_ID"), SQLDataType.BIGINTUNSIGNED, this, "Identifier for the sms template. References notification_template table");

    /**
     * The column
     * <code>notification.notification_notification.CREATED_BY</code>. ID of the
     * user who created this row
     */
    public final TableField<NotificationNotificationRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row");

    /**
     * The column
     * <code>notification.notification_notification.CREATED_AT</code>. Time when
     * this row is created
     */
    public final TableField<NotificationNotificationRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created");

    /**
     * The column
     * <code>notification.notification_notification.UPDATED_BY</code>. ID of the
     * user who updated this row
     */
    public final TableField<NotificationNotificationRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row");

    /**
     * The column
     * <code>notification.notification_notification.UPDATED_AT</code>. Time when
     * this row is updated
     */
    public final TableField<NotificationNotificationRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated");

    private NotificationNotification(Name alias, Table<NotificationNotificationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private NotificationNotification(Name alias, Table<NotificationNotificationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>notification.notification_notification</code>
     * table reference
     */
    public NotificationNotification(String alias) {
        this(DSL.name(alias), NOTIFICATION_NOTIFICATION);
    }

    /**
     * Create an aliased <code>notification.notification_notification</code>
     * table reference
     */
    public NotificationNotification(Name alias) {
        this(alias, NOTIFICATION_NOTIFICATION);
    }

    /**
     * Create a <code>notification.notification_notification</code> table
     * reference
     */
    public NotificationNotification() {
        this(DSL.name("notification_notification"), null);
    }

    public <O extends Record> NotificationNotification(Table<O> path, ForeignKey<O, NotificationNotificationRecord> childPath, InverseForeignKey<O, NotificationNotificationRecord> parentPath) {
        super(path, childPath, parentPath, NOTIFICATION_NOTIFICATION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class NotificationNotificationPath extends NotificationNotification implements Path<NotificationNotificationRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> NotificationNotificationPath(Table<O> path, ForeignKey<O, NotificationNotificationRecord> childPath, InverseForeignKey<O, NotificationNotificationRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private NotificationNotificationPath(Name alias, Table<NotificationNotificationRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public NotificationNotificationPath as(String alias) {
            return new NotificationNotificationPath(DSL.name(alias), this);
        }

        @Override
        public NotificationNotificationPath as(Name alias) {
            return new NotificationNotificationPath(alias, this);
        }

        @Override
        public NotificationNotificationPath as(Table<?> alias) {
            return new NotificationNotificationPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Notification.NOTIFICATION;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.NOTIFICATION_NOTIFICATION_IDX1_NOTIFICATION_CODE_CLIENT_ID_APP_ID, Indexes.NOTIFICATION_NOTIFICATION_IDX2_NOTIFICATION_CLIENT_ID_APP_ID);
    }

    @Override
    public Identity<NotificationNotificationRecord, ULong> getIdentity() {
        return (Identity<NotificationNotificationRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<NotificationNotificationRecord> getPrimaryKey() {
        return Keys.KEY_NOTIFICATION_NOTIFICATION_PRIMARY;
    }

    @Override
    public List<UniqueKey<NotificationNotificationRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_NOTIFICATION_NOTIFICATION_UK1_NOTIFICATION_CODE);
    }

    @Override
    public List<ForeignKey<NotificationNotificationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_NOTIFICATION_NOTIFICATION_TYPE, Keys.FK2_NOTIFICATION_EMAIL_TEMPLATE, Keys.FK3_NOTIFICATION_IN_APP_TEMPLATE, Keys.FK4_NOTIFICATION_SMS_TEMPLATE, Keys.FK5_NOTIFICATION_MOBILE_PUSH_TEMPLATE, Keys.FK5_NOTIFICATION_WEB_PUSH_TEMPLATE);
    }

    private transient NotificationTypePath _notificationType;

    /**
     * Get the implicit join path to the
     * <code>notification.notification_type</code> table.
     */
    public NotificationTypePath notificationType() {
        if (_notificationType == null)
            _notificationType = new NotificationTypePath(this, Keys.FK1_NOTIFICATION_NOTIFICATION_TYPE, null);

        return _notificationType;
    }

    private transient NotificationTemplatePath _fk2NotificationEmailTemplate;

    /**
     * Get the implicit join path to the
     * <code>notification.notification_template</code> table, via the
     * <code>FK2_NOTIFICATION_EMAIL_TEMPLATE</code> key.
     */
    public NotificationTemplatePath fk2NotificationEmailTemplate() {
        if (_fk2NotificationEmailTemplate == null)
            _fk2NotificationEmailTemplate = new NotificationTemplatePath(this, Keys.FK2_NOTIFICATION_EMAIL_TEMPLATE, null);

        return _fk2NotificationEmailTemplate;
    }

    private transient NotificationTemplatePath _fk3NotificationInAppTemplate;

    /**
     * Get the implicit join path to the
     * <code>notification.notification_template</code> table, via the
     * <code>FK3_NOTIFICATION_IN_APP_TEMPLATE</code> key.
     */
    public NotificationTemplatePath fk3NotificationInAppTemplate() {
        if (_fk3NotificationInAppTemplate == null)
            _fk3NotificationInAppTemplate = new NotificationTemplatePath(this, Keys.FK3_NOTIFICATION_IN_APP_TEMPLATE, null);

        return _fk3NotificationInAppTemplate;
    }

    private transient NotificationTemplatePath _fk4NotificationSmsTemplate;

    /**
     * Get the implicit join path to the
     * <code>notification.notification_template</code> table, via the
     * <code>FK4_NOTIFICATION_SMS_TEMPLATE</code> key.
     */
    public NotificationTemplatePath fk4NotificationSmsTemplate() {
        if (_fk4NotificationSmsTemplate == null)
            _fk4NotificationSmsTemplate = new NotificationTemplatePath(this, Keys.FK4_NOTIFICATION_SMS_TEMPLATE, null);

        return _fk4NotificationSmsTemplate;
    }

    private transient NotificationTemplatePath _fk5NotificationMobilePushTemplate;

    /**
     * Get the implicit join path to the
     * <code>notification.notification_template</code> table, via the
     * <code>FK5_NOTIFICATION_MOBILE_PUSH_TEMPLATE</code> key.
     */
    public NotificationTemplatePath fk5NotificationMobilePushTemplate() {
        if (_fk5NotificationMobilePushTemplate == null)
            _fk5NotificationMobilePushTemplate = new NotificationTemplatePath(this, Keys.FK5_NOTIFICATION_MOBILE_PUSH_TEMPLATE, null);

        return _fk5NotificationMobilePushTemplate;
    }

    private transient NotificationTemplatePath _fk5NotificationWebPushTemplate;

    /**
     * Get the implicit join path to the
     * <code>notification.notification_template</code> table, via the
     * <code>FK5_NOTIFICATION_WEB_PUSH_TEMPLATE</code> key.
     */
    public NotificationTemplatePath fk5NotificationWebPushTemplate() {
        if (_fk5NotificationWebPushTemplate == null)
            _fk5NotificationWebPushTemplate = new NotificationTemplatePath(this, Keys.FK5_NOTIFICATION_WEB_PUSH_TEMPLATE, null);

        return _fk5NotificationWebPushTemplate;
    }

    @Override
    public NotificationNotification as(String alias) {
        return new NotificationNotification(DSL.name(alias), this);
    }

    @Override
    public NotificationNotification as(Name alias) {
        return new NotificationNotification(alias, this);
    }

    @Override
    public NotificationNotification as(Table<?> alias) {
        return new NotificationNotification(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationNotification rename(String name) {
        return new NotificationNotification(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationNotification rename(Name name) {
        return new NotificationNotification(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationNotification rename(Table<?> name) {
        return new NotificationNotification(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationNotification where(Condition condition) {
        return new NotificationNotification(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationNotification where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationNotification where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationNotification where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationNotification where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationNotification where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationNotification where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationNotification where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationNotification whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationNotification whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
