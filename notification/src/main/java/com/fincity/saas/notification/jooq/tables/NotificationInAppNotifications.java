/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.notification.jooq.tables;


import com.fincity.saas.commons.core.enums.notification.NotificationType;
import com.fincity.saas.commons.jooq.convertor.jooq.converters.JSONtoClassConverter;
import com.fincity.saas.notification.enums.NotificationDeliveryStatus;
import com.fincity.saas.notification.enums.NotificationStage;
import com.fincity.saas.notification.jooq.Indexes;
import com.fincity.saas.notification.jooq.Keys;
import com.fincity.saas.notification.jooq.Notification;
import com.fincity.saas.notification.jooq.enums.NotificationInAppNotificationsNotificationDeliveryStatus;
import com.fincity.saas.notification.jooq.enums.NotificationInAppNotificationsNotificationStage;
import com.fincity.saas.notification.jooq.enums.NotificationInAppNotificationsNotificationType;
import com.fincity.saas.notification.jooq.tables.records.NotificationInAppNotificationsRecord;
import com.fincity.saas.notification.model.message.channel.InAppMessage;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.Map;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.AutoConverter;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class NotificationInAppNotifications extends TableImpl<NotificationInAppNotificationsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>notification.notification_in_app_notifications</code>
     */
    public static final NotificationInAppNotifications NOTIFICATION_IN_APP_NOTIFICATIONS = new NotificationInAppNotifications();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotificationInAppNotificationsRecord> getRecordType() {
        return NotificationInAppNotificationsRecord.class;
    }

    /**
     * The column
     * <code>notification.notification_in_app_notifications.ID</code>. Primary
     * key
     */
    public final TableField<NotificationInAppNotificationsRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column
     * <code>notification.notification_in_app_notifications.CODE</code>. Unique
     * Code to identify this row
     */
    public final TableField<NotificationInAppNotificationsRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.CHAR(22).nullable(false), this, "Unique Code to identify this row");

    /**
     * The column
     * <code>notification.notification_in_app_notifications.APP_CODE</code>. App
     * Code on which this notification was sent. References security_app table
     */
    public final TableField<NotificationInAppNotificationsRecord, String> APP_CODE = createField(DSL.name("APP_CODE"), SQLDataType.CHAR(64).nullable(false), this, "App Code on which this notification was sent. References security_app table");

    /**
     * The column
     * <code>notification.notification_in_app_notifications.CLIENT_CODE</code>.
     * Client Code to whom this notification we sent. References security_user
     * table
     */
    public final TableField<NotificationInAppNotificationsRecord, String> CLIENT_CODE = createField(DSL.name("CLIENT_CODE"), SQLDataType.CHAR(8).nullable(false), this, "Client Code to whom this notification we sent. References security_user table");

    /**
     * The column
     * <code>notification.notification_in_app_notifications.USER_ID</code>.
     * Identifier for the user. References security_user table
     */
    public final TableField<NotificationInAppNotificationsRecord, ULong> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Identifier for the user. References security_user table");

    /**
     * The column
     * <code>notification.notification_in_app_notifications.NOTIFICATION_TYPE</code>.
     * Type of notification that is sent
     */
    public final TableField<NotificationInAppNotificationsRecord, NotificationType> NOTIFICATION_TYPE = createField(DSL.name("NOTIFICATION_TYPE"), SQLDataType.VARCHAR(11).nullable(false).defaultValue(DSL.inline("INFO", SQLDataType.VARCHAR)).asEnumDataType(NotificationInAppNotificationsNotificationType.class), this, "Type of notification that is sent", new AutoConverter<NotificationInAppNotificationsNotificationType, NotificationType>(NotificationInAppNotificationsNotificationType.class, NotificationType.class));

    /**
     * The column
     * <code>notification.notification_in_app_notifications.IN_APP_MESSAGE</code>.
     * In-App Notification message that is sent
     */
    public final TableField<NotificationInAppNotificationsRecord, InAppMessage> IN_APP_MESSAGE = createField(DSL.name("IN_APP_MESSAGE"), SQLDataType.JSON.nullable(false), this, "In-App Notification message that is sent", new JSONtoClassConverter<JSON, InAppMessage>(JSON.class, InAppMessage.class));

    /**
     * The column
     * <code>notification.notification_in_app_notifications.NOTIFICATION_STAGE</code>.
     * Stage of the notification that is sent
     */
    public final TableField<NotificationInAppNotificationsRecord, NotificationStage> NOTIFICATION_STAGE = createField(DSL.name("NOTIFICATION_STAGE"), SQLDataType.VARCHAR(8).nullable(false).defaultValue(DSL.inline("PLATFORM", SQLDataType.VARCHAR)).asEnumDataType(NotificationInAppNotificationsNotificationStage.class), this, "Stage of the notification that is sent", new AutoConverter<NotificationInAppNotificationsNotificationStage, NotificationStage>(NotificationInAppNotificationsNotificationStage.class, NotificationStage.class));

    /**
     * The column
     * <code>notification.notification_in_app_notifications.NOTIFICATION_DELIVERY_STATUS</code>.
     * Current Delivery status of this notification message
     */
    public final TableField<NotificationInAppNotificationsRecord, NotificationDeliveryStatus> NOTIFICATION_DELIVERY_STATUS = createField(DSL.name("NOTIFICATION_DELIVERY_STATUS"), SQLDataType.VARCHAR(9).nullable(false).defaultValue(DSL.inline("NO_INFO", SQLDataType.VARCHAR)).asEnumDataType(NotificationInAppNotificationsNotificationDeliveryStatus.class), this, "Current Delivery status of this notification message", new AutoConverter<NotificationInAppNotificationsNotificationDeliveryStatus, NotificationDeliveryStatus>(NotificationInAppNotificationsNotificationDeliveryStatus.class, NotificationDeliveryStatus.class));

    /**
     * The column
     * <code>notification.notification_in_app_notifications.ACTIONS</code>.
     * Actions to be performed on this notification
     */
    public final TableField<NotificationInAppNotificationsRecord, Map> ACTIONS = createField(DSL.name("ACTIONS"), SQLDataType.JSON, this, "Actions to be performed on this notification", new JSONtoClassConverter<JSON, Map>(JSON.class, Map.class));

    /**
     * The column
     * <code>notification.notification_in_app_notifications.TRIGGER_TIME</code>.
     * Time when the notification was triggered
     */
    public final TableField<NotificationInAppNotificationsRecord, LocalDateTime> TRIGGER_TIME = createField(DSL.name("TRIGGER_TIME"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "Time when the notification was triggered");

    /**
     * The column
     * <code>notification.notification_in_app_notifications.SENT</code>. Is this
     * notification is sent or not
     */
    public final TableField<NotificationInAppNotificationsRecord, Byte> SENT = createField(DSL.name("SENT"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Is this notification is sent or not");

    /**
     * The column
     * <code>notification.notification_in_app_notifications.SENT_TIME</code>.
     * Time when this notification was sent
     */
    public final TableField<NotificationInAppNotificationsRecord, LocalDateTime> SENT_TIME = createField(DSL.name("SENT_TIME"), SQLDataType.LOCALDATETIME(0), this, "Time when this notification was sent");

    /**
     * The column
     * <code>notification.notification_in_app_notifications.DELIVERED</code>. Is
     * this notification is delivered or not
     */
    public final TableField<NotificationInAppNotificationsRecord, Byte> DELIVERED = createField(DSL.name("DELIVERED"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Is this notification is delivered or not");

    /**
     * The column
     * <code>notification.notification_in_app_notifications.DELIVERED_TIME</code>.
     * Time when this notification was delivered to user
     */
    public final TableField<NotificationInAppNotificationsRecord, LocalDateTime> DELIVERED_TIME = createField(DSL.name("DELIVERED_TIME"), SQLDataType.LOCALDATETIME(0), this, "Time when this notification was delivered to user");

    /**
     * The column
     * <code>notification.notification_in_app_notifications.READ</code>. Is this
     * notification is read or not
     */
    public final TableField<NotificationInAppNotificationsRecord, Byte> READ = createField(DSL.name("READ"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Is this notification is read or not");

    /**
     * The column
     * <code>notification.notification_in_app_notifications.READ_TIME</code>.
     * Time when this notification was read by user
     */
    public final TableField<NotificationInAppNotificationsRecord, LocalDateTime> READ_TIME = createField(DSL.name("READ_TIME"), SQLDataType.LOCALDATETIME(0), this, "Time when this notification was read by user");

    /**
     * The column
     * <code>notification.notification_in_app_notifications.FAILED</code>. Is
     * this notification is failed or not
     */
    public final TableField<NotificationInAppNotificationsRecord, Byte> FAILED = createField(DSL.name("FAILED"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Is this notification is failed or not");

    /**
     * The column
     * <code>notification.notification_in_app_notifications.FAILED_TIME</code>.
     * Time when this notification was failed
     */
    public final TableField<NotificationInAppNotificationsRecord, LocalDateTime> FAILED_TIME = createField(DSL.name("FAILED_TIME"), SQLDataType.LOCALDATETIME(0), this, "Time when this notification was failed");

    /**
     * The column
     * <code>notification.notification_in_app_notifications.CREATED_BY</code>.
     * ID of the user who created this row
     */
    public final TableField<NotificationInAppNotificationsRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row");

    /**
     * The column
     * <code>notification.notification_in_app_notifications.CREATED_AT</code>.
     * Time when this row is created
     */
    public final TableField<NotificationInAppNotificationsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created");

    /**
     * The column
     * <code>notification.notification_in_app_notifications.UPDATED_BY</code>.
     * ID of the user who updated this row
     */
    public final TableField<NotificationInAppNotificationsRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row");

    /**
     * The column
     * <code>notification.notification_in_app_notifications.UPDATED_AT</code>.
     * Time when this row is updated
     */
    public final TableField<NotificationInAppNotificationsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated");

    private NotificationInAppNotifications(Name alias, Table<NotificationInAppNotificationsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private NotificationInAppNotifications(Name alias, Table<NotificationInAppNotificationsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased
     * <code>notification.notification_in_app_notifications</code> table
     * reference
     */
    public NotificationInAppNotifications(String alias) {
        this(DSL.name(alias), NOTIFICATION_IN_APP_NOTIFICATIONS);
    }

    /**
     * Create an aliased
     * <code>notification.notification_in_app_notifications</code> table
     * reference
     */
    public NotificationInAppNotifications(Name alias) {
        this(alias, NOTIFICATION_IN_APP_NOTIFICATIONS);
    }

    /**
     * Create a <code>notification.notification_in_app_notifications</code>
     * table reference
     */
    public NotificationInAppNotifications() {
        this(DSL.name("notification_in_app_notifications"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Notification.NOTIFICATION;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.NOTIFICATION_IN_APP_NOTIFICATIONS_IDX1_SENT_NOTIFICATION_APP_CODE_CLIENT_CODE_USER_ID, Indexes.NOTIFICATION_IN_APP_NOTIFICATIONS_IDX2_SENT_NOTIFICATION_APP_CODE_CLIENT_CODE, Indexes.NOTIFICATION_IN_APP_NOTIFICATIONS_IDX3_SENT_NOTIFICATION_CREATED_AT);
    }

    @Override
    public Identity<NotificationInAppNotificationsRecord, ULong> getIdentity() {
        return (Identity<NotificationInAppNotificationsRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<NotificationInAppNotificationsRecord> getPrimaryKey() {
        return Keys.KEY_NOTIFICATION_IN_APP_NOTIFICATIONS_PRIMARY;
    }

    @Override
    public List<UniqueKey<NotificationInAppNotificationsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_NOTIFICATION_IN_APP_NOTIFICATIONS_UK1_IN_APP_NOTIFICATION_CODE);
    }

    @Override
    public NotificationInAppNotifications as(String alias) {
        return new NotificationInAppNotifications(DSL.name(alias), this);
    }

    @Override
    public NotificationInAppNotifications as(Name alias) {
        return new NotificationInAppNotifications(alias, this);
    }

    @Override
    public NotificationInAppNotifications as(Table<?> alias) {
        return new NotificationInAppNotifications(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationInAppNotifications rename(String name) {
        return new NotificationInAppNotifications(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationInAppNotifications rename(Name name) {
        return new NotificationInAppNotifications(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationInAppNotifications rename(Table<?> name) {
        return new NotificationInAppNotifications(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationInAppNotifications where(Condition condition) {
        return new NotificationInAppNotifications(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationInAppNotifications where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationInAppNotifications where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationInAppNotifications where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationInAppNotifications where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationInAppNotifications where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationInAppNotifications where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationInAppNotifications where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationInAppNotifications whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationInAppNotifications whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
