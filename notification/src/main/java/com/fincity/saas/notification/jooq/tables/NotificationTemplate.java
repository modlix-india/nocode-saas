/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.notification.jooq.tables;


import com.fincity.saas.notification.enums.NotificationChannelType;
import com.fincity.saas.notification.jooq.Indexes;
import com.fincity.saas.notification.jooq.Keys;
import com.fincity.saas.notification.jooq.Notification;
import com.fincity.saas.notification.jooq.tables.records.NotificationTemplateRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.EnumConverter;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class NotificationTemplate extends TableImpl<NotificationTemplateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>notification.notification_template</code>
     */
    public static final NotificationTemplate NOTIFICATION_TEMPLATE = new NotificationTemplate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotificationTemplateRecord> getRecordType() {
        return NotificationTemplateRecord.class;
    }

    /**
     * The column <code>notification.notification_template.ID</code>. Primary
     * key
     */
    public final TableField<NotificationTemplateRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>notification.notification_template.CLIENT_ID</code>.
     * Identifier for the client. References security_client table
     */
    public final TableField<NotificationTemplateRecord, ULong> CLIENT_ID = createField(DSL.name("CLIENT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Identifier for the client. References security_client table");

    /**
     * The column <code>notification.notification_template.APP_ID</code>.
     * Identifier for the application. References security_app table
     */
    public final TableField<NotificationTemplateRecord, ULong> APP_ID = createField(DSL.name("APP_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Identifier for the application. References security_app table");

    /**
     * The column <code>notification.notification_template.CODE</code>. Unique
     * Code to identify this row
     */
    public final TableField<NotificationTemplateRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.CHAR(22).nullable(false), this, "Unique Code to identify this row");

    /**
     * The column <code>notification.notification_template.NAME</code>. Template
     * name
     */
    public final TableField<NotificationTemplateRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.CHAR(125).nullable(false), this, "Template name");

    /**
     * The column <code>notification.notification_template.DESCRIPTION</code>.
     * Description of notification Template
     */
    public final TableField<NotificationTemplateRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "Description of notification Template");

    /**
     * The column <code>notification.notification_template.CHANNEL_TYPE</code>.
     * Type of notification channel
     */
    public final TableField<NotificationTemplateRecord, NotificationChannelType> CHANNEL_TYPE = createField(DSL.name("CHANNEL_TYPE"), SQLDataType.VARCHAR(11).nullable(false), this, "Type of notification channel", new EnumConverter<String, NotificationChannelType>(String.class, NotificationChannelType.class));

    /**
     * The column
     * <code>notification.notification_template.TEMPLATE_PARTS</code>.
     * Notification Template parts object
     */
    public final TableField<NotificationTemplateRecord, JSON> TEMPLATE_PARTS = createField(DSL.name("TEMPLATE_PARTS"), SQLDataType.JSON.nullable(false), this, "Notification Template parts object");

    /**
     * The column <code>notification.notification_template.RESOURCES</code>.
     * Notification resources object
     */
    public final TableField<NotificationTemplateRecord, JSON> RESOURCES = createField(DSL.name("RESOURCES"), SQLDataType.JSON.nullable(false), this, "Notification resources object");

    /**
     * The column <code>notification.notification_template.VARIABLES</code>.
     * Variables for Template
     */
    public final TableField<NotificationTemplateRecord, JSON> VARIABLES = createField(DSL.name("VARIABLES"), SQLDataType.JSON.nullable(false), this, "Variables for Template");

    /**
     * The column <code>notification.notification_template.TEMPLATE_TYPE</code>.
     * Type of template
     */
    public final TableField<NotificationTemplateRecord, String> TEMPLATE_TYPE = createField(DSL.name("TEMPLATE_TYPE"), SQLDataType.CHAR(36).nullable(false), this, "Type of template");

    /**
     * The column
     * <code>notification.notification_template.DEFAULT_LANGUAGE</code>. The
     * default language for this template
     */
    public final TableField<NotificationTemplateRecord, String> DEFAULT_LANGUAGE = createField(DSL.name("DEFAULT_LANGUAGE"), SQLDataType.CHAR(36).nullable(false), this, "The default language for this template");

    /**
     * The column
     * <code>notification.notification_template.LANGUAGE_EXPRESSION</code>.
     * Language Expression for this template
     */
    public final TableField<NotificationTemplateRecord, String> LANGUAGE_EXPRESSION = createField(DSL.name("LANGUAGE_EXPRESSION"), SQLDataType.VARCHAR(255), this, "Language Expression for this template");

    /**
     * The column <code>notification.notification_template.CREATED_BY</code>. ID
     * of the user who created this row
     */
    public final TableField<NotificationTemplateRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row");

    /**
     * The column <code>notification.notification_template.CREATED_AT</code>.
     * Time when this row is created
     */
    public final TableField<NotificationTemplateRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created");

    /**
     * The column <code>notification.notification_template.UPDATED_BY</code>. ID
     * of the user who updated this row
     */
    public final TableField<NotificationTemplateRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row");

    /**
     * The column <code>notification.notification_template.UPDATED_AT</code>.
     * Time when this row is updated
     */
    public final TableField<NotificationTemplateRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated");

    private NotificationTemplate(Name alias, Table<NotificationTemplateRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private NotificationTemplate(Name alias, Table<NotificationTemplateRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>notification.notification_template</code> table
     * reference
     */
    public NotificationTemplate(String alias) {
        this(DSL.name(alias), NOTIFICATION_TEMPLATE);
    }

    /**
     * Create an aliased <code>notification.notification_template</code> table
     * reference
     */
    public NotificationTemplate(Name alias) {
        this(alias, NOTIFICATION_TEMPLATE);
    }

    /**
     * Create a <code>notification.notification_template</code> table reference
     */
    public NotificationTemplate() {
        this(DSL.name("notification_template"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Notification.NOTIFICATION;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.NOTIFICATION_TEMPLATE_IDX_21_TEMPLATE_CLIENT_ID_APP_ID);
    }

    @Override
    public Identity<NotificationTemplateRecord, ULong> getIdentity() {
        return (Identity<NotificationTemplateRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<NotificationTemplateRecord> getPrimaryKey() {
        return Keys.KEY_NOTIFICATION_TEMPLATE_PRIMARY;
    }

    @Override
    public List<UniqueKey<NotificationTemplateRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_NOTIFICATION_TEMPLATE_UK1_TEMPLATE_CODE);
    }

    @Override
    public NotificationTemplate as(String alias) {
        return new NotificationTemplate(DSL.name(alias), this);
    }

    @Override
    public NotificationTemplate as(Name alias) {
        return new NotificationTemplate(alias, this);
    }

    @Override
    public NotificationTemplate as(Table<?> alias) {
        return new NotificationTemplate(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationTemplate rename(String name) {
        return new NotificationTemplate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationTemplate rename(Name name) {
        return new NotificationTemplate(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationTemplate rename(Table<?> name) {
        return new NotificationTemplate(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationTemplate where(Condition condition) {
        return new NotificationTemplate(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationTemplate where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationTemplate where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationTemplate where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationTemplate where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationTemplate where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationTemplate where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationTemplate where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationTemplate whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationTemplate whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
