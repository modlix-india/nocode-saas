/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.notification.jooq.tables;


import com.fincity.saas.commons.jooq.convertor.jooq.bindings.JSONMapBinding;
import com.fincity.saas.notification.jooq.Keys;
import com.fincity.saas.notification.jooq.Notification;
import com.fincity.saas.notification.jooq.tables.records.NotificationUserPreferencesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.Map;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class NotificationUserPreferences extends TableImpl<NotificationUserPreferencesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>notification.notification_user_preferences</code>
     */
    public static final NotificationUserPreferences NOTIFICATION_USER_PREFERENCES = new NotificationUserPreferences();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotificationUserPreferencesRecord> getRecordType() {
        return NotificationUserPreferencesRecord.class;
    }

    /**
     * The column <code>notification.notification_user_preferences.ID</code>.
     * Primary key
     */
    public final TableField<NotificationUserPreferencesRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column
     * <code>notification.notification_user_preferences.APP_ID</code>.
     * Identifier for the application. References security_app table
     */
    public final TableField<NotificationUserPreferencesRecord, ULong> APP_ID = createField(DSL.name("APP_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Identifier for the application. References security_app table");

    /**
     * The column
     * <code>notification.notification_user_preferences.USER_ID</code>.
     * Identifier for the user. References security_user table
     */
    public final TableField<NotificationUserPreferencesRecord, ULong> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Identifier for the user. References security_user table");

    /**
     * The column <code>notification.notification_user_preferences.CODE</code>.
     * Unique Code to identify this row
     */
    public final TableField<NotificationUserPreferencesRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.CHAR(22).nullable(false), this, "Unique Code to identify this row");

    /**
     * The column
     * <code>notification.notification_user_preferences.PREFERENCES</code>.
     * Notification preference
     */
    public final TableField<NotificationUserPreferencesRecord, Map> PREFERENCES = createField(DSL.name("PREFERENCES"), SQLDataType.JSON, this, "Notification preference", new JSONMapBinding());

    /**
     * The column
     * <code>notification.notification_user_preferences.ENABLED</code>.
     * Notification enabled or not
     */
    public final TableField<NotificationUserPreferencesRecord, Byte> ENABLED = createField(DSL.name("ENABLED"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "Notification enabled or not");

    /**
     * The column
     * <code>notification.notification_user_preferences.CREATED_BY</code>. ID of
     * the user who created this row
     */
    public final TableField<NotificationUserPreferencesRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row");

    /**
     * The column
     * <code>notification.notification_user_preferences.CREATED_AT</code>. Time
     * when this row is created
     */
    public final TableField<NotificationUserPreferencesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created");

    /**
     * The column
     * <code>notification.notification_user_preferences.UPDATED_BY</code>. ID of
     * the user who updated this row
     */
    public final TableField<NotificationUserPreferencesRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row");

    /**
     * The column
     * <code>notification.notification_user_preferences.UPDATED_AT</code>. Time
     * when this row is updated
     */
    public final TableField<NotificationUserPreferencesRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated");

    private NotificationUserPreferences(Name alias, Table<NotificationUserPreferencesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private NotificationUserPreferences(Name alias, Table<NotificationUserPreferencesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>notification.notification_user_preferences</code>
     * table reference
     */
    public NotificationUserPreferences(String alias) {
        this(DSL.name(alias), NOTIFICATION_USER_PREFERENCES);
    }

    /**
     * Create an aliased <code>notification.notification_user_preferences</code>
     * table reference
     */
    public NotificationUserPreferences(Name alias) {
        this(alias, NOTIFICATION_USER_PREFERENCES);
    }

    /**
     * Create a <code>notification.notification_user_preferences</code> table
     * reference
     */
    public NotificationUserPreferences() {
        this(DSL.name("notification_user_preferences"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Notification.NOTIFICATION;
    }

    @Override
    public Identity<NotificationUserPreferencesRecord, ULong> getIdentity() {
        return (Identity<NotificationUserPreferencesRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<NotificationUserPreferencesRecord> getPrimaryKey() {
        return Keys.KEY_NOTIFICATION_USER_PREFERENCES_PRIMARY;
    }

    @Override
    public List<UniqueKey<NotificationUserPreferencesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_NOTIFICATION_USER_PREFERENCES_UK1_USER_PREF_CODE, Keys.KEY_NOTIFICATION_USER_PREFERENCES_UK2_USER_NOTI_PREF_APP_ID_USER_ID_NAME);
    }

    @Override
    public NotificationUserPreferences as(String alias) {
        return new NotificationUserPreferences(DSL.name(alias), this);
    }

    @Override
    public NotificationUserPreferences as(Name alias) {
        return new NotificationUserPreferences(alias, this);
    }

    @Override
    public NotificationUserPreferences as(Table<?> alias) {
        return new NotificationUserPreferences(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationUserPreferences rename(String name) {
        return new NotificationUserPreferences(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationUserPreferences rename(Name name) {
        return new NotificationUserPreferences(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationUserPreferences rename(Table<?> name) {
        return new NotificationUserPreferences(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationUserPreferences where(Condition condition) {
        return new NotificationUserPreferences(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationUserPreferences where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationUserPreferences where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationUserPreferences where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationUserPreferences where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationUserPreferences where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationUserPreferences where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationUserPreferences where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationUserPreferences whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationUserPreferences whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
