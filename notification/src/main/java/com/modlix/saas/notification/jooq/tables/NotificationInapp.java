/*
 * This file is generated by jOOQ.
 */
package com.modlix.saas.notification.jooq.tables;


import com.modlix.saas.notification.jooq.Keys;
import com.modlix.saas.notification.jooq.Notification;
import com.modlix.saas.notification.jooq.tables.records.NotificationInappRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class NotificationInapp extends TableImpl<NotificationInappRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>notification.notification_inapp</code>
     */
    public static final NotificationInapp NOTIFICATION_INAPP = new NotificationInapp();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotificationInappRecord> getRecordType() {
        return NotificationInappRecord.class;
    }

    /**
     * The column <code>notification.notification_inapp.ID</code>. Primary key,
     * unique identifier for each notification entry
     */
    public final TableField<NotificationInappRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key, unique identifier for each notification entry");

    /**
     * The column <code>notification.notification_inapp.USER_ID</code>. User ID
     */
    public final TableField<NotificationInappRecord, ULong> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "User ID");

    /**
     * The column <code>notification.notification_inapp.APP_CODE</code>. App
     * Code
     */
    public final TableField<NotificationInappRecord, String> APP_CODE = createField(DSL.name("APP_CODE"), SQLDataType.CHAR(64).nullable(false), this, "App Code");

    /**
     * The column
     * <code>notification.notification_inapp.NOTIFICATION_NAME</code>.
     * Notification name
     */
    public final TableField<NotificationInappRecord, String> NOTIFICATION_NAME = createField(DSL.name("NOTIFICATION_NAME"), SQLDataType.VARCHAR(256).nullable(false), this, "Notification name");

    /**
     * The column <code>notification.notification_inapp.TITLE</code>.
     * Notification title
     */
    public final TableField<NotificationInappRecord, String> TITLE = createField(DSL.name("TITLE"), SQLDataType.VARCHAR(256).nullable(false), this, "Notification title");

    /**
     * The column <code>notification.notification_inapp.MESSAGE</code>.
     * Notification message
     */
    public final TableField<NotificationInappRecord, String> MESSAGE = createField(DSL.name("MESSAGE"), SQLDataType.CLOB.nullable(false), this, "Notification message");

    /**
     * The column <code>notification.notification_inapp.MIME_URL</code>. Mime
     * URL
     */
    public final TableField<NotificationInappRecord, String> MIME_URL = createField(DSL.name("MIME_URL"), SQLDataType.VARCHAR(1024), this, "Mime URL");

    /**
     * The column
     * <code>notification.notification_inapp.NOTIFICATION_TYPE</code>.
     * Notification type
     */
    public final TableField<NotificationInappRecord, String> NOTIFICATION_TYPE = createField(DSL.name("NOTIFICATION_TYPE"), SQLDataType.VARCHAR(256).nullable(false), this, "Notification type");

    /**
     * The column <code>notification.notification_inapp.READ_AT</code>. Read at
     */
    public final TableField<NotificationInappRecord, LocalDateTime> READ_AT = createField(DSL.name("READ_AT"), SQLDataType.LOCALDATETIME(0), this, "Read at");

    /**
     * The column <code>notification.notification_inapp.CREATED_AT</code>. Time
     * when this row is created
     */
    public final TableField<NotificationInappRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created");

    private NotificationInapp(Name alias, Table<NotificationInappRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private NotificationInapp(Name alias, Table<NotificationInappRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>notification.notification_inapp</code> table
     * reference
     */
    public NotificationInapp(String alias) {
        this(DSL.name(alias), NOTIFICATION_INAPP);
    }

    /**
     * Create an aliased <code>notification.notification_inapp</code> table
     * reference
     */
    public NotificationInapp(Name alias) {
        this(alias, NOTIFICATION_INAPP);
    }

    /**
     * Create a <code>notification.notification_inapp</code> table reference
     */
    public NotificationInapp() {
        this(DSL.name("notification_inapp"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Notification.NOTIFICATION;
    }

    @Override
    public Identity<NotificationInappRecord, ULong> getIdentity() {
        return (Identity<NotificationInappRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<NotificationInappRecord> getPrimaryKey() {
        return Keys.KEY_NOTIFICATION_INAPP_PRIMARY;
    }

    @Override
    public NotificationInapp as(String alias) {
        return new NotificationInapp(DSL.name(alias), this);
    }

    @Override
    public NotificationInapp as(Name alias) {
        return new NotificationInapp(alias, this);
    }

    @Override
    public NotificationInapp as(Table<?> alias) {
        return new NotificationInapp(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationInapp rename(String name) {
        return new NotificationInapp(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationInapp rename(Name name) {
        return new NotificationInapp(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationInapp rename(Table<?> name) {
        return new NotificationInapp(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationInapp where(Condition condition) {
        return new NotificationInapp(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationInapp where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationInapp where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationInapp where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationInapp where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationInapp where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationInapp where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationInapp where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationInapp whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationInapp whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
