/*
 * This file is generated by jOOQ.
 */
package com.modlix.saas.notification.jooq.tables;


import com.modlix.saas.commons2.jooq.convertor.JSONMysqlMapConvertor;
import com.modlix.saas.notification.jooq.Keys;
import com.modlix.saas.notification.jooq.Notification;
import com.modlix.saas.notification.jooq.tables.records.NotificationPreferenceRecord;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.Map;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class NotificationPreference extends TableImpl<NotificationPreferenceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>notification.notification_preference</code>
     */
    public static final NotificationPreference NOTIFICATION_PREFERENCE = new NotificationPreference();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotificationPreferenceRecord> getRecordType() {
        return NotificationPreferenceRecord.class;
    }

    /**
     * The column <code>notification.notification_preference.ID</code>. Primary
     * key, unique identifier for each notification preference entry
     */
    public final TableField<NotificationPreferenceRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key, unique identifier for each notification preference entry");

    /**
     * The column <code>notification.notification_preference.USER_ID</code>.
     * User ID
     */
    public final TableField<NotificationPreferenceRecord, ULong> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "User ID");

    /**
     * The column <code>notification.notification_preference.APP_CODE</code>.
     * App Code
     */
    public final TableField<NotificationPreferenceRecord, String> APP_CODE = createField(DSL.name("APP_CODE"), SQLDataType.CHAR(64).nullable(false), this, "App Code");

    /**
     * The column <code>notification.notification_preference.PREFERENCE</code>.
     * Preference
     */
    public final TableField<NotificationPreferenceRecord, Map> PREFERENCE = createField(DSL.name("PREFERENCE"), SQLDataType.JSON, this, "Preference", new JSONMysqlMapConvertor());

    /**
     * The column <code>notification.notification_preference.CREATED_AT</code>.
     * Time when this row is created
     */
    public final TableField<NotificationPreferenceRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created");

    /**
     * The column <code>notification.notification_preference.UPDATED_AT</code>.
     * Time when this row is updated
     */
    public final TableField<NotificationPreferenceRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated");

    /**
     * The column <code>notification.notification_preference.CREATED_BY</code>.
     * Created by
     */
    public final TableField<NotificationPreferenceRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Created by");

    /**
     * The column <code>notification.notification_preference.UPDATED_BY</code>.
     * Updated by
     */
    public final TableField<NotificationPreferenceRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Updated by");

    private NotificationPreference(Name alias, Table<NotificationPreferenceRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private NotificationPreference(Name alias, Table<NotificationPreferenceRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>notification.notification_preference</code> table
     * reference
     */
    public NotificationPreference(String alias) {
        this(DSL.name(alias), NOTIFICATION_PREFERENCE);
    }

    /**
     * Create an aliased <code>notification.notification_preference</code> table
     * reference
     */
    public NotificationPreference(Name alias) {
        this(alias, NOTIFICATION_PREFERENCE);
    }

    /**
     * Create a <code>notification.notification_preference</code> table
     * reference
     */
    public NotificationPreference() {
        this(DSL.name("notification_preference"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Notification.NOTIFICATION;
    }

    @Override
    public Identity<NotificationPreferenceRecord, ULong> getIdentity() {
        return (Identity<NotificationPreferenceRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<NotificationPreferenceRecord> getPrimaryKey() {
        return Keys.KEY_NOTIFICATION_PREFERENCE_PRIMARY;
    }

    @Override
    public NotificationPreference as(String alias) {
        return new NotificationPreference(DSL.name(alias), this);
    }

    @Override
    public NotificationPreference as(Name alias) {
        return new NotificationPreference(alias, this);
    }

    @Override
    public NotificationPreference as(Table<?> alias) {
        return new NotificationPreference(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationPreference rename(String name) {
        return new NotificationPreference(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationPreference rename(Name name) {
        return new NotificationPreference(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationPreference rename(Table<?> name) {
        return new NotificationPreference(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationPreference where(Condition condition) {
        return new NotificationPreference(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationPreference where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationPreference where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationPreference where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationPreference where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationPreference where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationPreference where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationPreference where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationPreference whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationPreference whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
